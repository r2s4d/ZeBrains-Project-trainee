#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã digest_sessions —á–µ—Ä–µ–∑ PostgreSQLDatabaseService
"""

import os
import sys
import logging
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def create_digest_sessions_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É digest_sessions —á–µ—Ä–µ–∑ PostgreSQLDatabaseService."""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from src.services.postgresql_database_service import PostgreSQLDatabaseService
        
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PostgreSQLDatabaseService...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        db_service = PostgreSQLDatabaseService()
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS digest_sessions (
            id SERIAL PRIMARY KEY,
            chat_id VARCHAR(255) NOT NULL,
            message_ids TEXT NOT NULL,
            news_count INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        create_indexes_sql = """
        CREATE INDEX IF NOT EXISTS idx_digest_sessions_chat_id ON digest_sessions(chat_id);
        CREATE INDEX IF NOT EXISTS idx_digest_sessions_is_active ON digest_sessions(is_active);
        CREATE INDEX IF NOT EXISTS idx_digest_sessions_created_at ON digest_sessions(created_at);
        """
        
        logger.info("üìÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É digest_sessions...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        with db_service.engine.connect() as connection:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            connection.execute(text(create_table_sql))
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            connection.execute(text(create_indexes_sql))
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            connection.commit()
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ digest_sessions —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
            result = connection.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'digest_sessions'
            """))
            
            if result.fetchone():
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ digest_sessions –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                result = connection.execute(text("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'digest_sessions'
                    ORDER BY ordinal_position
                """))
                
                logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã digest_sessions:")
                for row in result:
                    logger.info(f"  - {row[0]}: {row[1]} {'(NULL)' if row[2] == 'YES' else '(NOT NULL)'} {f'DEFAULT: {row[3]}' if row[3] else ''}")
                
            else:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ digest_sessions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        import traceback
        logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        return False
    
    return True

if __name__ == "__main__":
    logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã digest_sessions...")
    
    if create_digest_sessions_table():
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ digest_sessions —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
