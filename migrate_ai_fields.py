#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π AI –∞–Ω–∞–ª–∏–∑–∞.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from src.services.postgresql_database_service import PostgreSQLDatabaseService
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_service = PostgreSQLDatabaseService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from sqlalchemy import text
        with db_service.get_session() as session:
            result = session.execute(text("SELECT 1"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_commands = [
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS ai_summary TEXT",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS importance_score VARCHAR(10)",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS category VARCHAR(100)",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS tags TEXT",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS potential_impact TEXT",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS tone VARCHAR(20)",
            "ALTER TABLE news ADD COLUMN IF NOT EXISTS ai_analyzed_at TIMESTAMP"
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        with db_service.get_session() as session:
            for command in migration_commands:
                try:
                    print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {command}")
                    session.execute(text(command))
                    session.commit()
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {command}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
                    session.rollback()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...")
        with db_service.get_session() as session:
            update_command = """
            UPDATE news SET 
                ai_summary = title,
                importance_score = '5.0',
                category = '–û–±—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò',
                tags = '–ò–ò, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                potential_impact = '–ú–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ò–ò.',
                tone = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
                ai_analyzed_at = NOW()
            WHERE ai_summary IS NULL
            """
            
            try:
                result = session.execute(text(update_command))
                session.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                session.rollback()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        with db_service.get_session() as session:
            result = session.execute(text("""
                SELECT 
                    COUNT(*) as total_news,
                    COUNT(ai_summary) as with_ai_summary,
                    COUNT(category) as with_category,
                    COUNT(importance_score) as with_importance_score
                FROM news
            """))
            
            stats = result.fetchone()
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {stats[0]}")
            print(f"   –° AI —Å–∞–º–º–∞—Ä–∏: {stats[1]}")
            print(f"   –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {stats[2]}")
            print(f"   –° –æ—Ü–µ–Ω–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏: {stats[3]}")
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    migrate_database()
