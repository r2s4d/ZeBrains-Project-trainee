#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–°–æ–∑–¥–∞–µ—Ç 2 –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
3. –†–∞–±–æ—Ç—É –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ú–∞–π–µ—Ä—Å–∞, RuBERT –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.services.postgresql_database_service import PostgreSQLDatabaseService
from src.services.duplicate_detection_service import DuplicateDetectionService
from src.models.database import News, Source, NewsSource

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class DemoDuplicateCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self.db = PostgreSQLDatabaseService()
        self.duplicate_detector = DuplicateDetectionService()
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def create_demo_duplicates(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        –°—Ü–µ–Ω–∞—Ä–∏–π:
        1. –°–æ–∑–¥–∞–µ—Ç/–ø—Ä–æ–≤–µ—Ä—è–µ—Ç 2 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        2. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        3. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Ö–æ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç
        5. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            # 1. –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            source1 = await self._get_or_create_source(
                name="TechCrunch AI",
                telegram_id="@techcrunch_ai_demo"
            )
            
            source2 = await self._get_or_create_source(
                name="VentureBeat AI",
                telegram_id="@venturebeat_ai_demo"
            )
            
            logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã: {source1.name} (ID: {source1.id}), {source2.name} (ID: {source2.id})")
            
            # 2. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å (–æ—Ä–∏–≥–∏–Ω–∞–ª)
            news1_data = {
                "title": "OpenAI –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∞ GPT-5 —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                "content": """OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ GPT-5 ‚Äî –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç GPT-4 –ø–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º. –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ 
—É–ª—É—á—à–µ–Ω–∏—è –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—é. 
GPT-5 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ 1 –º–∏–ª–ª–∏–æ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 
—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –†–µ–ª–∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω 
–Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–≤–∞—Ä—Ç–∞–ª 2025 –≥–æ–¥–∞. –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.""",
                "source_message_id": 12345,
                "source_channel_username": "techcrunch_ai_demo",
                "source_url": "https://t.me/techcrunch_ai_demo/12345",
                "ai_relevance_score": 9
            }
            
            news1 = await self._create_news(news1_data, source1.id)
            if not news1:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å")
                return
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å 1: '{news1.title}' (ID: {news1.id})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            await asyncio.sleep(2)
            
            # 3. –°–æ–∑–¥–∞–µ–º –ø–æ—Ö–æ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            news2_data = {
                "title": "GPT-5 –æ—Ç OpenAI: –ø—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò",
                "content": """–ö–æ–º–ø–∞–Ω–∏—è OpenAI –æ–±—ä—è–≤–∏–ª–∞ –æ –≤—ã–ø—É—Å–∫–µ GPT-5 ‚Äî –ø–µ—Ä–µ–¥–æ–≤–æ–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ 
–Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å GPT-4, –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ 
—É–ª—É—á—à–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏, –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–º –º—ã—à–ª–µ–Ω–∏–∏. 
GPT-5 —Å–ø–æ—Å–æ–±–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ –º–∏–ª–ª–∏–æ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 
–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ –Ω–∞–º–µ—á–µ–Ω 
–Ω–∞ Q2 2025. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ API.""",
                "source_message_id": 67890,
                "source_channel_username": "venturebeat_ai_demo",
                "source_url": "https://t.me/venturebeat_ai_demo/67890",
                "ai_relevance_score": 8
            }
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å 2 –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
            duplicate_result = await self.duplicate_detector.detect_duplicates(
                title=news2_data["title"],
                content=news2_data["content"],
                filter_relevant=True
            )
            
            if duplicate_result.is_duplicate:
                logger.info(f"üéØ –î–£–ë–õ–ò–ö–ê–¢ –ù–ê–ô–î–ï–ù!")
                logger.info(f"   –ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {duplicate_result.similarity_type}")
                logger.info(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {duplicate_result.similarity_score:.3f}")
                logger.info(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å ID: {duplicate_result.existing_news_id}")
                logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {duplicate_result.reason}")
                
                # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                logger.info(f"üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
                success = await self.duplicate_detector.merge_duplicate_sources(
                    existing_news_id=duplicate_result.existing_news_id,
                    new_source_id=source2.id,
                    new_url=news2_data["source_url"]
                )
                
                if success:
                    logger.info(f"‚úÖ –£–°–ü–ï–•! –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self._show_merged_result(duplicate_result.existing_news_id)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            else:
                logger.info(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ù–ï –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {duplicate_result.reason}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
                news2 = await self._create_news(news2_data, source2.id)
                if news2:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å 2: '{news2.title}' (ID: {news2.id})")
            
            logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("")
            logger.info("üìä –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
            logger.info("   ‚úì –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            logger.info("   ‚úì –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è")
            logger.info("   ‚úì –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
    
    async def _get_or_create_source(self, name: str, telegram_id: str) -> Source:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            telegram_id: Telegram ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            Source: –û–±—ä–µ–∫—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        try:
            with self.db.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                source = session.query(Source).filter(
                    Source.telegram_id == telegram_id
                ).first()
                
                if source:
                    logger.info(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {source.id})")
                    return source
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                source = Source(
                    name=name,
                    telegram_id=telegram_id
                )
                session.add(source)
                session.commit()
                session.refresh(source)
                
                logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ '{name}' (ID: {source.id})")
                return source
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            raise
    
    async def _create_news(self, news_data: dict, source_id: int) -> News:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            source_id: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            News: –°–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
        """
        try:
            with self.db.get_session() as session:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = News(
                    title=news_data["title"],
                    content=news_data["content"],
                    url=news_data.get("source_url"),
                    published_at=datetime.utcnow(),
                    status="new",
                    created_at=datetime.utcnow(),
                    source_message_id=news_data.get("source_message_id"),
                    source_channel_username=news_data.get("source_channel_username"),
                    source_url=news_data.get("source_url"),
                    raw_content=news_data["content"],
                    ai_relevance_score=news_data.get("ai_relevance_score", 8)
                )
                
                session.add(news)
                session.commit()
                session.refresh(news)
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                news_source = NewsSource(
                    news_id=news.id,
                    source_id=source_id,
                    source_url=news_data.get("source_url")
                )
                
                session.add(news_source)
                session.commit()
                
                return news
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return None
    
    async def _show_merged_result(self, news_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
        """
        try:
            with self.db.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = session.query(News).filter(News.id == news_id).first()
                
                if not news:
                    logger.error(f"‚ùå –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
                news_sources = session.query(NewsSource, Source).join(
                    Source, NewsSource.source_id == Source.id
                ).filter(
                    NewsSource.news_id == news_id
                ).all()
                
                logger.info("")
                logger.info("=" * 80)
                logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–û–í")
                logger.info("=" * 80)
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å ID: {news.id}")
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news.title}")
                logger.info(f"–°—Ç–∞—Ç—É—Å: {news.status}")
                logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {news.ai_relevance_score}/10")
                logger.info("")
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(news_sources)}")
                logger.info("")
                
                for i, (news_source, source) in enumerate(news_sources, 1):
                    logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}:")
                    logger.info(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {source.name}")
                    logger.info(f"  - Telegram ID: {source.telegram_id}")
                    logger.info(f"  - URL: {news_source.source_url}")
                    logger.info(f"  - –î–æ–±–∞–≤–ª–µ–Ω: {news_source.created_at}")
                    logger.info("")
                
                logger.info("=" * 80)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    async def cleanup_demo_data(self):
        """–û—á–∏—â–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            with self.db.get_session() as session:
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                demo_sources = session.query(Source).filter(
                    Source.telegram_id.in_([
                        "@techcrunch_ai_demo",
                        "@venturebeat_ai_demo"
                    ])
                ).all()
                
                for source in demo_sources:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
                    session.query(NewsSource).filter(
                        NewsSource.source_id == source.id
                    ).delete()
                    
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    session.delete(source)
                
                # –£–¥–∞–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                session.query(News).filter(
                    News.source_channel_username.in_([
                        "techcrunch_ai_demo",
                        "venturebeat_ai_demo"
                    ])
                ).delete()
                
                session.commit()
                
            logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print()
    print("=" * 80)
    print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–û–í")
    print("=" * 80)
    print()
    print("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞—Å—Ç 2 –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print("–∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.")
    print()
    
    creator = DemoDuplicateCreator()
    
    # –û–ø—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    cleanup = input("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º? (y/n): ").lower().strip()
    if cleanup == 'y':
        await creator.cleanup_demo_data()
        print()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    await creator.create_demo_duplicates()
    
    print()
    print("=" * 80)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 80)
    print()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

