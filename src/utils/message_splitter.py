#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MessageSplitter - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤, —Å–ø–∏—Å–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –¥—Ä—É–≥–∏—Ö 
–¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ª–∏–º–∏—Ç—ã Telegram.
"""

import logging
from typing import List, Dict, Optional, Callable

from src.config.settings import config

logger = logging.getLogger(__name__)


class MessageSplitter:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ –±–ª–æ–∫–∞–º
    """
    
    @staticmethod
    def split_by_items(
        items: List,
        header: str,
        item_formatter: Callable[[int, any], str],
        max_length: Optional[int] = None,
        include_metadata: bool = True
    ) -> List[Dict]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–æ–≤–æ—Å—Ç–µ–π) –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - MorningDigestService._split_message_by_news
        - ExpertInteractionService._split_news_list_for_expert
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            header: –ó–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            item_formatter: –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (index, item) -> str
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏ (default: –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            include_metadata: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (news_indices, buttons)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
                - text: –¢–µ–∫—Å—Ç —á–∞—Å—Ç–∏
                - news_indices: –ò–Ω–¥–µ–∫—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ include_metadata=True)
                - buttons: –ò–Ω–¥–µ–∫—Å—ã –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ include_metadata=True)
        
        Example:
            >>> items = [news1, news2, news3]
            >>> def formatter(i, news):
            ...     return f"{i+1}. {news.summary}\\n"
            >>> parts = MessageSplitter.split_by_items(
            ...     items, "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\\n\\n", formatter
            ... )
        """
        if not items:
            return []
        
        if max_length is None:
            max_length = config.message.max_news_list_length
        
        parts = []
        current_part = header
        current_indices = []
        
        for i, item in enumerate(items):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
            item_text = item_formatter(i, item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–∏–º–∏—Ç
            if len(current_part + item_text) > max_length and current_part != header:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                part_data = {'text': current_part}
                if include_metadata:
                    part_data['news_indices'] = current_indices
                    part_data['buttons'] = current_indices.copy()
                parts.append(part_data)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                current_part = header + item_text
                current_indices = [i]
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                current_part += item_text
                current_indices.append(i)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part and current_part != header:
            part_data = {'text': current_part}
            if include_metadata:
                part_data['news_indices'] = current_indices
                part_data['buttons'] = current_indices.copy()
            parts.append(part_data)
        
        logger.info(f"üìù –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π (–º–∞–∫—Å. –¥–ª–∏–Ω–∞: {max_length})")
        return parts
    
    @staticmethod
    def split_by_blocks(
        text: str,
        max_length: Optional[int] = None,
        block_separator: str = '\n\n',
        sentence_separator: str = '. '
    ) -> List[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –±–ª–æ–∫–∞–º.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - FinalDigestFormatterService.split_digest_message
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –±–ª–æ–∫–∞–º (–æ–±—ã—á–Ω–æ –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
        2. –ï—Å–ª–∏ –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        3. –°–æ–±–∏—Ä–∞–µ—Ç —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏ (default: –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            block_separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –±–ª–æ–∫–æ–≤ (default: '\\n\\n')
            sentence_separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (default: '. ')
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
        
        Example:
            >>> text = "–ë–ª–æ–∫ 1\\n\\n–ë–ª–æ–∫ 2\\n\\n–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –±–ª–æ–∫..."
            >>> parts = MessageSplitter.split_by_blocks(text)
        """
        if max_length is None:
            max_length = config.message.max_digest_length
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –±–ª–æ–∫–∞–º
        blocks = text.split(block_separator)
        
        for block in blocks:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
            if not block.strip():
                continue
            
            # –ï—Å–ª–∏ –±–ª–æ–∫ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if len(current_part + block + block_separator) <= max_length:
                current_part += block + block_separator
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                
                # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–∞–º –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(block) > max_length:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                    sub_parts = MessageSplitter._split_long_block(
                        block, max_length, sentence_separator
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    parts.extend(sub_parts[:-1])
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π
                    current_part = sub_parts[-1] + block_separator
                else:
                    # –ë–ª–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏
                    current_part = block + block_separator
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        logger.info(f"üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π (–º–∞–∫—Å. –¥–ª–∏–Ω–∞: {max_length})")
        return parts
    
    @staticmethod
    def _split_long_block(
        block: str,
        max_length: int,
        sentence_separator: str = '. '
    ) -> List[str]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.
        
        Args:
            block: –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            sentence_separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –±–ª–æ–∫–∞
        """
        parts = []
        sentences = block.split(sentence_separator)
        current_part = ""
        
        for sentence in sentences:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞, –æ–±—Ä–µ–∑–∞–µ–º
            if len(sentence) > max_length:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ ({len(sentence)} > {max_length}), –æ–±—Ä–µ–∑–∞–µ–º")
                sentence = sentence[:max_length - 3] + "..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if len(current_part + sentence + sentence_separator) <= max_length:
                current_part += sentence + sentence_separator
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                current_part = sentence + sentence_separator
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        return parts if parts else [""]

