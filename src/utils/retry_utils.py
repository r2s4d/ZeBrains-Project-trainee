"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏ circuit breaker.
–û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import asyncio
import logging
import time
from typing import Any, Callable, Optional
from functools import wraps
from enum import Enum

logger = logging.getLogger(__name__)

class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è circuit breaker."""
    CLOSED = "CLOSED"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "OPEN"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    HALF_OPEN = "HALF_OPEN"  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

class CircuitBreaker:
    """
    Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤.
    """
    
    def __init__(
        self, 
        failure_threshold: int = 5, 
        timeout: int = 60,
        expected_exception: type = Exception
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è circuit breaker.
        
        Args:
            failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit
            timeout: –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            expected_exception: –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        self.failure_threshold = failure_threshold
        self.timeout = timeout
        self.expected_exception = expected_exception
        
        self.failure_count = 0
        self.last_failure_time = None
        self.state = CircuitState.CLOSED
        
        logger.info(f"üîß Circuit Breaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: threshold={failure_threshold}, timeout={timeout}s")
    
    async def call(self, func: Callable, *args, **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ circuit breaker.
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Raises:
            CircuitBreakerOpenException: –ï—Å–ª–∏ circuit –æ—Ç–∫—Ä—ã—Ç
        """
        if self.state == CircuitState.OPEN:
            if time.time() - self.last_failure_time > self.timeout:
                self.state = CircuitState.HALF_OPEN
                logger.info("üîÑ Circuit Breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN")
            else:
                raise CircuitBreakerOpenException("Circuit breaker is OPEN")
        
        try:
            result = await func(*args, **kwargs)
            self._on_success()
            return result
            
        except self.expected_exception as e:
            self._on_failure()
            raise e
    
    def _on_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self.failure_count = 0
        self.state = CircuitState.CLOSED
        logger.debug("‚úÖ Circuit Breaker: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    def _on_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self.failure_count += 1
        self.last_failure_time = time.time()
        
        if self.failure_count >= self.failure_threshold:
            self.state = CircuitState.OPEN
            logger.error(f"üî¥ Circuit Breaker –û–¢–ö–†–´–¢ –ø–æ—Å–ª–µ {self.failure_count} —Å–±–æ–µ–≤")
        else:
            logger.warning(f"‚ö†Ô∏è Circuit Breaker: {self.failure_count}/{self.failure_threshold} —Å–±–æ–µ–≤")

class CircuitBreakerOpenException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ circuit breaker."""
    pass

def retry_on_failure(
    max_retries: int = 3, 
    delay: float = 1.0, 
    backoff: float = 2.0,
    exceptions: tuple = (Exception,)
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —Å–±–æ—è—Ö.
    
    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        backoff: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        exceptions: –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    return await func(*args, **kwargs)
                    
                except exceptions as e:
                    last_exception = e
                    
                    if attempt < max_retries:
                        wait_time = delay * (backoff ** attempt)
                        logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.1f}—Å")
                        await asyncio.sleep(wait_time)
                    else:
                        logger.error(f"‚ùå –í—Å–µ {max_retries + 1} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
                        
            raise last_exception
            
        return wrapper
    return decorator

def with_circuit_breaker(
    failure_threshold: int = 5,
    timeout: int = 60,
    expected_exception: type = Exception
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è circuit breaker –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit
        timeout: –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        expected_exception: –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    """
    circuit_breaker = CircuitBreaker(failure_threshold, timeout, expected_exception)
    
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            return await circuit_breaker.call(func, *args, **kwargs)
        return wrapper
    return decorator

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
AI_RETRY_CONFIG = {
    'max_retries': 3,
    'delay': 2.0,
    'backoff': 2.0,
    'exceptions': (Exception,)
}

HTTP_RETRY_CONFIG = {
    'max_retries': 2,
    'delay': 1.0,
    'backoff': 1.5,
    'exceptions': (ConnectionError, TimeoutError, asyncio.TimeoutError)
}

DATABASE_RETRY_CONFIG = {
    'max_retries': 3,
    'delay': 0.5,
    'backoff': 2.0,
    'exceptions': (Exception,)
}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
ai_retry = retry_on_failure(**AI_RETRY_CONFIG)
http_retry = retry_on_failure(**HTTP_RETRY_CONFIG)
db_retry = retry_on_failure(**DATABASE_RETRY_CONFIG)

# Circuit breakers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
ai_circuit_breaker = with_circuit_breaker(
    failure_threshold=3,
    timeout=300,  # 5 –º–∏–Ω—É—Ç
    expected_exception=Exception
)

http_circuit_breaker = with_circuit_breaker(
    failure_threshold=5,
    timeout=180,  # 3 –º–∏–Ω—É—Ç—ã
    expected_exception=ConnectionError
)

