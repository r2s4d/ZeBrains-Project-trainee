"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É event loop.
"""

import asyncio
import logging
from typing import Any, Callable, Optional
from functools import wraps

logger = logging.getLogger(__name__)

class TimeoutError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤."""
    pass

async def with_timeout(
    coro: Any, 
    timeout_seconds: float, 
    operation_name: str = "–æ–ø–µ—Ä–∞—Ü–∏—è",
    fallback_value: Any = None
) -> Any:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
    
    Args:
        coro: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        fallback_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ fallback_value –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        
    Raises:
        TimeoutError: –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞
    """
    try:
        result = await asyncio.wait_for(coro, timeout=timeout_seconds)
        logger.debug(f"‚úÖ {operation_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {timeout_seconds}—Å")
        return result
        
    except asyncio.TimeoutError:
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç {operation_name} ({timeout_seconds}—Å)")
        if fallback_value is not None:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {operation_name}")
            return fallback_value
        else:
            raise TimeoutError(f"–¢–∞–π–º–∞—É—Ç {operation_name} ({timeout_seconds}—Å)")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {operation_name}: {e}")
        if fallback_value is not None:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {operation_name}")
            return fallback_value
        else:
            raise

def timeout_decorator(timeout_seconds: float, operation_name: str = "–æ–ø–µ—Ä–∞—Ü–∏—è", fallback_value: Any = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
    
    Args:
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        fallback_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            return await with_timeout(
                func(*args, **kwargs),
                timeout_seconds,
                operation_name,
                fallback_value
            )
        return wrapper
    return decorator

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
AI_REQUEST_TIMEOUT = 30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
HTTP_REQUEST_TIMEOUT = 60.0  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
DATABASE_TIMEOUT = 10.0  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
TELEGRAM_API_TIMEOUT = 30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è Telegram API

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
ai_timeout = timeout_decorator(AI_REQUEST_TIMEOUT, "AI –∑–∞–ø—Ä–æ—Å", None)
http_timeout = timeout_decorator(HTTP_REQUEST_TIMEOUT, "HTTP –∑–∞–ø—Ä–æ—Å", None)
db_timeout = timeout_decorator(DATABASE_TIMEOUT, "–æ–ø–µ—Ä–∞—Ü–∏—è —Å –ë–î", None)
telegram_timeout = timeout_decorator(TELEGRAM_API_TIMEOUT, "Telegram API", None)

