#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è AI News Assistant.
–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
"""

import os
import logging
from dataclasses import dataclass
from typing import Optional, List
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

logger = logging.getLogger(__name__)


@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    host: str = "localhost"
    port: int = 5432
    name: str = "ai_news"
    user: str = "postgres"
    password: str = ""
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î."""
        if not self.password:
            logger.warning("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.name:
            raise ValueError("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")


@dataclass
class TelegramConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram."""
    # Bot API (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞)
    bot_token: str = ""
    curator_chat_id: str = ""
    channel_id: str = ""
    max_message_length: int = 4096
    max_photo_caption_length: int = 1024
    
    # User API (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏) - —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 1+2
    api_id: Optional[int] = None
    api_hash: str = ""
    user_session_name: str = "AI_News_Curator"
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram."""
        # Bot API –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.curator_chat_id:
            raise ValueError("CURATOR_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.channel_id:
            raise ValueError("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # User API –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        if not self.api_id or not self.api_hash:
            logger.warning("‚ö†Ô∏è User API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (TELEGRAM_API_ID, TELEGRAM_API_HASH)")
            logger.warning("üìã –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Bot API")


@dataclass
class AIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤."""
    proxy_api_key: str = ""
    proxy_url: str = "https://openai.api.proxyapi.ru/v1"
    model: str = "openai/gpt-5-mini-2025-08-07"
    max_content_length: int = 1000
    max_analysis_length: int = 3500
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI."""
        if not self.proxy_api_key:
            raise ValueError("PROXY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@dataclass
class SecurityConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    ssl_verify: bool = True
    use_https: bool = True
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        if not self.ssl_verify:
            logger.warning("‚ö†Ô∏è SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!")


@dataclass
class TimeoutConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤."""
    approval_timeout: int = 3600  # 1 —á–∞—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    reminder_interval: int = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    curator_alert_threshold: int = 14400  # 4 —á–∞—Å–∞ –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞
    news_parsing_interval: int = 1  # 1 —á–∞—Å –º–µ–∂–¥—É –ø–∞—Ä—Å–∏–Ω–≥–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π
    message_delay_seconds: float = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    bot_loop_sleep_seconds: int = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞
    session_restore_timeout: float = 30.0  # –¢–∞–π–º–∞—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è expert_interaction_service
    expert_session_ttl_hours: int = 24  # TTL —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ —á–∞—Å–∞—Ö
    expert_comment_ttl_hours: int = 2   # TTL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ —á–∞—Å–∞—Ö
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤."""
        if self.approval_timeout <= 0:
            raise ValueError("approval_timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.reminder_interval <= 0:
            raise ValueError("reminder_interval –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.expert_session_ttl_hours <= 0:
            raise ValueError("expert_session_ttl_hours –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.expert_comment_ttl_hours <= 0:
            raise ValueError("expert_comment_ttl_hours –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")


@dataclass
class MessageConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
    max_digest_length: int = 4096
    max_news_list_length: int = 3500
    max_expert_message_length: int = 3500
    split_message_length: int = 1024
    max_digest_parts: int = 3
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if self.max_digest_length <= 0:
            raise ValueError("max_digest_length –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")


@dataclass
class SchedulerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
    morning_digest_hour: int = 9
    morning_digest_minute: int = 0
    news_parsing_start_hour: int = 9
    news_parsing_end_hour: int = 21
    news_parsing_minute: int = 0
    night_parsing_hours: str = "21-23,0-8"
    night_parsing_minute: int = 0
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if not (0 <= self.morning_digest_hour <= 23):
            raise ValueError("morning_digest_hour –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
        if not (0 <= self.morning_digest_minute <= 59):
            raise ValueError("morning_digest_minute –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 59")


@dataclass
class ExpertConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."""
    test_expert_telegram_id: str = "1326944316"
    test_expert_name: str = "–Ø (—Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç)"
    test_expert_specialization: str = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."""
        if not self.test_expert_telegram_id:
            raise ValueError("test_expert_telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")


@dataclass
class DuplicateDetectionConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
    time_window_hours: int = 24  # –û–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º –ú–∞–π–µ—Ä—Å–∞ + –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω
    myers_threshold: float = 0.15  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (15% –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞)
    min_text_length: int = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    # RuBERT —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    rubert_model: str = "cointegrated/rubert-tiny2"  # –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    embedding_dimension: int = 312  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ rubert-tiny2
    cosine_threshold: float = 0.8  # –ü–æ—Ä–æ–≥ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    
    # DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    dbscan_eps: float = 0.3  # –†–∞–¥–∏—É—Å —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –¥–ª—è DBSCAN
    dbscan_min_samples: int = 2  # –ú–∏–Ω–∏–º—É–º –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_news_to_compare: int = 50  # –ú–∞–∫—Å–∏–º—É–º –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    cache_embeddings: bool = True  # –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    cache_ttl_hours: int = 24  # TTL –∫—ç—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ —á–∞—Å–∞—Ö
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        if not (0 < self.myers_threshold < 1):
            raise ValueError("myers_threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
        if not (0 < self.cosine_threshold < 1):
            raise ValueError("cosine_threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
        if self.time_window_hours <= 0:
            raise ValueError("time_window_hours –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.min_text_length <= 0:
            raise ValueError("min_text_length –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")


@dataclass
class AppConfig:
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    database: DatabaseConfig
    telegram: TelegramConfig
    ai: AIConfig
    security: SecurityConfig
    timeout: TimeoutConfig
    message: MessageConfig
    scheduler: SchedulerConfig
    expert: ExpertConfig
    duplicate_detection: DuplicateDetectionConfig
    
    @classmethod
    def load(cls) -> 'AppConfig':
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            return cls(
                database=DatabaseConfig(
                    host=os.getenv('DB_HOST', 'localhost'),
                    port=int(os.getenv('DB_PORT', '5432')),
                    name=os.getenv('DB_NAME', 'ai_news_assistant'),
                    user=os.getenv('DB_USER', 'bot_user'),
                    password=os.getenv('DB_PASSWORD', '')
                ),
                telegram=TelegramConfig(
                    # Bot API
                    bot_token=os.getenv('TELEGRAM_BOT_TOKEN', ''),
                    curator_chat_id=os.getenv('CURATOR_CHAT_ID', ''),
                    channel_id=os.getenv('CHANNEL_ID', ''),
                    max_message_length=int(os.getenv('MAX_MESSAGE_LENGTH', '4096')),
                    max_photo_caption_length=int(os.getenv('MAX_PHOTO_CAPTION_LENGTH', '1024')),
                    
                    # User API (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è 1+2)
                    api_id=int(os.getenv('TELEGRAM_API_ID', '0')) if os.getenv('TELEGRAM_API_ID') else None,
                    api_hash=os.getenv('TELEGRAM_API_HASH', ''),
                    user_session_name=os.getenv('TELEGRAM_USER_SESSION_NAME', 'AI_News_Curator')
                ),
                ai=AIConfig(
                    proxy_api_key=os.getenv('PROXY_API_KEY', ''),
                    proxy_url=os.getenv('PROXY_URL', 'https://openai.api.proxyapi.ru/v1'),
                    model=os.getenv('AI_MODEL', 'openai/gpt-5-mini-2025-08-07'),
                    max_content_length=int(os.getenv('AI_MAX_CONTENT_LENGTH', '1000')),
                    max_analysis_length=int(os.getenv('AI_MAX_ANALYSIS_LENGTH', '3500'))
                ),
                security=SecurityConfig(
                    ssl_verify=os.getenv('SSL_VERIFY', 'true').lower() == 'true',
                    use_https=os.getenv('USE_HTTPS', 'true').lower() == 'true'
                ),
                timeout=TimeoutConfig(
                    approval_timeout=int(os.getenv('APPROVAL_TIMEOUT', '3600')),
                    reminder_interval=int(os.getenv('REMINDER_INTERVAL', '3600')),
                    curator_alert_threshold=int(os.getenv('CURATOR_ALERT_THRESHOLD', '14400')),
                    news_parsing_interval=int(os.getenv('NEWS_PARSING_INTERVAL', '1')),
                    message_delay_seconds=float(os.getenv('MESSAGE_DELAY_SECONDS', '0.5')),
                    bot_loop_sleep_seconds=int(os.getenv('BOT_LOOP_SLEEP_SECONDS', '1')),
                    session_restore_timeout=float(os.getenv('SESSION_RESTORE_TIMEOUT', '30.0')),
                    expert_session_ttl_hours=int(os.getenv('EXPERT_SESSION_TTL_HOURS', '24')),
                    expert_comment_ttl_hours=int(os.getenv('EXPERT_COMMENT_TTL_HOURS', '2'))
                ),
                message=MessageConfig(
                    max_digest_length=int(os.getenv('MAX_DIGEST_LENGTH', '4096')),
                    max_news_list_length=int(os.getenv('MAX_NEWS_LIST_LENGTH', '3500')),
                    max_expert_message_length=int(os.getenv('MAX_EXPERT_MESSAGE_LENGTH', '3500')),
                    split_message_length=int(os.getenv('SPLIT_MESSAGE_LENGTH', '1024')),
                    max_digest_parts=int(os.getenv('MAX_DIGEST_PARTS', '3'))
                ),
                scheduler=SchedulerConfig(
                    morning_digest_hour=int(os.getenv('MORNING_DIGEST_HOUR', '9')),
                    morning_digest_minute=int(os.getenv('MORNING_DIGEST_MINUTE', '0')),
                    news_parsing_start_hour=int(os.getenv('NEWS_PARSING_START_HOUR', '9')),
                    news_parsing_end_hour=int(os.getenv('NEWS_PARSING_END_HOUR', '21')),
                    news_parsing_minute=int(os.getenv('NEWS_PARSING_MINUTE', '0')),
                    night_parsing_hours=os.getenv('NIGHT_PARSING_HOURS', '21-23,0-8'),
                    night_parsing_minute=int(os.getenv('NIGHT_PARSING_MINUTE', '0'))
                ),
                expert=ExpertConfig(
                    test_expert_telegram_id=os.getenv('TEST_EXPERT_TELEGRAM_ID', '1326944316'),
                    test_expert_name=os.getenv('TEST_EXPERT_NAME', '–Ø (—Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç)'),
                    test_expert_specialization=os.getenv('TEST_EXPERT_SPECIALIZATION', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
                ),
                duplicate_detection=DuplicateDetectionConfig(
                    time_window_hours=int(os.getenv('DUPLICATE_TIME_WINDOW_HOURS', '24')),
                    myers_threshold=float(os.getenv('DUPLICATE_MYERS_THRESHOLD', '0.15')),
                    min_text_length=int(os.getenv('DUPLICATE_MIN_TEXT_LENGTH', '50')),
                    rubert_model=os.getenv('DUPLICATE_RUBERT_MODEL', 'cointegrated/rubert-tiny2'),
                    embedding_dimension=int(os.getenv('DUPLICATE_EMBEDDING_DIMENSION', '312')),
                    cosine_threshold=float(os.getenv('DUPLICATE_COSINE_THRESHOLD', '0.8')),
                    dbscan_eps=float(os.getenv('DUPLICATE_DBSCAN_EPS', '0.3')),
                    dbscan_min_samples=int(os.getenv('DUPLICATE_DBSCAN_MIN_SAMPLES', '2')),
                    max_news_to_compare=int(os.getenv('DUPLICATE_MAX_NEWS_TO_COMPARE', '50')),
                    cache_embeddings=os.getenv('DUPLICATE_CACHE_EMBEDDINGS', 'true').lower() == 'true',
                    cache_ttl_hours=int(os.getenv('DUPLICATE_CACHE_TTL_HOURS', '24'))
                )
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            self.database.__post_init__()
            self.telegram.__post_init__()
            self.ai.__post_init__()
            self.security.__post_init__()
            self.timeout.__post_init__()
            self.message.__post_init__()
            self.scheduler.__post_init__()
            self.expert.__post_init__()
            self.duplicate_detection.__post_init__()
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = AppConfig.load()

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not config.validate():
    raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
