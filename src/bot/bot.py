#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è AI News Assistant.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å BotDatabaseService –∏ OpenAIService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ AI.
"""

import os
import sys
import logging
import asyncio
from typing import List, Optional, Dict
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from src.services.bot_database_service import BotDatabaseService
# from src.services.openai_service import OpenAIService  # –£–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º AIAnalysisService
from src.services.curator_service import CuratorService
from src.services.post_formatter_service import PostFormatterService
from src.services.real_expert_service import RealExpertService
from src.services.news_parser_service import NewsParserService
from src.services.notification_service import NotificationService
from src.services.publication_service import PublicationService
from src.services.interactive_moderation_service import InteractiveModerationService
from src.services.expert_choice_service import ExpertChoiceService
from src.services.expert_interaction_service import ExpertInteractionService
from src.services.morning_digest_service import MorningDigest
from src.services.final_digest_formatter_service import FinalDigestFormatterService
from src.services.curator_approval_service import CuratorApprovalService
from src.models.database import Source, News, Curator, Expert


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ==================== –ö–õ–ê–°–° –ë–û–¢–ê ====================

class AINewsBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI News Assistant.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å BotDatabaseService –∏ OpenAIService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ AI.
    """
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.token = token
        self.application = Application.builder().token(token).build()
        self.service = BotDatabaseService()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        self.waiting_for_digest_edit = {}  # user_id -> True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.waiting_for_photo = {}  # user_id -> digest_text
        
        # OpenAI —Å–µ—Ä–≤–∏—Å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º AIAnalysisService
        self.ai_service = None
        logger.info("‚ÑπÔ∏è OpenAI —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º AIAnalysisService —Å ProxyAPI")
        
        self.curator_service = CuratorService(self.service)
        self.post_formatter = PostFormatterService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RealExpertService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
        self.expert_service = RealExpertService(self.service)
        logger.info("‚úÖ RealExpertService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NewsParserService –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        from src.services.postgresql_database_service import PostgreSQLDatabaseService
        from src.services.ai_analysis_service import AIAnalysisService
        
        postgres_db = PostgreSQLDatabaseService()
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        try:
            self.ai_analysis_service = AIAnalysisService()
            logger.info("‚úÖ AIAnalysisService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AIAnalysisService: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.ai_analysis_service = None
        
        self.parser_service = NewsParserService(
            database_service=postgres_db,
            curator_service=self.curator_service,
            expert_service=self.expert_service,
            openai_service=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            ai_analysis_service=self.ai_analysis_service
        )
        logger.info("‚úÖ NewsParserService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å PostgreSQL")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NotificationService –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_service = NotificationService(self.service)
        logger.info("‚úÖ NotificationService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PublicationService –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
        # –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥–∞
        bot_token_env = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token_env:
            bot_token_env = "8195833718:AAGbqnbZz7NrbOWN5ic5k7oxGMUTntgHE6s"
        channel_id = "@egor4ik1234"   # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.publication_service = PublicationService(self.service, bot_token_env, channel_id)
        logger.info("‚úÖ PublicationService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
        
        
        
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SchedulerService –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SchedulerService...")
            
            from src.services.scheduler_service import SchedulerService
            from src.services.morning_digest_service import MorningDigestService
            from src.services.expert_selection_service import ExpertSelectionService
            
            logger.info("‚úÖ –ú–æ–¥—É–ª–∏ SchedulerService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å parser_service
            if self.parser_service:
                logger.info("‚úÖ NewsParserService –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è SchedulerService")
            else:
                logger.warning("‚ö†Ô∏è NewsParserService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è SchedulerService")
            
            self.morning_digest_service = MorningDigestService(
                database_service=postgres_db,
                ai_analysis_service=self.ai_analysis_service,
                notification_service=self.notification_service,
                curator_service=self.curator_service,
                bot=self.application.bot
            )
            logger.info("‚úÖ MorningDigestService —Å–æ–∑–¥–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.ai_analysis_service:
                self.final_digest_formatter = FinalDigestFormatterService(self.ai_analysis_service)
                logger.info("‚úÖ FinalDigestFormatterService —Å–æ–∑–¥–∞–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞
                bot_token = os.getenv('TELEGRAM_BOT_TOKEN', "8195833718:AAGbqnbZz7NrbOWN5ic5k7oxGMUTntgHE6s")
                curator_chat_id = "-1002983482030"  # ID –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞
                self.curator_chat_id = curator_chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
                
                self.curator_approval_service = CuratorApprovalService(
                    bot_token=bot_token,
                    curator_chat_id=curator_chat_id,
                    formatter_service=self.final_digest_formatter,
                    bot_instance=self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç
                )
                logger.info("‚úÖ CuratorApprovalService —Å–æ–∑–¥–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è AIAnalysisService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                self.final_digest_formatter = None
                self.curator_approval_service = None
            
            self.expert_selection_service = ExpertSelectionService(
                database_service=postgres_db,
                notification_service=self.notification_service
            )
            logger.info("‚úÖ ExpertSelectionService —Å–æ–∑–¥–∞–Ω")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ MorningDigestService
            self.morning_digest_service.expert_selection_service = self.expert_selection_service
            logger.info("‚úÖ ExpertSelectionService –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MorningDigestService")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º NewsParserService –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.info("üîß –°–æ–∑–¥–∞–µ–º SchedulerService...")
            self.scheduler_service = SchedulerService(
                morning_digest_service=self.morning_digest_service,
                news_parser_service=self.parser_service
            )
            logger.info("‚úÖ SchedulerService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
            logger.info("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–∫–ª—é—á–µ–Ω")
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –º–µ—Ç–æ–¥–µ run()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SchedulerService: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            self.scheduler_service = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            self.interactive_moderation_service = InteractiveModerationService()
            self.expert_choice_service = ExpertChoiceService()
            self.expert_interaction_service = ExpertInteractionService(
                self.application.bot, 
                self.curator_approval_service
            )
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            self.interactive_moderation_service = None
            self.expert_choice_service = None
            self.expert_interaction_service = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        self.application.add_handler(CommandHandler("morning_digest", self.morning_digest_command))
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.application.add_handler(CommandHandler("parse_now", self.parse_now_command))
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        self.application.add_handler(CommandHandler("create_final_digest", self.create_final_digest_command))
        
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.application.add_handler(CommandHandler("schedule", self.schedule_command))
        self.application.add_handler(CommandHandler("schedule_status", self.schedule_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ
        self.application.add_handler(MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, self.handle_message))
    
    # ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI News Assistant!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üì∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ò–ò –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é OpenAI
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/notification_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏!
        """
        
        await update.message.reply_text(welcome_text)
    
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
ü§ñ <b>AI News Assistant Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üåÖ –î–∞–π–¥–∂–µ—Å—Ç—ã:</b>
/morning_digest - –°–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
/create_final_digest - –°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç

<b>üìä –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>
/parse_now - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞

<b>‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:</b>
/schedule - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
/schedule_status - –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

<b>üîß –°–∏—Å—Ç–µ–º–∞:</b>
/proxy_status - –°—Ç–∞—Ç—É—Å ProxyAPI

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.</i>
        """
        
        await update.message.reply_text(help_text, parse_mode="HTML")
    
    
    
    
    
    
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê INLINE –ö–ù–û–ü–û–ö ====================
    
    async def _safe_answer_callback(self, query, text: str = None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            if text:
                await query.answer(text)
            else:
                await query.answer()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await self._safe_answer_callback(query)
        
        data = query.data
        logger.info(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data}")
        
        if data == "admin_stats":
            await self._handle_admin_stats(query)
        elif data == "admin_sources":
            await self._handle_admin_sources(query)
        elif data == "admin_add_source":
            await self._handle_admin_add_source(query)
        elif data == "admin_delete_source":
            await self._handle_admin_delete_source(query)
        elif data == "admin_ai_test":
            await self._handle_admin_ai_test(query)
        elif data == "admin_settings":
            await self._handle_admin_settings(query)
        elif data.startswith("remove_news_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å ID: {data}")
            news_id = int(data.split("_")[2])
            await self._handle_remove_news(query, query.from_user.id, news_id)
        elif data == "approve_remaining":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏")
            await self._handle_approve_remaining(query, query.from_user.id)
        elif data == "approve_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            await self._handle_digest_approval(query, query.from_user.id)
        elif data == "edit_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            await self._handle_digest_editing(query, query.from_user.id)
        elif data == "approve_edited_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            await self._handle_edited_digest_approval(query, query.from_user.id)
        elif data == "edit_digest_again":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            await self._handle_digest_editing(query, query.from_user.id)
        elif data.startswith("select_expert_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            logger.info(f"üë®‚Äçüíº –í—ã–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞: {data}")
            expert_id = int(data.split("_")[2])
            await self._handle_select_expert(query, query.from_user.id, expert_id)
        elif data.startswith("comment_news_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            logger.info(f"üí¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {data}")
            news_id = int(data.split("_")[2])
            await self._handle_comment_request(query, query.from_user.id, news_id)
        else:
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def _handle_admin_stats(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'."""
        try:
            stats = self.service.get_statistics()
            
            if not stats:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OpenAI
            ai_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if self.ai_analysis_service is not None else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {stats.get('total_sources', 0)}
üìù –ù–æ–≤–æ—Å—Ç–∏: {stats.get('total_news', 0)}
üë• –ö—É—Ä–∞—Ç–æ—Ä—ã: {stats.get('total_curators', 0)}
üß† –≠–∫—Å–ø–µ—Ä—Ç—ã: {stats.get('total_experts', 0)}
ü§ñ AI —Å–µ—Ä–≤–∏—Å: {ai_status}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('last_update', 'N/A')}
            """
            
            await query.edit_message_text(stats_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _handle_admin_sources(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'."""
        try:
            sources = self.service.get_all_sources()
            
            if not sources:
                await query.edit_message_text("üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            sources_text = "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
            
            for i, source in enumerate(sources[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                sources_text += f"{i}. {source.name} ({source.telegram_id})\n"
            
            if len(sources) > 10:
                sources_text += f"\n... –∏ –µ—â–µ {len(sources) - 10} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
            
            await query.edit_message_text(sources_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    async def _handle_admin_add_source(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫'."""
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/add_source <–Ω–∞–∑–≤–∞–Ω–∏–µ> <telegram_id>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/add_source \"AI News\" @ai_news_channel"
        )
    
    async def _handle_admin_delete_source(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫'."""
        await query.edit_message_text(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/delete_source <id>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /list_sources"
        )
    
    async def _handle_admin_ai_test(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'AI –¢–µ—Å—Ç'."""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
            test_content = "OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é GPT-4"
            summary = self.ai_analysis_service.generate_summary_only(test_content)
            
            if summary:
                result_text = f"""
ü§ñ –¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞

‚úÖ **–°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:**
{summary[:100]}...

üü¢ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                """
            else:
                result_text = "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            await query.edit_message_text(result_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI")
    
    async def _handle_admin_settings(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'."""
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        )
    
    
    
    # ==================== –ö–û–ú–ê–ù–î–ê –£–¢–†–ï–ù–ù–ï–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê ====================
    
    async def morning_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /morning_digest - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            user = update.effective_user
            logger.info(f"üåÖ –ö–æ–º–∞–Ω–¥–∞ /morning_digest –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
            if not await self._is_curator(user.id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.\n"
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º."
                )
                return
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º MorningDigestService
            from src.services.morning_digest_service import MorningDigestService
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            postgres_db = self._get_postgres_db()
            notification_service = self._get_notification_service()
            curator_service = self._get_curator_service()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_service = MorningDigestService(
                database_service=postgres_db,
                ai_analysis_service=self.ai_analysis_service,
                notification_service=notification_service,
                curator_service=curator_service,
                bot=self.application.bot
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest = await digest_service.create_morning_digest()
            
            if digest.news_count == 0:
                await update.message.reply_text(
                    "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse_all –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if hasattr(self, 'interactive_moderation_service') and self.interactive_moderation_service:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                news_items = [
                    {
                        'id': news.id,
                        'title': news.title,
                        'summary': news.summary,
                        'source_links': news.source_links
                    }
                    for news in digest.news_items
                ]
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                self.interactive_moderation_service.create_moderation_session(
                    user_id=user.id,
                    chat_id=update.effective_chat.id,
                    message_id=update.message.message_id,
                    news_items=news_items
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¢–û–õ–¨–ö–û –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ –§–¢)
            curators_chat_id = "-1002983482030"  # –†–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            await digest_service.send_digest_to_curators_chat(digest, curators_chat_id)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–∞–π–¥–∂–µ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ morning_digest_command: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_moderation_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
        query = update.callback_query
        user = update.effective_user
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")
                return
            
            callback_data = query.data
            
            if callback_data.startswith("remove_news_"):
                # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                news_id = int(callback_data.split("_")[-1])
                await self._handle_remove_news(query, user.id, news_id)
                
            elif callback_data == "approve_remaining":
                # –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
                await self._handle_approve_remaining(query, user.id)
                
            elif callback_data.startswith("select_expert_"):
                # –í—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞
                expert_id = int(callback_data.split("_")[-1])
                await self._handle_select_expert(query, user.id, expert_id)
                
            elif callback_data.startswith("expert_unavailable_"):
                # –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_moderation_callback: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_remove_news(self, query, user_id: int, news_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å {news_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if not hasattr(self, 'interactive_moderation_service') or not self.interactive_moderation_service:
                logger.error("‚ùå InteractiveModerationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            success = self.interactive_moderation_service.remove_news_from_session(user_id, news_id)
            if not success:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
            remaining_news = self.interactive_moderation_service.get_remaining_news(user_id)
            logger.info(f"üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏: {len(remaining_news)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–ø–æ JSON-—Å–µ—Å—Å–∏–∏)
            if self.morning_digest_service:
                chat_id_str = str(query.message.chat_id)
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id_str} (—Ç–∏–ø: {type(chat_id_str)})")
                
                cleanup_success = await self.morning_digest_service.delete_digest_messages(chat_id_str)
                if cleanup_success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id_str}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id_str}")
            
            logger.info(f"üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: –ø–æ–ª—É—á–µ–Ω–æ {len(remaining_news)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if remaining_news is not None:
                if remaining_news:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏
                    await self._create_new_digest_after_removal(query, remaining_news)
                else:
                    # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
                    await query.edit_message_text(
                        "üì≠ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /morning_digest –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."
                    )
                
                await query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É–¥–∞–ª–µ–Ω–∞, –¥–∞–π–¥–∂–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_select_expert(self, query, user_id: int, expert_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not hasattr(self, 'expert_choice_service') or not self.expert_choice_service:
                logger.error("‚ùå ExpertChoiceService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            expert = self.expert_choice_service.get_expert_by_id(expert_id)
            logger.info(f"üë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç: {expert}")
            
            if not expert:
                logger.error("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await query.answer("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.info(f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {expert.name}, is_test: {expert.is_test}")
            
            if expert.is_test:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
                logger.info(f"üë®‚Äçüíº –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert.name} –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏")
                self.service.set_expert_of_week(expert.id)
                
                # –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ª–∏—á–∫—É
                logger.info(f"üë®‚Äçüíº –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
                await self._send_news_to_expert(query, expert, user_id)
            else:
                logger.info(f"‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä—Ç {expert.name} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _update_moderation_message(self, query, remaining_news: List[Dict]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
        try:
            logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length = 4000
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"""
üåÖ <b>–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô</b>
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}

<b>üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:</b>
"""
            
            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(remaining_news) <= 5:
                message_text = header
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
                for i, news in enumerate(remaining_news, 1):
                    message_text += f"""
<b>{i}. {news['title']}</b>
üìù {news['summary']}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source_links']}

"""
                
                message_text += """
<b>üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                buttons = []
                for i, news in enumerate(remaining_news):
                    button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}"
                    callback_data = f"remove_news_{news['id']}"
                    logger.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: {button_text} -> {callback_data}")
                    buttons.append([
                        InlineKeyboardButton(
                            button_text, 
                            callback_data=callback_data
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                approve_button = InlineKeyboardButton(
                    "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
                    callback_data="approve_remaining"
                )
                buttons.append([approve_button])
                
                reply_markup = InlineKeyboardMarkup(buttons)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                
            else:
                # –ù–æ–≤–æ—Å—Ç–µ–π –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
                await query.edit_message_text(
                    "üìù –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç...",
                    parse_mode="HTML"
                )
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                from src.services.morning_digest_service import MorningDigest, DigestNews
                from datetime import datetime
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã DigestNews
                digest_news = []
                for news in remaining_news:
                    digest_item = DigestNews(
                        id=news['id'],
                        title=news['title'],
                        summary=news['summary'],
                        importance_score=news.get('importance_score', 5),
                        category=news.get('category', '–û–±—â–∏–µ'),
                        source_links=news.get('source_links', ''),
                        published_at=news.get('published_at', datetime.now()),
                        curator_id=news.get('curator_id')
                    )
                    digest_news.append(digest_item)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
                digest = MorningDigest(
                    date=datetime.now(),
                    news_count=len(digest_news),
                    news_items=digest_news,
                    total_importance=5,
                    categories=['–û–±—â–∏–µ'],
                    curator_id=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                success = await self.morning_digest_service.send_digest_to_curators_chat(
                    digest, 
                    str(query.message.chat_id)
                )
                
                if success:
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")

            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def _show_expert_choice(self, query, approved_news: List[Dict]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üë®‚Äçüíº –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if not hasattr(self, 'expert_choice_service') or not self.expert_choice_service:
                logger.error("‚ùå ExpertChoiceService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            message_text = f"""
‚úÖ <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!</b>

üì∞ –û–¥–æ–±—Ä–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(approved_news)}
üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:

"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            buttons = self.expert_choice_service.create_expert_choice_buttons()
            logger.info(f"üîò –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞: {len(buttons)}")
            
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä–æ–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            await self.application.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞")
    
    async def _send_news_to_expert(self, query, expert, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É –≤ –ª–∏—á–∫—É."""
        try:
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name} (ID: {expert.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            if not hasattr(self, 'interactive_moderation_service') or not self.interactive_moderation_service:
                logger.error("‚ùå InteractiveModerationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                logger.error("‚ùå ExpertInteractionService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
            approved_news = self.interactive_moderation_service.get_remaining_news(user_id)
            logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω—ã –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(approved_news)} —à—Ç—É–∫")
            
            if not approved_news:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await query.answer("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if expert.is_test:
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ Telegram ID
                expert_telegram_id = int(expert.telegram_id)
                expert_name = expert.name
                logger.info(f"üë®‚Äçüíº –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç: {expert_name}, Telegram ID: {expert_telegram_id}")
            else:
                # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                logger.info(f"‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç {expert.name} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                await query.answer("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
            success = await self.expert_interaction_service.send_news_to_expert(
                expert_telegram_id, 
                approved_news, 
                expert_name
            )
            
            if success:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if hasattr(self, 'interactive_moderation_service') and self.interactive_moderation_service:
                    self.interactive_moderation_service.cleanup_moderation_session(user_id)
                    logger.info(f"üßπ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                await query.edit_message_text(
                    text=f"‚úÖ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É!</b>\n\n"
                         f"üë®‚Äçüíª <b>–≠–∫—Å–ø–µ—Ä—Ç:</b> {expert.name}\n"
                         f"üì∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(approved_news)}\n"
                         f"üì§ <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–∫—É\n\n"
                         f"‚è∞ <b>–û–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞...</b>",
                    parse_mode="HTML"
                )
                
                await query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_comment_request(self, query, expert_id: int, news_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            instructions = await self.expert_interaction_service.handle_comment_request(expert_id, news_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
            await query.message.reply_text(
                text=instructions,
                parse_mode="HTML"
            )
            
            await query.answer("üí¨ –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not update.message:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        user = update.effective_user
        text = update.message.text
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: text={bool(text)}, photo={bool(update.message.photo)}, document={bool(update.message.document)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id in self.waiting_for_digest_edit:
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._handle_digest_edit_message(update, user.id, text)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ: user.id={user.id}, waiting_for_photo={list(self.waiting_for_photo.keys())}, has_photo={bool(update.message.photo)}")
        if user.id in self.waiting_for_photo and update.message.photo:
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._handle_photo_for_publication(update, user.id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        if hasattr(self, 'expert_interaction_service') and self.expert_interaction_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.id in self.expert_interaction_service.active_sessions:
                # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                await self._handle_expert_comment(update, user.id, text)
                return
    
    async def _handle_expert_comment(self, update: Update, expert_id: int, comment_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞
            session = self.expert_interaction_service.active_sessions.get(expert_id)
            if not session:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            # –ë–µ—Ä–µ–º –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —ç–∫—Å–ø–µ—Ä—Ç –≤—ã–±—Ä–∞–ª –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not hasattr(session, 'selected_news_id') or not session.selected_news_id:
                await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            news_id = session.selected_news_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
            if news_id in session.commented_news:
                await update.message.reply_text("‚úÖ –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            success = await self.expert_interaction_service.save_comment(expert_id, news_id, comment_text)
            
            if success:
                # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
                session.selected_news_id = None
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if len(session.commented_news) < len(session.news_ids):
                    await self._show_updated_expert_news_list(expert_id)
                else:
                    # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # –≠–∫—Å–ø–µ—Ä—Ç —É–∂–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ExpertInteractionService
                    pass
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    
    async def _show_updated_expert_news_list(self, expert_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                return
            
            session = self.expert_interaction_service.active_sessions.get(expert_id)
            if not session:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
            remaining_news_ids = session.news_ids - session.commented_news
            
            if not remaining_news_ids:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞
            remaining_news = []
            for news in session.news_items:
                if news['id'] in remaining_news_ids:
                    remaining_news.append(news)
            
            if not remaining_news:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏)
            news_parts = self.expert_interaction_service._split_news_list_for_expert(remaining_news)
            
            for i, part in enumerate(news_parts):
                keyboard = self.expert_interaction_service._create_comment_buttons_for_part(part['news_indices'], remaining_news)
                
                await self.expert_interaction_service.bot.send_message(
                    chat_id=expert_id,
                    text=part['text'],
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i < len(news_parts) - 1:
                    await asyncio.sleep(0.5)
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {len(remaining_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {e}")
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def _get_postgres_db(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PostgreSQL —Å–µ—Ä–≤–∏—Å."""
        try:
            from src.services.postgresql_database_service import PostgreSQLDatabaseService
            return PostgreSQLDatabaseService()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PostgreSQL —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return None
    
    def _get_notification_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            return self.notification_service
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NotificationService: {e}")
            return None
    
    def _get_curator_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤."""
        try:
            return self.curator_service
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CuratorService: {e}")
            return None
    
    def _get_scheduler_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if hasattr(self, 'scheduler_service') and self.scheduler_service:
                return self.scheduler_service
            else:
                logger.error("‚ùå SchedulerService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SchedulerService: {e}")
            return None
    
    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º."""
        user = update.effective_user
        
        logger.info(f"üìÖ –ö–æ–º–∞–Ω–¥–∞ /schedule –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_service = self._get_scheduler_service()
            if not scheduler_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await scheduler_service.start()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler_service.get_status()
            next_run = status.get('next_morning_digest')
            
            if next_run:
                next_run_str = next_run.strftime('%d.%m.%Y %H:%M')
            else:
                next_run_str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
            response = f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n"
            response += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {next_run_str}\n"
            response += f"üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 9:00 —É—Ç—Ä–∞\n"
            response += f"üí¨ –ß–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ID {scheduler_service.morning_digest_service.curators_chat_id}\n\n"
            response += f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            response += f"`schedule_status` - –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n"
            response += f"`morning_digest` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def schedule_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule_status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        user = update.effective_user
        
        logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /schedule_status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_service = self._get_scheduler_service()
            if not scheduler_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler_service.get_status()
            
            response = f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n\n"
            response += f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if status.get('is_running') else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            response += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {status.get('next_morning_digest', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            response += f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {status.get('jobs_count', 0)}\n"
            response += f"üí¨ –ß–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ID {scheduler_service.morning_digest_service.curators_chat_id}\n\n"
            response += f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            response += f"`schedule` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\n"
            response += f"`morning_digest` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_status_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _is_curator(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    async def proxy_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å ProxyAPI —á–µ—Ä–µ–∑ AIAnalysisService
            if hasattr(self, 'ai_analysis_service'):
                status = self.ai_analysis_service.get_proxy_status()
            else:
                status = {
                    "service": "AIAnalysisService",
                    "proxy_available": False,
                    "message": "–°–µ—Ä–≤–∏—Å AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_text = f"""
üîç <b>–°—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞</b>

üìä <b>–°–µ—Ä–≤–∏—Å:</b> {status.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üöÄ <b>ProxyAPI –¥–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_available') else '‚ùå –ù–µ—Ç'}

"""
            
            if status.get('proxy_available'):
                status_text += f"""
üîó <b>–ü—Ä–æ–∫—Å–∏ URL:</b> <code>{status.get('proxy_url', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>
üîë <b>ProxyAPI –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_api_key_set') else '‚ùå –ù–µ—Ç'}
ü§ñ <b>–ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:</b> {'‚úÖ –î–∞' if status.get('client_initialized') else '‚ùå –ù–µ—Ç'}

‚úÖ <b>ProxyAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞!</b>
"""
            else:
                status_text += f"""
‚ö†Ô∏è <b>ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

üìù <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ProxyAPI:</b>
1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ URL –æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:
   PROXY_API_URL=https://your-proxy-domain.com/v1
   PROXY_API_KEY=sk-your-proxy-key
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

‚ÑπÔ∏è <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> Fallback –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ AI)
"""
            
            await update.message.reply_text(status_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ proxy_status_command: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ ProxyAPI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
    
    # ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI News Assistant Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SchedulerService: {self.scheduler_service}")
            
            if self.scheduler_service:
                try:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
                    await self.scheduler_service.start()
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
                    logger.warning(f"‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    import traceback
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                    logger.info("‚ÑπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /schedule")
            else:
                logger.warning("‚ö†Ô∏è SchedulerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                logger.warning("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            import asyncio
            while True:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        try:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def _update_message_fallback(self, query, remaining_news: List[Dict]):
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
        
        Args:
            query: Callback query
            remaining_news: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            short_text = f"""
üåÖ <b>–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô</b>
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}

<b>üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:</b>
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            for i, news in enumerate(remaining_news[:3], 1):
                short_text += f"""
<b>{i}. {news['title'][:50]}...</b>
"""
            
            if len(remaining_news) > 3:
                short_text += f"\n... –∏ –µ—â–µ {len(remaining_news) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π"
            
            short_text += """
<b>üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –Ω–æ–≤–æ—Å—Ç–µ–π
            buttons = []
            for i, news in enumerate(remaining_news[:3]):
                button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}"
                callback_data = f"remove_news_{news['id']}"
                buttons.append([
                    InlineKeyboardButton(
                        button_text, 
                        callback_data=callback_data
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            approve_button = InlineKeyboardButton(
                "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
                callback_data="approve_remaining"
            )
            buttons.append([approve_button])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=short_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å fallback (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)")
            
        except Exception as fallback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _create_new_digest_after_removal(self, query, remaining_news: List[Dict]):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            query: CallbackQuery –æ—Ç Telegram
            remaining_news: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏, –æ—Å—Ç–∞–ª–æ—Å—å: {len(remaining_news)}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã DigestNews
            from src.services.morning_digest_service import MorningDigest, DigestNews
            from datetime import datetime
            
            digest_news = []
            for news in remaining_news:
                digest_item = DigestNews(
                    id=news['id'],
                    title=news['title'],
                    summary=news['summary'],
                    importance_score=news.get('importance_score', 5),
                    category=news.get('category', '–û–±—â–∏–µ'),
                    source_links=news['source_links'],
                    published_at=news.get('published_at', datetime.now()),
                    curator_id=news.get('curator_id')
                )
                digest_news.append(digest_item)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest = MorningDigest(
                date=datetime.now(),
                news_count=len(digest_news),
                news_items=digest_news,
                total_importance=5,
                categories=['–û–±—â–∏–µ']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = await self.morning_digest_service.send_digest_to_curators_chat(
                digest, 
                str(query.message.chat_id)
            )
            
            if success:
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    async def _force_delete_digest_messages(self, chat_id: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        try:
            logger.info(f"üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id}")
            
            if not hasattr(self, 'morning_digest_service') or not self.morning_digest_service:
                logger.warning("‚ö†Ô∏è MorningDigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—â–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = await self.application.bot.get_chat_history(chat_id=int(chat_id), limit=50)
                deleted_count = 0
                
                for msg in messages:
                    if msg.text and any(keyword in msg.text for keyword in ["–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢", "–ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"]):
                        try:
                            await self.application.bot.delete_message(
                                chat_id=int(chat_id), 
                                message_id=msg.message_id
                            )
                            deleted_count += 1
                            logger.info(f"üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {msg.message_id}")
                            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: {e}")
                            continue
                
                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def _handle_approve_remaining(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not hasattr(self, 'interactive_moderation_service') or not self.interactive_moderation_service:
                logger.error("‚ùå InteractiveModerationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –£–î–ê–õ–Ø–ï–ú –í–°–ï –ß–ê–°–¢–ò –î–ê–ô–î–ñ–ï–°–¢–ê –ü–ï–†–ï–î –û–î–û–ë–†–ï–ù–ò–ï–ú
            chat_id = str(query.message.chat_id)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º")
            
            if hasattr(self, 'morning_digest_service') and self.morning_digest_service:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
                cleanup_success = await self.morning_digest_service.delete_digest_messages(chat_id)
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                if not cleanup_success:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                    await self._force_delete_digest_messages(chat_id)
                
                logger.info(f"‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                
                # –¢–ï–ü–ï–†–¨ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                self.morning_digest_service.clear_digest_session(chat_id)
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            else:
                logger.warning("‚ö†Ô∏è MorningDigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            approved_news = self.interactive_moderation_service.complete_moderation(user_id)
            logger.info(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(approved_news) if approved_news else 0}")
            
            if approved_news:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞
                await self._show_expert_choice(query, approved_news)
            else:
                await query.answer("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_select_expert(self, query, user_id: int, expert_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not hasattr(self, 'expert_choice_service') or not self.expert_choice_service:
                logger.error("‚ùå ExpertChoiceService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            expert = self.expert_choice_service.get_expert_by_id(expert_id)
            logger.info(f"üë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç: {expert}")
            
            if not expert:
                logger.error("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await query.answer("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.info(f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {expert.name}, is_test: {expert.is_test}")
            
            if expert.is_test:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
                logger.info(f"üë®‚Äçüíº –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert.name} –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏")
                self.service.set_expert_of_week(expert.id)
                
                # –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ª–∏—á–∫—É
                logger.info(f"üë®‚Äçüíº –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
                await self._send_news_to_expert(query, expert, user_id)
            else:
                logger.info(f"‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä—Ç {expert.name} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _update_moderation_message(self, query, remaining_news: List[Dict]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
        try:
            logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length = 4000
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"""
üåÖ <b>–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô</b>
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}

<b>üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:</b>
"""
            
            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(remaining_news) <= 5:
                message_text = header
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
                for i, news in enumerate(remaining_news, 1):
                    message_text += f"""
<b>{i}. {news['title']}</b>
üìù {news['summary']}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source_links']}

"""
                
                message_text += """
<b>üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                buttons = []
                for i, news in enumerate(remaining_news):
                    button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}"
                    callback_data = f"remove_news_{news['id']}"
                    logger.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: {button_text} -> {callback_data}")
                    buttons.append([
                        InlineKeyboardButton(
                            button_text, 
                            callback_data=callback_data
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                approve_button = InlineKeyboardButton(
                    "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
                    callback_data="approve_remaining"
                )
                buttons.append([approve_button])
                
                reply_markup = InlineKeyboardMarkup(buttons)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                
            else:
                # –ù–æ–≤–æ—Å—Ç–µ–π –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
                await query.edit_message_text(
                    "üìù –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç...",
                    parse_mode="HTML"
                )
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                from src.services.morning_digest_service import MorningDigest, DigestNews
                from datetime import datetime
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã DigestNews
                digest_news = []
                for news in remaining_news:
                    digest_item = DigestNews(
                        id=news['id'],
                        title=news['title'],
                        summary=news['summary'],
                        importance_score=news.get('importance_score', 5),
                        category=news.get('category', '–û–±—â–∏–µ'),
                        source_links=news.get('source_links', ''),
                        published_at=news.get('published_at', datetime.now()),
                        curator_id=news.get('curator_id')
                    )
                    digest_news.append(digest_item)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
                digest = MorningDigest(
                    date=datetime.now(),
                    news_count=len(digest_news),
                    news_items=digest_news,
                    total_importance=5,
                    categories=['–û–±—â–∏–µ'],
                    curator_id=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                success = await self.morning_digest_service.send_digest_to_curators_chat(
                    digest, 
                    str(query.message.chat_id)
                )
                
                if success:
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")

            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def _show_expert_choice(self, query, approved_news: List[Dict]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üë®‚Äçüíº –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if not hasattr(self, 'expert_choice_service') or not self.expert_choice_service:
                logger.error("‚ùå ExpertChoiceService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            message_text = f"""
‚úÖ <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!</b>

üì∞ –û–¥–æ–±—Ä–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(approved_news)}
üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:

"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            buttons = self.expert_choice_service.create_expert_choice_buttons()
            logger.info(f"üîò –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞: {len(buttons)}")
            
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä–æ–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            await self.application.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞")
    
    async def _send_news_to_expert(self, query, expert, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É –≤ –ª–∏—á–∫—É."""
        try:
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name} (ID: {expert.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            if not hasattr(self, 'interactive_moderation_service') or not self.interactive_moderation_service:
                logger.error("‚ùå InteractiveModerationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                logger.error("‚ùå ExpertInteractionService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
            approved_news = self.interactive_moderation_service.get_remaining_news(user_id)
            logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω—ã –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(approved_news)} —à—Ç—É–∫")
            
            if not approved_news:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await query.answer("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if expert.is_test:
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ Telegram ID
                expert_telegram_id = int(expert.telegram_id)
                expert_name = expert.name
                logger.info(f"üë®‚Äçüíº –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç: {expert_name}, Telegram ID: {expert_telegram_id}")
            else:
                # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                logger.info(f"‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç {expert.name} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                await query.answer("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
            success = await self.expert_interaction_service.send_news_to_expert(
                expert_telegram_id, 
                approved_news, 
                expert_name
            )
            
            if success:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if hasattr(self, 'interactive_moderation_service') and self.interactive_moderation_service:
                    self.interactive_moderation_service.cleanup_moderation_session(user_id)
                    logger.info(f"üßπ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                await query.edit_message_text(
                    text=f"‚úÖ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É!</b>\n\n"
                         f"üë®‚Äçüíª <b>–≠–∫—Å–ø–µ—Ä—Ç:</b> {expert.name}\n"
                         f"üì∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(approved_news)}\n"
                         f"üì§ <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–∫—É\n\n"
                         f"‚è∞ <b>–û–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞...</b>",
                    parse_mode="HTML"
                )
                
                await query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_comment_request(self, query, expert_id: int, news_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            if not hasattr(self, 'expert_interaction_service') or not self.expert_interaction_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            instructions = await self.expert_interaction_service.handle_comment_request(expert_id, news_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
            await query.message.reply_text(
                text=instructions,
                parse_mode="HTML"
            )
            
            await query.answer("üí¨ –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
    
    
    async def schedule_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule_status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        user = update.effective_user
        
        logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /schedule_status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_service = self._get_scheduler_service()
            if not scheduler_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler_service.get_status()
            
            response = f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n\n"
            response += f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if status.get('is_running') else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            response += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {status.get('next_morning_digest', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            response += f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {status.get('jobs_count', 0)}\n"
            response += f"üí¨ –ß–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ID {scheduler_service.morning_digest_service.curators_chat_id}\n\n"
            response += f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            response += f"`schedule` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\n"
            response += f"`morning_digest` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_status_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _is_curator(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
 
    async def proxy_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å ProxyAPI —á–µ—Ä–µ–∑ AIAnalysisService
            if hasattr(self, 'ai_analysis_service'):
                status = self.ai_analysis_service.get_proxy_status()
            else:
                status = {
                    "service": "AIAnalysisService",
                    "proxy_available": False,
                    "message": "–°–µ—Ä–≤–∏—Å AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_text = f"""
üîç <b>–°—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞</b>

üìä <b>–°–µ—Ä–≤–∏—Å:</b> {status.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üöÄ <b>ProxyAPI –¥–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_available') else '‚ùå –ù–µ—Ç'}

"""
            
            if status.get('proxy_available'):
                status_text += f"""
üîó <b>–ü—Ä–æ–∫—Å–∏ URL:</b> <code>{status.get('proxy_url', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>
üîë <b>ProxyAPI –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_api_key_set') else '‚ùå –ù–µ—Ç'}
ü§ñ <b>–ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:</b> {'‚úÖ –î–∞' if status.get('client_initialized') else '‚ùå –ù–µ—Ç'}

‚úÖ <b>ProxyAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞!</b>
"""
            else:
                status_text += f"""
‚ö†Ô∏è <b>ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

üìù <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ProxyAPI:</b>
1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ URL –æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:
   PROXY_API_URL=https://your-proxy-domain.com/v1
   PROXY_API_KEY=sk-your-proxy-key
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

‚ÑπÔ∏è <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> Fallback –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ AI)
"""
            
            await update.message.reply_text(status_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ proxy_status_command: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ ProxyAPI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
    
    # ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI News Assistant Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SchedulerService: {self.scheduler_service}")
            
            if self.scheduler_service:
                try:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
                    await self.scheduler_service.start()
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
                    logger.warning(f"‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    import traceback
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                    logger.info("‚ÑπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /schedule")
            else:
                logger.warning("‚ö†Ô∏è SchedulerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                logger.warning("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            import asyncio
            while True:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        try:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def _update_message_fallback(self, query, remaining_news: List[Dict]):
        """
        Fallback –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
        
        Args:
            query: Callback query
            remaining_news: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            short_text = f"""
üåÖ <b>–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô</b>
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {len(remaining_news)}

<b>üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:</b>
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            for i, news in enumerate(remaining_news[:3], 1):
                short_text += f"""
<b>{i}. {news['title'][:50]}...</b>
"""
            
            if len(remaining_news) > 3:
                short_text += f"\n... –∏ –µ—â–µ {len(remaining_news) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π"
            
            short_text += """
<b>üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –Ω–æ–≤–æ—Å—Ç–µ–π
            buttons = []
            for i, news in enumerate(remaining_news[:3]):
                button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}"
                callback_data = f"remove_news_{news['id']}"
                buttons.append([
                    InlineKeyboardButton(
                        button_text, 
                        callback_data=callback_data
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            approve_button = InlineKeyboardButton(
                "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
                callback_data="approve_remaining"
            )
            buttons.append([approve_button])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=short_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å fallback (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)")
            
        except Exception as fallback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _create_new_digest_after_removal(self, query, remaining_news: List[Dict]):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            query: CallbackQuery –æ—Ç Telegram
            remaining_news: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏, –æ—Å—Ç–∞–ª–æ—Å—å: {len(remaining_news)}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã DigestNews
            from src.services.morning_digest_service import MorningDigest, DigestNews
            from datetime import datetime
            
            digest_news = []
            for news in remaining_news:
                digest_item = DigestNews(
                    id=news['id'],
                    title=news['title'],
                    summary=news['summary'],
                    importance_score=news.get('importance_score', 5),
                    category=news.get('category', '–û–±—â–∏–µ'),
                    source_links=news['source_links'],
                    published_at=news.get('published_at', datetime.now()),
                    curator_id=news.get('curator_id')
                )
                digest_news.append(digest_item)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest = MorningDigest(
                date=datetime.now(),
                news_count=len(digest_news),
                news_items=digest_news,
                total_importance=5,
                categories=['–û–±—â–∏–µ']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = await self.morning_digest_service.send_digest_to_curators_chat(
                digest, 
                str(query.message.chat_id)
            )
            
            if success:
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê ====================
    
    async def parse_now_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parse_now - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞."""
        user = update.effective_user
        
        logger.info(f"üì∞ –ö–æ–º–∞–Ω–¥–∞ /parse_now –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
            if not hasattr(self, 'parser_service') or not self.parser_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            stats = await self.parser_service.parse_all_sources()
            
            if stats:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                total_news = sum(stats.values())
                report = f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                report += f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n\n"
                report += f"üìà –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n"
                
                for source_name, count in stats.items():
                    report += f"‚Ä¢ {source_name}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                
                await update.message.reply_text(report)
            else:
                await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ parse_now_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê ====================
    
    async def create_final_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info("üé® –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            if not self.final_digest_formatter or not self.curator_approval_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            approved_news = self.service.get_approved_news_for_digest()
            if not approved_news:
                await update.message.reply_text("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                return
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            expert_of_week = self.service.get_expert_of_week()
            if not expert_of_week:
                await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —ç–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏")
                return
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
            expert_comments = self.service.get_expert_comments_for_news([news.id for news in approved_news])
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_sources = self.service.get_news_sources([news.id for news in approved_news])
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, —ç–∫—Å–ø–µ—Ä—Ç: {expert_of_week.name}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(expert_comments)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            formatted_digest = self.final_digest_formatter.create_final_digest(
                approved_news=approved_news,
                expert_comments=expert_comments,
                expert_of_week=expert_of_week,
                news_sources=news_sources
            )
            
            logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É
            result = await self.curator_approval_service.send_digest_for_approval(
                formatted_digest=formatted_digest,
                chat_id=str(self.curator_chat_id)
            )
            
            if result.get("success"):
                await update.message.reply_text("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É!")
                logger.info("üéØ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _handle_digest_approval(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.handle_approval("approve_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω! –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_digest_editing(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"‚úèÔ∏è –ö—É—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫
            self.waiting_for_digest_edit[user_id] = True
            logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.handle_approval("edit_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úèÔ∏è –û–∂–∏–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_digest_edit_message(self, update: Update, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not self.curator_approval_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.process_edited_digest(text, str(user_id))
            
            if result["success"]:
                # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫
                if user_id in self.waiting_for_digest_edit:
                    del self.waiting_for_digest_edit[user_id]
                    logger.info(f"üîÑ –°–Ω—è—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–æ–∫")
    
    async def _handle_photo_for_publication(self, update: Update, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º digest_text –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            digest_text = self.waiting_for_photo.get(user_id)
            if not digest_text:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            photo_file_id = photo.file_id
            
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id: {photo_file_id}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ PublicationService
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PublicationService: hasattr={hasattr(self, 'publication_service')}, service={self.publication_service}")
            if hasattr(self, 'publication_service') and self.publication_service:
                logger.info(f"üì§ –í—ã–∑—ã–≤–∞–µ–º publish_digest_with_photo —Å digest_text –¥–ª–∏–Ω–æ–π {len(digest_text)} –∏ photo_file_id {photo_file_id}")
                result = await self.publication_service.publish_digest_with_photo(digest_text, photo_file_id)
                logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result}")
                
                if result["success"]:
                    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
                    if user_id in self.waiting_for_photo:
                        del self.waiting_for_photo[user_id]
                        logger.info(f"üîÑ –°–Ω—è—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    await update.message.reply_text("üéâ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª —Å —Ñ–æ—Ç–æ!")
                    logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª —Å message_id: {result['message_id']}")
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result['error']}")
            else:
                logger.error("‚ùå PublicationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _handle_edited_digest_approval(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            result = await self.curator_approval_service.handle_approval("approve_edited_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω! –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ==================== –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ====================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
    if not token:
        token = "8195833718:AAGbqnbZz7NrbOWN5ic5k7oxGMUTntgHE6s"
        logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)")
    
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=your_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = AINewsBot(token)
    
    # –î–µ–ª–∞–µ–º –±–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    import sys
    current_module = sys.modules[__name__]
    current_module.bot_instance = bot
    logger.info("‚úÖ –ë–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ")
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 