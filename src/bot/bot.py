#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è AI News Assistant.
"""

import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from src.services.database_singleton import get_database_service
from src.services.news_parser_service import NewsParserService
from src.services.interactive_moderation_service import InteractiveModerationService
from src.services.expert_choice_service import ExpertChoiceService
from src.services.expert_interaction_service import ExpertInteractionService
from src.services.morning_digest_service import MorningDigestService
from src.services.final_digest_formatter_service import FinalDigestFormatterService
from src.services.curator_approval_service import CuratorApprovalService
from src.config import config
from src.services.bot_session_service import bot_session_service
from src.services.ai_analysis_service import AIAnalysisService
from src.services.scheduler_service import SchedulerService
from src.utils.bot_utils import BotUtils


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
logging.getLogger('sqlalchemy.pool').setLevel(logging.WARNING)
logging.getLogger('sqlalchemy.dialects').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram.ext').setLevel(logging.WARNING)
logging.getLogger('apscheduler').setLevel(logging.WARNING)
logging.getLogger('telethon').setLevel(logging.WARNING)
logging.getLogger('telethon.network').setLevel(logging.ERROR)
logging.getLogger('telethon.client').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# ==================== –ö–õ–ê–°–° –ë–û–¢–ê ====================

class AINewsBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI News Assistant.
    """
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.token = token
        self.application = Application.builder().token(token).build()
        self.service = get_database_service()
        
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º BotSessionService –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        self.session_service = bot_session_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
        self._init_services()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
    
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞."""
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
        self._init_ai_services()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self._init_core_services()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self._init_scheduler_services()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self._init_moderation_services()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _init_ai_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤."""
        try:
            self.ai_analysis_service = AIAnalysisService()
            logger.info("‚úÖ AIAnalysisService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AIAnalysisService: {e}")
            self.ai_analysis_service = None
    
    def _init_core_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        # NewsParserService
        self.parser_service = NewsParserService(
            database_service=self.service,
            ai_analysis_service=self.ai_analysis_service
        )
        logger.info("‚úÖ NewsParserService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å PostgreSQL")
        
        # MorningDigestService
        self.morning_digest_service = MorningDigestService(
            database_service=self.service,
            ai_analysis_service=self.ai_analysis_service,
            bot=self.application.bot
        )
        logger.info("‚úÖ MorningDigestService —Å–æ–∑–¥–∞–Ω")
    
    def _init_scheduler_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SchedulerService...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.ai_analysis_service:
                self.final_digest_formatter = FinalDigestFormatterService(self.ai_analysis_service)
                logger.info("‚úÖ FinalDigestFormatterService —Å–æ–∑–¥–∞–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞
                bot_token = config.telegram.bot_token
                curator_chat_id = config.telegram.curator_chat_id
                self.curator_chat_id = curator_chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
                
                self.curator_approval_service = CuratorApprovalService(
                    bot_token=bot_token,
                    curator_chat_id=curator_chat_id,
                    formatter_service=self.final_digest_formatter,
                    bot_instance=self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç
                )
                logger.info("‚úÖ CuratorApprovalService —Å–æ–∑–¥–∞–Ω")
                
                # –°–æ–∑–¥–∞–µ–º expert_interaction_service —Å curator_approval_service
                self.expert_interaction_service = ExpertInteractionService(
                    self.application.bot, 
                    self.curator_approval_service
                )
                logger.info("‚úÖ ExpertInteractionService —Å–æ–∑–¥–∞–Ω —Å CuratorApprovalService")
            else:
                logger.warning("‚ö†Ô∏è AIAnalysisService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                self.final_digest_formatter = None
                self.curator_approval_service = None
                self.expert_interaction_service = None
            
            # SchedulerService
            self.scheduler_service = SchedulerService(
                morning_digest_service=self.morning_digest_service,
                news_parser_service=self.parser_service
            )
            logger.info("‚úÖ SchedulerService –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
            logger.info("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–∫–ª—é—á–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SchedulerService: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            self.scheduler_service = None
    
    def _init_moderation_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
        try:
            self.interactive_moderation_service = InteractiveModerationService()
            self.expert_choice_service = ExpertChoiceService()
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            self.interactive_moderation_service = None
            self.expert_choice_service = None
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        self.application.add_handler(CommandHandler("morning_digest", self.morning_digest_command))
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.application.add_handler(CommandHandler("parse_now", self.parse_now_command))
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        self.application.add_handler(CommandHandler("create_final_digest", self.create_final_digest_command))
        
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.application.add_handler(CommandHandler("schedule", self.schedule_command))
        self.application.add_handler(CommandHandler("schedule_status", self.schedule_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ
        self.application.add_handler(MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, self.handle_message))
    
    # ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI News Assistant!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üì∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ò–ò –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é OpenAI
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/notification_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏!
        """
        
        await update.message.reply_text(welcome_text)
    
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
ü§ñ <b>AI News Assistant Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üåÖ –î–∞–π–¥–∂–µ—Å—Ç—ã:</b>
/morning_digest - –°–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
/create_final_digest - –°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç

<b>üìä –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>
/parse_now - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞

<b>‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:</b>
/schedule - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
/schedule_status - –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

<b>üîß –°–∏—Å—Ç–µ–º–∞:</b>
/proxy_status - –°—Ç–∞—Ç—É—Å ProxyAPI

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.</i>
        """
        
        await update.message.reply_text(help_text, parse_mode="HTML")
    
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê INLINE –ö–ù–û–ü–û–ö ====================
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await BotUtils.safe_answer_callback(query)
        
        data = query.data
        logger.info(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data}")
        
        if data.startswith("remove_news_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å ID: {data}")
            news_id = int(data.split("_")[2])
            await self._handle_remove_news(query, query.from_user.id, news_id)
        elif data == "approve_remaining":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏")
            await self._handle_approve_remaining(query, query.from_user.id)
        elif data == "approve_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            await self._handle_digest_approval(query, query.from_user.id)
        elif data == "show_full_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"üìñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            await self._handle_show_full_digest(query, query.from_user.id)
        elif data == "edit_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            await self._handle_digest_editing(query, query.from_user.id)
        elif data == "approve_edited_digest":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            await self._handle_edited_digest_approval(query, query.from_user.id)
        elif data == "edit_digest_again":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            await self._handle_digest_editing(query, query.from_user.id)
        elif data.startswith("select_expert_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            logger.info(f"üë®‚Äçüíº –í—ã–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞: {data}")
            expert_id = int(data.split("_")[2])
            await self._handle_select_expert(query, query.from_user.id, expert_id)
        elif data.startswith("comment_news_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            logger.info(f"üí¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {data}")
            news_id = int(data.split("_")[2])
            await self._handle_comment_request(query, query.from_user.id, news_id)
        else:
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    

    # ==================== –ö–û–ú–ê–ù–î–ê –£–¢–†–ï–ù–ù–ï–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê ====================
    
    async def morning_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /morning_digest - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            user = update.effective_user
            logger.info(f"üåÖ –ö–æ–º–∞–Ω–¥–∞ /morning_digest –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
            if not await self._is_curator(user.id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.\n"
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º."
                )
                return
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º MorningDigestService
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î —Å–µ—Ä–≤–∏—Å–∞
            digest_service = MorningDigestService(
                database_service=self.service,
                ai_analysis_service=self.ai_analysis_service,
                bot=self.application.bot
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest = await digest_service.create_morning_digest()
            
            if digest.news_count == 0:
                await update.message.reply_text(
                    "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse_all –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if hasattr(self, 'interactive_moderation_service') and self.interactive_moderation_service:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                news_items = [
                    {
                        'id': news.id,
                        'title': news.title,
                        'summary': news.summary,
                        'source_links': news.source_links
                    }
                    for news in digest.news_items
                ]
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                await self.interactive_moderation_service.create_moderation_session(
                    user_id=user.id,
                    chat_id=update.effective_chat.id,
                    message_id=update.message.message_id,
                    news_items=news_items
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¢–û–õ–¨–ö–û –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ –§–¢)
            curators_chat_id = config.telegram.curator_chat_id
            await digest_service.send_digest_to_curators_chat(digest, curators_chat_id)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–∞–π–¥–∂–µ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ morning_digest_command: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    
    async def _handle_remove_news(self, query, user_id: int, news_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å {news_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if not await BotUtils.check_service_availability_simple(
                self.interactive_moderation_service, 
                "InteractiveModerationService", 
                query
            ):
                return
            
            # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            success = await self.interactive_moderation_service.remove_news_from_session(user_id, news_id)
            if not success:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
            remaining_news = await self.interactive_moderation_service.get_remaining_news(user_id)
            logger.info(f"üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏: {len(remaining_news)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–ø–æ JSON-—Å–µ—Å—Å–∏–∏)
            if self.morning_digest_service:
                chat_id_str = str(query.message.chat_id)
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id_str} (—Ç–∏–ø: {type(chat_id_str)})")
                
                cleanup_success = await self.morning_digest_service.delete_digest_messages(chat_id_str)
                if cleanup_success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id_str}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id_str}")
            
            logger.info(f"üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: –ø–æ–ª—É—á–µ–Ω–æ {len(remaining_news)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if remaining_news is not None:
                if remaining_news:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏
                    await self._create_new_digest_after_removal(query, remaining_news)
                else:
                    # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
                    await query.edit_message_text(
                        "üì≠ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /morning_digest –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."
                    )
                
                await query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É–¥–∞–ª–µ–Ω–∞, –¥–∞–π–¥–∂–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _create_new_digest_after_removal(self, query, remaining_news):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è."""
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å {len(remaining_news)} –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã DigestNews –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
            digest_news = []
            for i, news in enumerate(remaining_news, 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                from src.services.morning_digest_service import DigestNews
                digest_item = DigestNews(
                    id=news.get('id', 0),
                    title=news.get('title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'),
                    summary=news.get('summary', '–°–∞–º–º–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
                    source_links=news.get('source_links', ''),
                    published_at=datetime.now(),
                    curator_id=None
                )
                digest_news.append(digest_item)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            from src.services.morning_digest_service import MorningDigest
            new_digest = MorningDigest(
                date=datetime.now(),
                news_count=len(digest_news),
                news_items=digest_news,
                curator_id=None
            )
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            try:
                chat_id_str = str(query.message.chat_id)
                cleanup_success = await self.morning_digest_service.delete_digest_messages(chat_id_str)
                if cleanup_success:
                    logger.info("üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ")
                    await query.message.delete()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
                try:
                    await query.message.delete()
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º
            message_text, buttons = self.morning_digest_service.create_interactive_digest_message(new_digest)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
            cleaned_text = self.morning_digest_service._clean_html_text(message_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            max_length = config.telegram.max_message_length
            
            if len(cleaned_text) <= max_length:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –ø–æ—Å—Ç
                from telegram import InlineKeyboardMarkup
                reply_markup = InlineKeyboardMarkup(buttons)
                
                message = await query.message.chat.send_message(
                    text=cleaned_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                
                # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
                self.morning_digest_service._save_digest_session(
                    str(query.message.chat.id), 
                    [message.message_id], 
                    new_digest.news_count
                )
                logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                logger.info(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
                parts = self.morning_digest_service._split_message_by_news(new_digest, max_length)
                
                # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞
                new_message_ids = []
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                for i, part in enumerate(parts):
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —ç—Ç–æ–π —á–∞—Å—Ç–∏
                    part_news_items = [new_digest.news_items[idx] for idx in part['news_indices']]
                    from src.services.morning_digest_service import MorningDigest
                    part_temp_digest = MorningDigest(
                        date=new_digest.date,
                        news_count=len(part_news_items), 
                        news_items=part_news_items,
                        curator_id=None
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫:
                    _, part_buttons = self.morning_digest_service.create_interactive_digest_message(part_temp_digest)
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –Ω–µ-–ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–µ–π
                    if i != len(parts) - 1:
                        part_buttons.pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É "–û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —á–∞—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    part_text = part['text']
                    if len(part_text) > config.telegram.max_message_length:
                        logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç—å –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—Ä–µ–∑–∞–µ–º")
                        part_text = part_text[:config.telegram.max_message_length - 6] + "\n..."
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    if part_buttons:
                        from telegram import InlineKeyboardMarkup
                        reply_markup = InlineKeyboardMarkup(part_buttons)
                        message = await query.message.chat.send_message(
                            text=part_text,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                        new_message_ids.append(message.message_id)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                        message = await query.message.chat.send_message(text=part_text, parse_mode="HTML")
                        new_message_ids.append(message.message_id)
                
                # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏—é
                if new_message_ids:
                    self.morning_digest_service._save_digest_session(
                        str(query.message.chat.id), 
                        new_message_ids, 
                        new_digest.news_count
                    )
                    logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å –Ω–æ–≤—ã–º–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π: {new_message_ids}")
            
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å {len(digest_news)} –Ω–æ–≤–æ—Å—Ç—è–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _handle_select_expert(self, query, user_id: int, expert_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not await BotUtils.check_service_availability_simple(
                self.expert_choice_service, 
                "ExpertChoiceService", 
                query
            ):
                return
            
            expert = self.expert_choice_service.get_expert_by_id(expert_id)
            logger.info(f"üë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç: {expert}")
            
            if not expert:
                logger.error("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await query.answer("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.info(f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {expert.name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            logger.info(f"üë®‚Äçüíº –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert.name} –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏")
            self.service.set_expert_of_week(expert.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
            logger.info(f"üë®‚Äçüíº –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
            await self._send_news_to_expert(query, expert, user_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _send_news_to_expert(self, query, expert, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É –≤ –ª–∏—á–∫—É."""
        try:
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name} (ID: {expert.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            if not await BotUtils.check_service_availability_simple(
                self.interactive_moderation_service, 
                "InteractiveModerationService", 
                query
            ):
                return
            
            if not await BotUtils.check_service_availability_simple(
                self.expert_interaction_service, 
                "ExpertInteractionService", 
                query
            ):
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
            approved_news = await self.interactive_moderation_service.get_remaining_news(user_id)
            logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω—ã –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(approved_news)} —à—Ç—É–∫")
            
            if not approved_news:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await query.answer("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å telegram_id –≤ —á–∏—Å–ª–æ
                expert_telegram_id = int(expert.telegram_id)
                expert_name = expert.name
                logger.info(f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç: {expert_name}, Telegram ID: {expert_telegram_id}")
            except ValueError:
                # –ï—Å–ª–∏ telegram_id –Ω–µ —á–∏—Å–ª–æ–≤–æ–π, —ç—Ç–æ username - –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                logger.info(f"‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä—Ç {expert.name} –∏–º–µ–µ—Ç username ({expert.telegram_id}) –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ ID")
                await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π Telegram ID)")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
            success = await self.expert_interaction_service.send_news_to_expert(
                expert_telegram_id, 
                approved_news, 
                expert_name
            )
            
            if success:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if hasattr(self, 'interactive_moderation_service') and self.interactive_moderation_service:
                    await self.interactive_moderation_service.cleanup_moderation_session(user_id)
                    logger.info(f"üßπ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                await query.edit_message_text(
                    text=f"‚úÖ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É!</b>\n\n"
                         f"üë®‚Äçüíª <b>–≠–∫—Å–ø–µ—Ä—Ç:</b> {expert.name}\n"
                         f"üì∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(approved_news)}\n"
                         f"üì§ <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–∫—É\n\n"
                         f"‚è∞ <b>–û–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞...</b>",
                    parse_mode="HTML"
                )
                
                await query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_comment_request(self, query, expert_id: int, news_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            if not await BotUtils.check_service_availability_simple(
                self.expert_interaction_service, 
                "ExpertInteractionService", 
                query
            ):
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            instructions = await self.expert_interaction_service.handle_comment_request(expert_id, news_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
            await query.message.reply_text(
                text=instructions,
                parse_mode="HTML"
            )
            
            await query.answer("üí¨ –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_show_full_digest(self, query, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        try:
            chat_id = str(query.message.chat.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ —Å–µ—Å—Å–∏–∏
            session = self.morning_digest_service.get_digest_session(chat_id)
            if not session or 'digest_data' not in session:
                await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            digest = session['digest_data']
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç—è—Ö
            parts = self.morning_digest_service._create_balanced_parts(digest, max_parts=config.message.max_digest_parts)
            
            for i, part in enumerate(parts, 1):
                await query.message.reply_text(
                    f"üìÑ <b>–ß–∞—Å—Ç—å {i}/{len(parts)}</b>\n\n{part['text']}",
                    reply_markup=InlineKeyboardMarkup(part.get('buttons', [])),
                    parse_mode="HTML"
                )
            
            await query.answer("üìñ –ü–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not update.message:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        user = update.effective_user
        text = update.message.text
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: text={bool(text)}, photo={bool(update.message.photo)}, document={bool(update.message.document)}")
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –≤ –ë–î
        digest_edit_session = await self.session_service.get_session_data(
            session_type='digest_edit',
            user_id=str(user.id)
        )
        if digest_edit_session and digest_edit_session.get('waiting'):
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._handle_digest_edit_message(update, user.id, text)
            return
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –≤ –ë–î (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        photo_waiting_session = await self.session_service.get_session_data(
            session_type='photo_waiting',
            user_id=str(user.id)
        )
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ: user.id={user.id}, photo_waiting={photo_waiting_session is not None}, has_photo={bool(update.message.photo)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if photo_waiting_session and update.message.photo:
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._handle_photo_for_publication(update, user.id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        if hasattr(self, 'expert_interaction_service') and self.expert_interaction_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –ë–î
            expert_session = await self.session_service.get_session_data(
                session_type='expert_session',
                user_id=str(user.id)
            )
            if expert_session:
                # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                await self._handle_expert_comment(update, user.id, text)
                return
    
    async def _handle_expert_comment(self, update: Update, expert_id: int, comment_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            if not self.expert_interaction_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–∑ –ë–î
            session_data = await self.session_service.get_session_data(
                session_type='expert_session',
                user_id=str(expert_id)
            )
            if not session_data:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            # –ë–µ—Ä–µ–º –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —ç–∫—Å–ø–µ—Ä—Ç –≤—ã–±—Ä–∞–ª –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not session_data.get('selected_news_id'):
                await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            news_id = session_data['selected_news_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
            commented_news = session_data.get('commented_news', [])
            if news_id in commented_news:
                await update.message.reply_text("‚úÖ –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            success = await self.expert_interaction_service.save_comment(expert_id, news_id, comment_text)
            
            if success:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                commented_news = set(session_data.get('commented_news', []))
                news_ids = set(session_data.get('news_ids', []))
                if len(commented_news) < len(news_ids):
                    await self._show_updated_expert_news_list(expert_id)
                else:
                    # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # –≠–∫—Å–ø–µ—Ä—Ç —É–∂–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ExpertInteractionService
                    pass
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    
    async def _show_updated_expert_news_list(self, expert_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            if not self.expert_interaction_service:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–∑ –ë–î
            session_data = await self.session_service.get_session_data(
                session_type='expert_session',
                user_id=str(expert_id)
            )
            if not session_data:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
            news_ids = set(session_data.get('news_ids', []))
            commented_news = set(session_data.get('commented_news', []))
            remaining_news_ids = news_ids - commented_news
            
            if not remaining_news_ids:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞
            remaining_news = []
            news_items = session_data.get('news_items', [])
            for news in news_items:
                if news['id'] in remaining_news_ids:
                    remaining_news.append(news)
            
            if not remaining_news:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏)
            news_parts = self.expert_interaction_service._split_news_list_for_expert(remaining_news)
            
            for i, part in enumerate(news_parts):
                keyboard = self.expert_interaction_service._create_comment_buttons_for_part(part['news_indices'], remaining_news)
                
                await self.application.bot.send_message(
                    chat_id=expert_id,
                    text=part['text'],
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i < len(news_parts) - 1:
                    await asyncio.sleep(config.timeout.message_delay_seconds)
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {len(remaining_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {e}")
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    
    
    
    def _get_scheduler_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if hasattr(self, 'scheduler_service') and self.scheduler_service:
                return self.scheduler_service
            else:
                logger.error("‚ùå SchedulerService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SchedulerService: {e}")
            return None
    
    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º."""
        user = update.effective_user
        
        logger.info(f"üìÖ –ö–æ–º–∞–Ω–¥–∞ /schedule –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_service = self._get_scheduler_service()
            if not scheduler_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await scheduler_service.start()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler_service.get_status()
            next_run = status.get('next_morning_digest')
            
            if next_run:
                next_run_str = next_run.strftime('%d.%m.%Y %H:%M')
            else:
                next_run_str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
            response = f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n"
            response += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {next_run_str}\n"
            response += f"üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config.scheduler.morning_digest_hour}:00 —É—Ç—Ä–∞\n"
            response += f"üí¨ –ß–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ID {scheduler_service.morning_digest_service.curators_chat_id}\n\n"
            response += f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            response += f"`schedule_status` - –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n"
            response += f"`morning_digest` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def schedule_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule_status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        user = update.effective_user
        
        logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /schedule_status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_service = self._get_scheduler_service()
            if not scheduler_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler_service.get_status()
            
            response = f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n\n"
            response += f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if status.get('is_running') else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            response += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {status.get('next_morning_digest', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            response += f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {status.get('jobs_count', 0)}\n"
            response += f"üí¨ –ß–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: ID {scheduler_service.morning_digest_service.curators_chat_id}\n\n"
            response += f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            response += f"`schedule` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\n"
            response += f"`morning_digest` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_status_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _is_curator(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    async def proxy_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å ProxyAPI —á–µ—Ä–µ–∑ AIAnalysisService
            if hasattr(self, 'ai_analysis_service'):
                status = self.ai_analysis_service.get_proxy_status()
            else:
                status = {
                    "service": "AIAnalysisService",
                    "proxy_available": False,
                    "message": "–°–µ—Ä–≤–∏—Å AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_text = f"""
üîç <b>–°—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞</b>

üìä <b>–°–µ—Ä–≤–∏—Å:</b> {status.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üöÄ <b>ProxyAPI –¥–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_available') else '‚ùå –ù–µ—Ç'}

"""
            
            if status.get('proxy_available'):
                status_text += f"""
üîó <b>–ü—Ä–æ–∫—Å–∏ URL:</b> <code>{status.get('proxy_url', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>
üîë <b>ProxyAPI –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {'‚úÖ –î–∞' if status.get('proxy_api_key_set') else '‚ùå –ù–µ—Ç'}
ü§ñ <b>–ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:</b> {'‚úÖ –î–∞' if status.get('client_initialized') else '‚ùå –ù–µ—Ç'}

‚úÖ <b>ProxyAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞!</b>
"""
            else:
                status_text += f"""
‚ö†Ô∏è <b>ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

üìù <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ProxyAPI:</b>
1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ URL –æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:
   PROXY_API_URL=https://your-proxy-domain.com/v1
   PROXY_API_KEY=sk-your-proxy-key
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

‚ÑπÔ∏è <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> Fallback –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ AI)
"""
            
            await update.message.reply_text(status_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ proxy_status_command: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ ProxyAPI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
    
    # ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI News Assistant Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            await self.restore_sessions_on_startup()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SchedulerService: {self.scheduler_service}")
            
            if self.scheduler_service:
                try:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
                    await self.scheduler_service.start()
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
                    logger.warning(f"‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    import traceback
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                    logger.info("‚ÑπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /schedule")
            else:
                logger.warning("‚ö†Ô∏è SchedulerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                logger.warning("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(config.timeout.bot_loop_sleep_seconds)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        try:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def _handle_approve_remaining(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            logger.info(f"‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not await BotUtils.check_service_availability_simple(
                self.interactive_moderation_service, 
                "InteractiveModerationService", 
                query
            ):
                return
            
            # –£–î–ê–õ–Ø–ï–ú –í–°–ï –ß–ê–°–¢–ò –î–ê–ô–î–ñ–ï–°–¢–ê –ü–ï–†–ï–î –û–î–û–ë–†–ï–ù–ò–ï–ú
            chat_id = str(query.message.chat_id)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º")
            
            if hasattr(self, 'morning_digest_service') and self.morning_digest_service:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
                cleanup_success = await self.morning_digest_service.delete_digest_messages(chat_id)
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                if not cleanup_success:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                    try:
                        logger.info(f"üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id}")
                        
                        if not hasattr(self, 'morning_digest_service') or not self.morning_digest_service:
                            logger.warning("‚ö†Ô∏è MorningDigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            return
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–º–µ—Ç–æ–¥ get_chat_history –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
                        logger.info("‚ÑπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                
                logger.info(f"‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                
                # –¢–ï–ü–ï–†–¨ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                self.morning_digest_service.clear_digest_session(chat_id)
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            else:
                logger.warning("‚ö†Ô∏è MorningDigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            approved_news = await self.interactive_moderation_service.complete_moderation(user_id)
            logger.info(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(approved_news) if approved_news else 0}")
            
            if approved_news:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞
                await self._show_expert_choice(query, user_id, approved_news)
            else:
                await query.answer("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê ====================
    
    async def parse_now_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parse_now - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞."""
        user = update.effective_user
        
        logger.info(f"üì∞ –ö–æ–º–∞–Ω–¥–∞ /parse_now –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
            if not await self._is_curator(user.id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
            if not hasattr(self, 'parser_service') or not self.parser_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            stats = await self.parser_service.parse_all_sources()
            
            if stats:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                total_news = sum(stats.values())
                report = f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                report += f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n\n"
                report += f"üìà –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n"
                
                for source_name, count in stats.items():
                    report += f"‚Ä¢ {source_name}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                
                await update.message.reply_text(report)
            else:
                await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ parse_now_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê ====================
    
    async def create_final_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info("üé® –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            if not self.final_digest_formatter or not self.curator_approval_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            approved_news = self.service.get_approved_news_for_digest()
            if not approved_news:
                await update.message.reply_text("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                return
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            expert_of_week = self.service.get_expert_of_week()
            if not expert_of_week:
                await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —ç–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏")
                return
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
            expert_comments = await self.service.get_expert_comments_for_news([news.id for news in approved_news])
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_sources = self.service.get_news_sources([news.id for news in approved_news])
            
            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {news_sources}")
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, —ç–∫—Å–ø–µ—Ä—Ç: {expert_of_week.name}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(expert_comments)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            formatted_digest = await self.final_digest_formatter.create_final_digest(
                approved_news=approved_news,
                expert_comments=expert_comments,
                expert_of_week=expert_of_week,
                news_sources=news_sources
            )
            
            logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É
            result = await self.curator_approval_service.send_digest_for_approval(
                formatted_digest=formatted_digest,
                chat_id=str(self.curator_chat_id)
            )
            
            if result.get("success"):
                await update.message.reply_text("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É!")
                logger.info("üéØ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _handle_digest_approval(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.handle_approval("approve_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω! –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_digest_editing(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"‚úèÔ∏è –ö—É—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –≤ –ë–î
            await self.session_service.save_session(
                session_type='digest_edit',
                user_id=str(user_id),
                data={'waiting': True, 'user_id': user_id},
                expires_at=datetime.now() + timedelta(seconds=config.timeout.approval_timeout)
            )
            logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.handle_approval("edit_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úèÔ∏è –û–∂–∏–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _handle_digest_edit_message(self, update: Update, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not self.curator_approval_service:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await self.curator_approval_service.process_edited_digest(text, str(user_id))
            
            if result["success"]:
                # ‚úÖ –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –∏–∑ –ë–î
                await self.session_service.delete_session(
                    session_type='digest_edit',
                    user_id=str(user_id)
                )
                logger.info(f"üîÑ –°–Ω—è—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–æ–∫")
    
    async def _handle_photo_for_publication(self, update: Update, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ User API."""
        try:
            logger.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º digest_text –∏–∑ –ë–î
            photo_session = await self.session_service.get_session_data(
                session_type='photo_waiting',
                user_id=str(user_id)
            )
            if not photo_session:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            digest_text = photo_session.get('digest_text')
            if not digest_text:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            photo_file_id = photo.file_id
            
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id: {photo_file_id}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è User API
            photo_path = f"temp_photo_{user_id}.jpg"
            try:
                photo_file = await self.application.bot.get_file(photo_file_id)
                await photo_file.download_to_drive(photo_path)
                logger.info(f"üì• –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {photo_path}")
                
                # üöÄ –ù–û–í–û–ï: –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ User API –≤–º–µ—Å—Ç–æ Bot API
                from src.services.telegram_user_publisher import TelegramUserPublisher
                
                user_publisher = TelegramUserPublisher()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç session_name –∏–∑ config (—Ç–µ–ø–µ—Ä—å "2")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å —Ñ–æ—Ç–æ –∏ –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏ (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤!)
                channel_id = config.telegram.channel_id
                message_url = await user_publisher.publish_digest(
                    channel_id=channel_id,
                    content=digest_text,  # –ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô!
                    photo_path=photo_path
                )
                
                # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç User API
                await user_publisher.disconnect()
                
                if message_url:
                    # ‚úÖ –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –ë–î
                    await self.session_service.delete_session(
                        session_type='photo_waiting',
                        user_id=str(user_id)
                    )
                    logger.info(f"üîÑ –°–Ω—è—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    await update.message.reply_text(
                        f"üéâ <b>–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ User API!</b>\n\n"
                        f"üì∏ –§–æ—Ç–æ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏ ({len(digest_text)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {message_url}",
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ User API: {message_url}")
                    
                else:
                    # Fallback –Ω–∞ Bot API –ø—Ä–∏ –æ—à–∏–±–∫–µ User API
                    logger.warning("‚ö†Ô∏è User API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ Bot API")
                    await self._fallback_bot_publication(digest_text, photo_file_id, channel_id, user_id, update)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ User API: {e}")
                # Fallback –Ω–∞ Bot API –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await self._fallback_bot_publication(digest_text, photo_file_id, config.telegram.channel_id, user_id, update)
                
            finally:
                # –í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    import os
                    if os.path.exists(photo_path):
                        os.remove(photo_path)
                        logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
                except Exception as cleanup_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _fallback_bot_publication(self, digest_text: str, photo_file_id: str, channel_id: str, user_id: int, update: Update):
        """Fallback –ø—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bot API –ø—Ä–∏ –æ—à–∏–±–∫–µ User API"""
        try:
            logger.info("üîÑ Fallback: –ø—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bot API")
            
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            await self.application.bot.send_photo(
                chat_id=channel_id,
                photo=photo_file_id
            )
            logger.info(f"üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (Bot API)")
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            clean_text = self._remove_title_from_digest(digest_text)
            await self.application.bot.send_message(
                chat_id=channel_id,
                text=clean_text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤ (Bot API)")
            
            # ‚úÖ –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –ë–î
            await self.session_service.delete_session(
                session_type='photo_waiting',
                user_id=str(user_id)
            )
            logger.info(f"üîÑ –°–Ω—è—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            await update.message.reply_text(
                "üéâ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Bot API!\n"
                "‚ö†Ô∏è User API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥"
            )
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Bot API (fallback)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Bot API): {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def _remove_title_from_digest(self, digest_text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            lines = digest_text.split('\n')
            cleaned_lines = []
            
            for line in lines:
                line_stripped = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (—Å–æ–¥–µ—Ä–∂–∞—Ç ü§ñ –∏ "–ò–ò –º–µ–Ω—è–µ—Ç –º–∏—Ä")
                if ('ü§ñ' in line_stripped and '–ò–ò –º–µ–Ω—è–µ—Ç –º–∏—Ä' in line_stripped):
                    continue
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                if not line_stripped and not cleaned_lines:
                    continue
                cleaned_lines.append(line)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
            while cleaned_lines and not cleaned_lines[0].strip():
                cleaned_lines.pop(0)
            
            return '\n'.join(cleaned_lines)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return digest_text
    
    
    async def _handle_edited_digest_approval(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
            if not self.curator_approval_service:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            result = await self.curator_approval_service.handle_approval("approve_edited_digest", str(user_id))
            
            if result["success"]:
                await query.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω! –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            else:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _show_expert_choice(self, query, user_id: int, approved_news: list):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            query: Callback query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            approved_news: –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            logger.info(f"üë®‚Äçüíª –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            buttons = self.expert_choice_service.create_expert_choice_buttons()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"""
‚úÖ –ù–û–í–û–°–¢–ò –û–î–û–ë–†–ï–ù–´!

üì∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(approved_news)}

üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            from telegram import InlineKeyboardMarkup
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await self.application.bot.send_message(
                chat_id=config.telegram.curator_chat_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –í—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–ø–µ—Ä—Ç–∞")
    
    async def restore_sessions_on_startup(self):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
        –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º!
        """
        try:
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
            active_sessions = await self.session_service.get_active_sessions()
            
            if not active_sessions:
                logger.info("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            restored_count = 0
            tasks = []
            
            for session in active_sessions:
                session_type = session['session_type']
                user_id = session['user_id']
                chat_id = session['chat_id']
                data = session['data']
                
                logger.debug(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é: {session_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
                task = self._restore_single_session(session)
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if tasks:
                try:
                    from src.utils.timeout_utils import with_timeout
                    results = await with_timeout(
                        asyncio.gather(*tasks, return_exceptions=True),
                        timeout_seconds=config.timeout.session_restore_timeout,  # –¢–∞–π–º–∞—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
                        operation_name="–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π",
                        fallback_value=[]
                    )
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    for result in results:
                        if isinstance(result, Exception):
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {result}")
                        else:
                            restored_count += 1
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
                    # Fallback: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π
                    for session in active_sessions:
                        try:
                            await self._restore_single_session(session)
                            restored_count += 1
                        except Exception as session_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session['session_type']}: {session_error}")

            if restored_count > 0:
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            else:
                logger.debug("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    
    async def _restore_single_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–Ω—É —Å–µ—Å—Å–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            session_type = session['session_type']
            
            if session_type == 'expert_session':
                await self._restore_expert_session(session)
            elif session_type == 'photo_waiting':
                await self._restore_photo_waiting_session(session)
            elif session_type == 'digest_edit':
                await self._restore_digest_edit_session(session)
            elif session_type == 'current_digest':
                await self._restore_current_digest_session(session)
            elif session_type == 'moderation_session':
                await self._restore_moderation_session(session)
            elif session_type == 'expert_comment':
                await self._restore_expert_comment_session(session)
            elif session_type == 'telegram_user_session':
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏ Telegram User API (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
                logger.debug(f"üìù –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é Telegram User API")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏: {session_type}")
    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session.get('session_type', 'unknown')}: {e}")
            raise
    
    async def _restore_expert_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            expert_id = int(session['user_id'])
            data = session['data']
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
            await self.application.bot.send_message(
                chat_id=expert_id,
                text=f"""
üîÑ **–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞**

üë®‚Äçüíª –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞.
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å: {len(data['news_ids']) - len(data['commented_news'])} –Ω–æ–≤–æ—Å—Ç–µ–π

üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.
                """,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
    
    async def _restore_photo_waiting_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
        try:
            user_id = int(session['user_id'])
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            await self.application.bot.send_message(
                chat_id=user_id,
                text="""
üì∏ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**

üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–∞—à –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.
üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.
                """,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
    
    async def _restore_digest_edit_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫."""
        try:
            user_id = int(session['user_id'])
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏
            await self.application.bot.send_message(
                chat_id=user_id,
                text="""
üìù **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ–∂–∏–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞**

üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.
‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞.
                """,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫: {e}")
    
    async def _restore_current_digest_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç."""
        try:
            chat_id = session['chat_id']
            data = session['data']
            digest_length = len(data.get('digest_text', ''))
            
            logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({digest_length} —Å–∏–º–≤–æ–ª–æ–≤)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    async def _restore_moderation_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
        try:
            user_id = int(session['user_id'])
            data = session['data']
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            remaining_count = len(data['news_items']) - len(data['removed_news'])
            
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"""
üîÑ **–°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

üìù –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–∞—à–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.
üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {remaining_count}

üóëÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
‚úÖ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è".
                """,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
    
    async def _restore_expert_comment_session(self, session: dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            expert_id = int(session['user_id'])
            data = session['data']
            
            # –ü—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            try:
                await self.application.bot.send_message(
                    chat_id=expert_id,
                    text=f"""
üîÑ **–°–µ—Å—Å–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω.
üì∞ –ù–æ–≤–æ—Å—Ç—å: {data.get('news_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å')}

‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–∞–π–¥–∂–µ—Å—Ç.
                    """,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as send_error:
                # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π)
                logger.debug(f"üìù –°–µ—Å—Å–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")


# ==================== –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ====================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=your_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = AINewsBot(token)
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main()) 