#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram User API (Telethon)
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bot API –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ User API –Ω–∞–¥ Bot API:
- –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (Premium) –≤–º–µ—Å—Ç–æ 1024


"""

import asyncio
import logging
from typing import Optional, Union, List, Dict, Any
from pathlib import Path

# Telethon –¥–ª—è User API
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    SessionPasswordNeededError, 
    PhoneCodeInvalidError,
    PhoneNumberInvalidError,
    FloodWaitError,
    ChatWriteForbiddenError
)
from telethon.tl.types import InputPeerChannel, InputPeerChat

from src.services.telegram_session_db_service import TelegramSessionDBService
from src.config.settings import config

logger = logging.getLogger(__name__)

class TelegramUserPublisher:
    """
    –°–µ—Ä–≤–∏—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram User API
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - Telethon –¥–ª—è User API (–≤–º–µ—Å—Ç–æ python-telegram-bot)
    - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î (–≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤)
    - Premium –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    
    def __init__(self, session_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–¥–∞—Ç–µ–ª—è
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_name –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.session_name = session_name or config.telegram.user_session_name
        self.session_db = TelegramSessionDBService()
        self.client: Optional[TelegramClient] = None
        self.is_connected = False
        
        # API credentials –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.api_id = config.telegram.api_id if hasattr(config.telegram, 'api_id') else None
        self.api_hash = config.telegram.api_hash if hasattr(config.telegram, 'api_hash') else None
        
        if not self.api_id or not self.api_hash:
            logger.error("‚ùå TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            logger.error("üìã –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org/apps")
            raise ValueError("User API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω TelegramUserPublisher: {session_name}")
    
    async def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram User API –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if self.is_connected:
                logger.info("‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ User API")
                return True
            
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram User API: {self.session_name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
            session_data = await self.session_db.load_session_by_name(self.session_name)
            
            if not session_data:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.session_name}")
                logger.error("üìã –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ setup_user_session.py")
                return False
            
            # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Telethon
            session_string = session_data.decode('utf-8')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            string_session = StringSession(session_string)
            
            self.client = TelegramClient(
                session=string_session,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession –æ–±—ä–µ–∫—Ç
                api_id=self.api_id,
                api_hash=self.api_hash
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.client.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑_username'})")
            
            self.is_connected = True
            return True
            
        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            logger.error("üìã –ù–∞—Å—Ç—Ä–æ–π—Ç–µ 2FA –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ User API: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Telegram User API"""
        try:
            if self.client and self.is_connected:
                await self.client.disconnect()
                logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç User API")
            
            self.is_connected = False
            self.client = None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def publish_digest(
        self, 
        channel_id: str, 
        content: str, 
        photo_path: Optional[str] = None,
        silent: bool = False
    ) -> Optional[str]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ User API
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (@channel –∏–ª–∏ -100123456789)
            content: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Premium)
            photo_path: –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            silent: –¢–∏—Ö–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            
        Returns:
            str: URL –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return None
            
            logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ {channel_id}")
            logger.info(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                channel_entity = await self.client.get_entity(channel_id)
                logger.info(f"üì¢ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_entity.title}")
            except Exception as e:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {channel_id} - {e}")
                return None
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if photo_path and Path(photo_path).exists():
                # –° —Ñ–æ—Ç–æ –∏ –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏ (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤!)
                logger.info(f"üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ: {photo_path}")
                
                message = await self.client.send_file(
                    entity=channel_entity,
                    file=photo_path,
                    caption=content,
                    parse_mode='html',
                    silent=silent
                )
                
                logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: —Ñ–æ—Ç–æ + –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å–∏")
                
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
                logger.info("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞")
                
                message = await self.client.send_message(
                    entity=channel_entity,
                    message=content,
                    parse_mode='html',
                    silent=silent
                )
                
                logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(channel_entity, 'username') and channel_entity.username:
                message_url = f"https://t.me/{channel_entity.username}/{message.id}"
            else:
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                channel_id_clean = str(channel_entity.id).replace('-100', '')
                message_url = f"https://t.me/c/{channel_id_clean}/{message.id}"
            
            logger.info(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {message_url}")
            return message_url
            
        except ChatWriteForbiddenError:
            logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ: {channel_id}")
            return None
            
        except FloodWaitError as e:
            logger.error(f"‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram: –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return None
    
    async def publish_media_group(
        self,
        channel_id: str,
        content: str,
        media_paths: List[str],
        silent: bool = False
    ) -> Optional[str]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ) —Å —Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            content: –¢–µ–∫—Å—Ç (–±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—å—é –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ)
            media_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ (–¥–æ 10 —à—Ç—É–∫)
            silent: –¢–∏—Ö–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            
        Returns:
            str: URL –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
        """
        try:
            if not await self.connect():
                return None
            
            logger.info(f"üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {len(media_paths)} —Ñ–æ—Ç–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            valid_files = []
            for path in media_paths[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ
                if Path(path).exists():
                    valid_files.append(path)
                else:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            
            if not valid_files:
                logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            channel_entity = await self.client.get_entity(channel_id)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            messages = await self.client.send_file(
                entity=channel_entity,
                file=valid_files,
                caption=content if len(content) <= 1024 else content[:1024],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                parse_mode='html',
                silent=silent
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è URL
            first_message = messages[0] if isinstance(messages, list) else messages
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            if hasattr(channel_entity, 'username') and channel_entity.username:
                message_url = f"https://t.me/{channel_entity.username}/{first_message.id}"
            else:
                channel_id_clean = str(channel_entity.id).replace('-100', '')
                message_url = f"https://t.me/c/{channel_id_clean}/{first_message.id}"
            
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {len(valid_files)} —Ñ–æ—Ç–æ")
            logger.info(f"üîó –°—Å—ã–ª–∫–∞: {message_url}")
            
            return message_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
            return None
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            if not await self.connect():
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await self.client.get_me()
            
            result = {
                "success": True,
                "user_id": me.id,
                "first_name": me.first_name,
                "last_name": me.last_name,
                "username": me.username,
                "phone": me.phone,
                "is_premium": getattr(me, 'premium', False),
                "session_name": self.session_name
            }
            
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω: {me.first_name}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
        """
        try:
            if not await self.connect():
                return None
            
            channel = await self.client.get_entity(channel_id)
            
            return {
                "id": channel.id,
                "title": channel.title,
                "username": getattr(channel, 'username', None),
                "participants_count": getattr(channel, 'participants_count', None),
                "about": getattr(channel, 'about', None),
                "can_send_messages": not getattr(channel, 'broadcast', True)  # True –¥–ª—è –≥—Ä—É–ø–ø, False –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if self.is_connected:
            try:
                asyncio.create_task(self.disconnect())
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
