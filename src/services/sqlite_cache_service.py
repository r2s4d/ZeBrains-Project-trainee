#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SQLite –∫—ç—à –¥–ª—è AI News Assistant.
–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∫—ç—à —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –¥–∏—Å–∫–µ.
"""

import sqlite3
import json
import time
import logging
import hashlib
import shutil
from typing import Any, Optional, Dict, List
from pathlib import Path
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class SQLiteCache:
    """
    –ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ SQLite —Å TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏).
    """
    
    def __init__(self, db_path: str = "cache.db"):
        self.db_path = db_path
        self.max_size_mb = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ MB
        self._init_database()
        logger.info(f"‚úÖ SQLiteCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {db_path}")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞."""
        with sqlite3.connect(self.db_path) as conn:
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            conn.execute("PRAGMA journal_mode=WAL")
            conn.execute("PRAGMA synchronous=NORMAL")
            conn.execute("PRAGMA cache_size=10000")
            conn.execute("PRAGMA temp_store=MEMORY")
            
            conn.execute("""
                CREATE TABLE IF NOT EXISTS cache (
                    key TEXT PRIMARY KEY,
                    value TEXT NOT NULL,
                    expires_at REAL NOT NULL,
                    created_at REAL NOT NULL,
                    access_count INTEGER DEFAULT 0,
                    last_accessed REAL NOT NULL
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_expires_at 
                ON cache(expires_at)
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_last_accessed 
                ON cache(last_accessed)
            """)
            
            conn.commit()
    
    def _get_connection(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        return sqlite3.connect(self.db_path)
    
    def _is_expired(self, expires_at: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–∏."""
        return time.time() > expires_at
    
    def _check_cache_size(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            stats = self.get_stats()
            if stats['db_size_mb'] > self.max_size_mb:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø—Ä–µ–≤—ã—à–µ–Ω: {stats['db_size_mb']}MB > {self.max_size_mb}MB")
                self._cleanup_oldest_entries()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: {e}")
    
    def _cleanup_oldest_entries(self):
        """–£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞."""
        try:
            with self._get_connection() as conn:
                # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                cursor = conn.execute("""
                    DELETE FROM cache 
                    WHERE key IN (
                        SELECT key FROM cache 
                        ORDER BY last_accessed ASC 
                        LIMIT (SELECT COUNT(*) / 5 FROM cache)
                    )
                """)
                deleted_count = cursor.rowcount
                conn.commit()
                
                if deleted_count > 0:
                    logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
    
    def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ
        """
        try:
            with self._get_connection() as conn:
                cursor = conn.execute("""
                    SELECT value, expires_at FROM cache 
                    WHERE key = ?
                """, (key,))
                row = cursor.fetchone()
                
                if row is None:
                    return None
                
                value, expires_at = row
                
                if self._is_expired(expires_at):
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –∑–∞–ø–∏—Å—å
                    conn.execute("DELETE FROM cache WHERE key = ?", (key,))
                    conn.commit()
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è –∑–∞–ø–∏—Å—å: {key}")
                    return None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
                conn.execute("""
                    UPDATE cache 
                    SET access_count = access_count + 1, last_accessed = ?
                    WHERE key = ?
                """, (time.time(), key))
                conn.commit()
                
                logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {key}")
                return json.loads(value)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return None
    
    def set(self, key: str, value: Any, expire_seconds: int = 3600) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            expire_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
        """
        try:
            expires_at = time.time() + expire_seconds
            created_at = time.time()
            value_json = json.dumps(value, ensure_ascii=False)
            
            with self._get_connection() as conn:
                conn.execute("""
                    INSERT OR REPLACE INTO cache 
                    (key, value, expires_at, created_at, access_count, last_accessed)
                    VALUES (?, ?, ?, ?, 0, ?)
                """, (key, value_json, expires_at, created_at, time.time()))
                conn.commit()
            
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {key} (TTL: {expire_seconds}s)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            self._check_cache_size()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à {key}: {e}")
    
    def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            with self._get_connection() as conn:
                cursor = conn.execute("DELETE FROM cache WHERE key = ?", (key,))
                conn.commit()
                
                if cursor.rowcount > 0:
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {key}")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à."""
        try:
            with self._get_connection() as conn:
                conn.execute("DELETE FROM cache")
                conn.commit()
            logger.info("üßπ –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def cleanup_expired(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            current_time = time.time()
            
            with self._get_connection() as conn:
                cursor = conn.execute("""
                    DELETE FROM cache WHERE expires_at < ?
                """, (current_time,))
                conn.commit()
                
                deleted_count = cursor.rowcount
                
                if deleted_count > 0:
                    logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                
                return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            with self._get_connection() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor = conn.execute("SELECT COUNT(*) FROM cache")
                total_entries = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
                current_time = time.time()
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM cache WHERE expires_at < ?
                """, (current_time,))
                expired_entries = cursor.fetchone()[0]
                
                # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_size = Path(self.db_path).stat().st_size if Path(self.db_path).exists() else 0
                
                # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–∏
                cursor = conn.execute("""
                    SELECT key, access_count FROM cache 
                    ORDER BY access_count DESC 
                    LIMIT 5
                """)
                popular_keys = cursor.fetchall()
                
                return {
                    'total_entries': total_entries,
                    'active_entries': total_entries - expired_entries,
                    'expired_entries': expired_entries,
                    'db_size_bytes': db_size,
                    'db_size_mb': round(db_size / 1024 / 1024, 2),
                    'max_size_mb': self.max_size_mb,
                    'popular_keys': popular_keys
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {
                'total_entries': 0,
                'active_entries': 0,
                'expired_entries': 0,
                'db_size_bytes': 0,
                'db_size_mb': 0,
                'max_size_mb': self.max_size_mb,
                'popular_keys': []
            }
    
    def backup_cache(self) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫—ç—à–∞.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            backup_path = f"{self.db_path}.backup"
            shutil.copy2(self.db_path, backup_path)
            logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫—ç—à–∞ —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def restore_cache(self, backup_path: str) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—ç—à –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
        
        Args:
            backup_path: –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if Path(backup_path).exists():
                shutil.copy2(backup_path, self.db_path)
                logger.info(f"üîÑ –ö—ç—à –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
                return True
            else:
                logger.error(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_path}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
cache = SQLiteCache()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
def get_cache_key(prefix: str, *args) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    
    Args:
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ai_summary')
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        
    Returns:
        str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
    """
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
    key_string = "_".join(str(arg) for arg in args)
    
    # –°–æ–∑–¥–∞–µ–º MD5 —Ö—ç—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª—é—á–∞
    key_hash = hashlib.md5(key_string.encode()).hexdigest()[:16]
    
    return f"{prefix}_{key_hash}"

def cache_ai_result(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI —Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    def wrapper(*args, **kwargs):
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        cache_key = get_cache_key(f"ai_{func.__name__}", *args)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = cache.get(cache_key)
        if cached_result is not None:
            logger.debug(f"üéØ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞: {func.__name__}")
            return cached_result
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = func(*args, **kwargs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 24 —á–∞—Å–∞
        cache.set(cache_key, result, expire_seconds=86400)
        
        return result
    
    return wrapper

def cache_db_result(expire_seconds: int = 3600):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ë–î —Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        expire_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            cache_key = get_cache_key(f"db_{func.__name__}", *args)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_result = cache.get(cache_key)
            if cached_result is not None:
                logger.debug(f"üéØ –ë–î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞: {func.__name__}")
                return cached_result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache.set(cache_key, result, expire_seconds=expire_seconds)
            
            return result
        
        return wrapper
    return decorator
