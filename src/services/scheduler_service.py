#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Scheduler Service for automated tasks.
Handles morning digest sending at 9:00 AM.
"""

import asyncio
import logging
from datetime import datetime, time
from typing import Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from src.config import config
from src.services.bot_session_service import bot_session_service
from src.services.sqlite_cache_service import cache

logger = logging.getLogger(__name__)

class SchedulerService:
    """
    –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
    """
    
    def __init__(self, morning_digest_service, news_parser_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            morning_digest_service: –°–µ—Ä–≤–∏—Å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            news_parser_service: –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        self.morning_digest_service = morning_digest_service
        self.news_parser_service = news_parser_service
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
        
        logger.info("‚úÖ SchedulerService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if news_parser_service:
            logger.info("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è NewsParserService –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        try:
            if not self.is_running:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                self.scheduler.add_job(
                    func=self._send_morning_digest,
                    trigger=CronTrigger(hour=config.scheduler.morning_digest_hour, minute=config.scheduler.morning_digest_minute),
                    id="morning_digest",
                    name="–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                    replace_existing=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
                if self.news_parser_service:
                    self.scheduler.add_job(
                        func=self._parse_news_automatically,
                        trigger=CronTrigger(hour=f"{config.scheduler.news_parsing_start_hour}-{config.scheduler.news_parsing_end_hour}", minute=config.scheduler.news_parsing_minute),
                        id="auto_parse_news",
                        name="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π",
                        replace_existing=True
                    )
                    
                    # –ù–æ—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
                    self.scheduler.add_job(
                        func=self._parse_news_automatically,
                        trigger=CronTrigger(hour=config.scheduler.night_parsing_hours, minute=config.scheduler.night_parsing_minute),
                        id="auto_parse_news_night",
                        name="–ù–æ—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π",
                        replace_existing=True
                    )
                    
                    logger.info("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
                    logger.info("   - –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã (9:00-21:00): –∫–∞–∂–¥—ã–π —á–∞—Å")
                    logger.info("   - –ù–æ—á–Ω—ã–µ —á–∞—Å—ã (21:00-9:00): –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                self.scheduler.add_job(
                    func=self._cleanup_cache,
                    trigger=CronTrigger(minute=0),  # –ö–∞–∂–¥—ã–π —á–∞—Å –≤ 0 –º–∏–Ω—É—Ç
                    id="cache_cleanup",
                    name="–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
                    replace_existing=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                self.scheduler.add_job(
                    func=self._cleanup_sessions,
                    trigger=CronTrigger(minute="0,30"),  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    id="sessions_cleanup",
                    name="–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π",
                    replace_existing=True
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.scheduler.start()
                self.is_running = True
                
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
                logger.info("üìÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 9:00")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        try:
            if self.is_running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def _send_morning_digest(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 9:00.
        """
        try:
            logger.info("üåÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest = await self.morning_digest_service.create_morning_digest()
            
            if digest and digest.news_count > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                success = await self.morning_digest_service.send_digest_to_curators_chat_auto(digest)
                
                if success:
                    logger.info(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {digest.news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    async def _parse_news_automatically(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        """
        try:
            if not self.news_parser_service:
                logger.warning("‚ö†Ô∏è NewsParserService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
                
            logger.info("üì± –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            # –ü–∞—Ä—Å–∏–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            result = await self.news_parser_service.parse_all_sources()
            
            if result:
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('total_parsed', 0)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    async def _cleanup_cache(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–π –∫—ç—à –∫–∞–∂–¥—ã–π —á–∞—Å.
        """
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏
            deleted_count = cache.cleanup_expired()
            
            if deleted_count > 0:
                logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.info("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: –Ω–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            stats = cache.get_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats['active_entries']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, {stats['db_size_mb']}MB")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    async def _cleanup_sessions(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.
        """
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π...")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
            deleted_count = await bot_session_service.cleanup_expired_sessions()
            
            if deleted_count > 0:
                logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
            else:
                logger.info("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π: –Ω–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
            stats = await bot_session_service.get_session_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {stats.get('total_sessions', 0)} –≤—Å–µ–≥–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    def get_next_run_time(self) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Returns:
            Optional[datetime]: –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ None
        """
        try:
            job = self.scheduler.get_job("morning_digest")
            if job and job.next_run_time:
                return job.next_run_time
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
            return None
    
    def get_status(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        """
        try:
            status = {
                "is_running": self.is_running,
                "next_morning_digest": self.get_next_run_time(),
                "jobs_count": len(self.scheduler.get_jobs()),
                "auto_parsing_enabled": self.news_parser_service is not None,
                "cache_stats": cache.get_stats()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
            if self.news_parser_service:
                parse_job = self.scheduler.get_job("auto_parse_news")
                night_parse_job = self.scheduler.get_job("auto_parse_news_night")
                
                status.update({
                    "next_parse": parse_job.next_run_time if parse_job else None,
                    "next_night_parse": night_parse_job.next_run_time if night_parse_job else None,
                    "parse_interval_active": "–ö–∞–∂–¥—ã–π —á–∞—Å (9:00-21:00)",
                    "parse_interval_night": "–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (21:00-9:00)"
                })
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return {"error": str(e)}
