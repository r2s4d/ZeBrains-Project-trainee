#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BotSessionService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º –∏ —Å–±–æ—è–º.
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from src.models import BotSession, engine
from src.config import config

logger = logging.getLogger(__name__)


class BotSessionService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∑–∞–º–µ–Ω—è–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (—Å–ª–æ–≤–∞—Ä–∏ —Ç–∏–ø–∞ self.waiting_for_digest_edit)
    –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º –±–æ—Ç–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.engine = engine
        logger.info("‚úÖ BotSessionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        return Session(bind=self.engine)
    
    async def save_session(self, 
                          session_type: str, 
                          user_id: Optional[str] = None,
                          chat_id: Optional[str] = None, 
                          data: Optional[Dict[str, Any]] = None,
                          status: str = 'active',
                          expires_at: Optional[datetime] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            session_type: –¢–∏–ø —Å–µ—Å—Å–∏–∏ ('digest_edit', 'photo_wait', 'expert_session', etc.)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—É—Ä–∞—Ç–æ—Ä–∞, —ç–∫—Å–ø–µ—Ä—Ç–∞)
            chat_id: ID —á–∞—Ç–∞ (–¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π)
            data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
            status: –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ ('active', 'completed', 'expired', 'cancelled')
            expires_at: –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_session = session.query(BotSession).filter(
                    and_(
                        BotSession.session_type == session_type,
                        BotSession.user_id == user_id,
                        BotSession.status == 'active'
                    )
                ).first()
                
                if existing_session:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                    existing_session.data = json.dumps(data or {})
                    existing_session.status = status
                    existing_session.expires_at = expires_at
                    existing_session.updated_at = datetime.now()
                    session.commit()
                    logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    new_session = BotSession(
                        session_type=session_type,
                        user_id=user_id,
                        chat_id=chat_id,
                        data=json.dumps(data or {}),
                        status=status,
                        expires_at=expires_at
                    )
                    session.add(new_session)
                    session.commit()
                    logger.debug(f"üíæ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_type}: {e}")
            return False
    
    async def get_session_data(self, 
                              session_type: str, 
                              user_id: Optional[str] = None,
                              chat_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            session_type: –¢–∏–ø —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            with self.get_session() as session:
                query = session.query(BotSession).filter(
                    BotSession.session_type == session_type,
                    BotSession.status == 'active'
                )
                
                if user_id:
                    query = query.filter(BotSession.user_id == user_id)
                if chat_id:
                    query = query.filter(BotSession.chat_id == chat_id)
                
                bot_session = query.first()
                
                if bot_session:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
                    current_time = datetime.now()
                    if bot_session.expires_at and bot_session.expires_at < current_time:
                        logger.debug(f"‚è∞ –°–µ—Å—Å–∏—è {session_type} –∏—Å—Ç–µ–∫–ª–∞")
                        bot_session.status = 'expired'
                        session.commit()
                        return None
                    
                    data = json.loads(bot_session.data)
                    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return data
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_type}: {e}")
            return None
    
    async def update_session_data(self, 
                                 session_type: str, 
                                 user_id: Optional[str] = None,
                                 chat_id: Optional[str] = None,
                                 data: Optional[Dict[str, Any]] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏.
        
        Args:
            session_type: –¢–∏–ø —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            with self.get_session() as session:
                query = session.query(BotSession).filter(
                    BotSession.session_type == session_type,
                    BotSession.status == 'active'
                )
                
                if user_id:
                    query = query.filter(BotSession.user_id == user_id)
                if chat_id:
                    query = query.filter(BotSession.chat_id == chat_id)
                
                bot_session = query.first()
                
                if bot_session:
                    bot_session.data = json.dumps(data or {})
                    bot_session.updated_at = datetime.now()
                    session.commit()
                    logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_type}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {session_type}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_type}: {e}")
            return False
    
    async def delete_session(self, 
                           session_type: str, 
                           user_id: Optional[str] = None,
                           chat_id: Optional[str] = None) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            session_type: –¢–∏–ø —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            with self.get_session() as session:
                query = session.query(BotSession).filter(
                    BotSession.session_type == session_type,
                    BotSession.status == 'active'
                )
                
                if user_id:
                    query = query.filter(BotSession.user_id == user_id)
                if chat_id:
                    query = query.filter(BotSession.chat_id == chat_id)
                
                bot_session = query.first()
                
                if bot_session:
                    bot_session.status = 'completed'
                    bot_session.updated_at = datetime.now()
                    session.commit()
                    logger.debug(f"üóëÔ∏è –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_type}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {session_type}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_type}: {e}")
            return False
    
    async def get_active_sessions(self, session_type: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏.
        
        Args:
            session_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ None - –≤—Å–µ —Ç–∏–ø—ã)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            with self.get_session() as session:
                query = session.query(BotSession).filter(BotSession.status == 'active')
                
                if session_type:
                    query = query.filter(BotSession.session_type == session_type)
                
                sessions = query.all()
                
                result = []
                for bot_session in sessions:
                    session_data = {
                        'id': bot_session.id,
                        'session_type': bot_session.session_type,
                        'user_id': bot_session.user_id,
                        'chat_id': bot_session.chat_id,
                        'data': json.loads(bot_session.data),
                        'status': bot_session.status,
                        'expires_at': bot_session.expires_at,
                        'created_at': bot_session.created_at,
                        'updated_at': bot_session.updated_at
                    }
                    result.append(session_data)
                
                logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(result)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return []
    
    async def cleanup_expired_sessions(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏.
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            with self.get_session() as session:
                current_time = datetime.now()
                
                # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                expired_sessions = session.query(BotSession).filter(
                    and_(
                        BotSession.status == 'active',
                        BotSession.expires_at < current_time
                    )
                ).all()
                
                # –ü–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                for bot_session in expired_sessions:
                    bot_session.status = 'expired'
                    bot_session.updated_at = current_time
                
                session.commit()
                
                count = len(expired_sessions)
                if count > 0:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
                
                return count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {e}")
            return 0
    
    async def cleanup_old_completed_sessions(self, days_old: int = 7) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏.
        
        Args:
            days_old: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Å—Å–∏–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å—Ç–∞—Ä—ã–º–∏
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            with self.get_session() as session:
                cutoff_date = datetime.now() - timedelta(days=days_old)
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                old_sessions = session.query(BotSession).filter(
                    and_(
                        BotSession.status == 'completed',
                        BotSession.updated_at < cutoff_date
                    )
                ).all()
                
                # –£–¥–∞–ª—è–µ–º –∏—Ö
                for bot_session in old_sessions:
                    session.delete(bot_session)
                
                session.commit()
                
                count = len(old_sessions)
                if count > 0:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)")
                
                return count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return 0
    
    async def get_session_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        """
        try:
            with self.get_session() as session:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
                total_sessions = session.query(BotSession).count()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                active_sessions = session.query(BotSession).filter(
                    BotSession.status == 'active'
                ).count()
                
                # –ò—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                expired_sessions = session.query(BotSession).filter(
                    BotSession.status == 'expired'
                ).count()
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                completed_sessions = session.query(BotSession).filter(
                    BotSession.status == 'completed'
                ).count()
                
                # –°–µ—Å—Å–∏–∏ –ø–æ —Ç–∏–ø–∞–º
                session_types = {}
                for session_type in ['digest_edit', 'photo_wait', 'expert_session', 'curator_moderation', 'current_digest', 'expert_comment']:
                    count = session.query(BotSession).filter(
                        BotSession.session_type == session_type
                    ).count()
                    session_types[session_type] = count
                
                return {
                    'total_sessions': total_sessions,
                    'active_sessions': active_sessions,
                    'expired_sessions': expired_sessions,
                    'completed_sessions': completed_sessions,
                    'session_types': session_types
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
bot_session_service = BotSessionService()
