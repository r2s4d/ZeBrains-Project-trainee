#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram User API
–£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: 1 + 2 (–±–∞–∑–æ–≤–∞—è + —Å—Ä–µ–¥–Ω—è—è)

–£—Ä–æ–≤–µ–Ω—å 1 (–±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞):
- –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤
- –ò—Å–∫–ª—é—á–µ–Ω–∏–µ .env –∏–∑ git

–£—Ä–æ–≤–µ–Ω—å 2 (—Å—Ä–µ–¥–Ω—è—è –∑–∞—â–∏—Ç–∞):
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
"""

import hashlib
import os
import json
import logging
from typing import Optional, Dict, Any
from cryptography.fernet import Fernet
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class TelegramSecurityService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram User API —Å–µ—Å—Å–∏—è–º–∏
    
    –ß—Ç–æ –∑–∞—â–∏—â–∞–µ–º:
    - –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ‚Üí –•—ç—à–∏—Ä—É–µ–º
    - –¢–æ–∫–µ–Ω—ã —Å–µ—Å—Å–∏–π ‚Üí –®–∏—Ñ—Ä—É–µ–º
    - API –∫–ª—é—á–∏ ‚Üí –•—Ä–∞–Ω–∏–º –≤ .env
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        from dotenv import load_dotenv
        load_dotenv()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 1)
        self.master_key = os.getenv('TELEGRAM_MASTER_KEY')
        
        if not self.master_key:
            # –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
            self.master_key = Fernet.generate_key().decode()
            logger.warning("‚ö†Ô∏è –°–û–ó–î–ê–ù –ù–û–í–´–ô –ú–ê–°–¢–ï–†-–ö–õ–Æ–ß!")
            logger.warning(f"‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –≤ .env: TELEGRAM_MASTER_KEY={self.master_key}")
            print(f"\nüîë –î–û–ë–ê–í–¨–¢–ï –í .env –§–ê–ô–õ:")
            print(f"TELEGRAM_MASTER_KEY={self.master_key}\n")
        else:
            logger.info(f"üîë –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env: {self.master_key[:8]}...{self.master_key[-8:]}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 2)
        try:
            self.cipher = Fernet(self.master_key.encode())
            logger.info("üîê –°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def hash_phone_number(self, phone: str) -> str:
        """
        –•—ç—à–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 1)
        
        –ó–ê–ß–ï–ú: –ß—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ë–î
        –ö–ê–ö: "+79161234567" ‚Üí "a1b2c3d4e5f6" (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+79161234567")
            
        Returns:
            str: –•—ç—à –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (16 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        try:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_phone = phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
            
            # –°–æ–∑–¥–∞–µ–º SHA256 —Ö—ç—à (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)
            phone_hash = hashlib.sha256(clean_phone.encode('utf-8')).hexdigest()[:16]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ë–ï–ó —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å 2)
            logger.info(f"üì± –ù–æ–º–µ—Ä –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω: {phone[:4]}****** ‚Üí {phone_hash[:8]}...")
            
            return phone_hash
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {e}")
            raise
    
    def encrypt_session_data(self, session_data: bytes) -> str:
        """
        –®–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 2)
        
        –ó–ê–ß–ï–ú: –ß—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –±—ã–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã –≤ –ë–î
        –ö–ê–ö: –†–µ–∞–ª—å–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ ‚Üí "gAAAAABh...–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞"
        
        Args:
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç Telethon (bytes)
            
        Returns:
            str: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        """
        try:
            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Fernet (AES 128)
            encrypted_data = self.cipher.encrypt(session_data)
            
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            encrypted_string = encrypted_data.decode('utf-8')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ë–ï–ó —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—É—Ä–æ–≤–µ–Ω—å 2)
            logger.info(f"üîê –°–µ—Å—Å–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞: {len(session_data)} –±–∞–π—Ç ‚Üí {len(encrypted_string)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return encrypted_string
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            raise
    
    def decrypt_session_data(self, encrypted_string: str) -> bytes:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 2)
        
        –ó–ê–ß–ï–ú: –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        –ö–ê–ö: "gAAAAABh...–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞" ‚Üí –†–µ–∞–ª—å–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ
        
        Args:
            encrypted_string: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ë–î
            
        Returns:
            bytes: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        """
        try:
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
            encrypted_data = encrypted_string.encode('utf-8')
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            session_data = self.cipher.decrypt(encrypted_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ë–ï–ó —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—É—Ä–æ–≤–µ–Ω—å 2)
            logger.info(f"üîì –°–µ—Å—Å–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞: {len(session_data)} –±–∞–π—Ç")
            
            return session_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            raise
    
    def create_session_data_json(self, phone: str, session_data: bytes) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ bot_sessions.data
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ Telethon
            
        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        """
        try:
            # –•—ç—à–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä (—É—Ä–æ–≤–µ–Ω—å 1)
            phone_hash = self.hash_phone_number(phone)
            
            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—É—Ä–æ–≤–µ–Ω—å 2)
            encrypted_session = self.encrypt_session_data(session_data)
            
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (—É—Ä–æ–≤–µ–Ω—å 2)
            key_hash = hashlib.sha256(self.master_key.encode()).hexdigest()[:16]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            data_json = {
                "phone_hash": phone_hash,
                "session_data_encrypted": encrypted_session,
                "encryption_key_hash": key_hash,
                "usage_count": 0,
                "last_error": None,
                "created_at": datetime.utcnow().isoformat()
            }
            
            logger.info(f"üì¶ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {phone_hash[:8]}...")
            return data_json
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            raise
    
    def extract_session_data_from_json(self, data_json: Dict[str, Any]) -> bytes:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ JSON
        
        Args:
            data_json: JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ bot_sessions.data
            
        Returns:
            bytes: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ (—É—Ä–æ–≤–µ–Ω—å 2)
            stored_key_hash = data_json.get("encryption_key_hash")
            current_key_hash = hashlib.sha256(self.master_key.encode()).hexdigest()[:16]
            
            if stored_key_hash != current_key_hash:
                raise ValueError("–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è! –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            encrypted_session = data_json["session_data_encrypted"]
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            session_data = self.decrypt_session_data(encrypted_session)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            data_json["usage_count"] = data_json.get("usage_count", 0) + 1
            
            logger.info(f"üì• –°–µ—Å—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {data_json['usage_count']}")
            return session_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            data_json["last_error"] = str(e)
            raise
    
    def is_phone_hash_match(self, phone: str, stored_hash: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ö—ç—à—É
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            stored_hash: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö—ç—à –∏–∑ –ë–î
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö—ç—à—É
        """
        try:
            current_hash = self.hash_phone_number(phone)
            match = current_hash == stored_hash
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å 2)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞: {phone[:4]}****** ‚Üí {'‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç' if match else '‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}")
            
            return match
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞: {e}")
            return False
    
    def validate_session_data(self, data_json: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ (—É—Ä–æ–≤–µ–Ω—å 2)
        
        Args:
            data_json: JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –ë–î
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        try:
            required_fields = ["phone_hash", "session_data_encrypted", "encryption_key_hash"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            for field in required_fields:
                if field not in data_json:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
            stored_key_hash = data_json["encryption_key_hash"]
            current_key_hash = hashlib.sha256(self.master_key.encode()).hexdigest()[:16]
            
            if stored_key_hash != current_key_hash:
                logger.warning("‚ö†Ô∏è –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è")
                return False
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤–∞–ª–∏–¥–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
