#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PublicationService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram-–∫–∞–Ω–∞–ª

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å:
1. –ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª
2. –°–æ–∑–¥–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
3. –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import asyncio
import logging
import aiohttp
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from enum import Enum

from src.services.database_service import DatabaseService
from src.services.post_formatter_service import PostFormatterService
from src.models.database import News, Source, Expert, Comment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PublicationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    DRAFT = "draft"
    SCHEDULED = "scheduled"
    PUBLISHED = "published"
    FAILED = "failed"

class PublicationType(Enum):
    """–¢–∏–ø—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    SINGLE_NEWS = "single_news"
    DAILY_DIGEST = "daily_digest"
    WEEKLY_DIGEST = "weekly_digest"
    EXPERT_ANALYSIS = "expert_analysis"

class PublicationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram-–∫–∞–Ω–∞–ª.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    """
    
    def __init__(self, database_service: DatabaseService, bot_token: str, channel_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            database_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (@channel_name –∏–ª–∏ -1001234567890)
        """
        self.db = database_service
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.post_formatter = PostFormatterService()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.max_posts_per_day = 10
        self.publication_interval = 2  # —á–∞—Å–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
        self.auto_publish_enabled = True
        
        logger.info(f"PublicationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
    
    # ==================== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –û–¢–î–ï–õ–¨–ù–´–• –ù–û–í–û–°–¢–ï–ô ====================
    
    async def publish_news(self, news_id: int) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –≤ –∫–∞–Ω–∞–ª")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news = self.db.get_news_by_id(news_id)
            if not news:
                return {
                    "success": False,
                    "error": f"–ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
            if news.status != "approved":
                return {
                    "success": False,
                    "error": f"–ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å: {news.status})"
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç
            formatted_post = self.post_formatter.format_single_news(news)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–Ω–∞–ª
            telegram_result = await self._send_to_telegram_channel(formatted_post)
            if not telegram_result["success"]:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {telegram_result['error']}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {telegram_result['error']}"
                }
            
            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
            logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {formatted_post[:100]}...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
            await self._update_news_publication_status(news_id, PublicationStatus.PUBLISHED)
            
            return {
                "success": True,
                "news_id": news_id,
                "title": news.title,
                "message": "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ",
                "formatted_post": formatted_post
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
            await self._update_news_publication_status(news_id, PublicationStatus.FAILED)
            return {
                "success": False,
                "error": str(e)
            }
    
    async def publish_news_batch(self, news_ids: List[int]) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª.
        
        Args:
            news_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        logger.info(f"üì§ –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è {len(news_ids)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª")
        
        results = {
            "success": 0,
            "failed": 0,
            "total": len(news_ids),
            "details": []
        }
        
        for news_id in news_ids:
            try:
                result = await self.publish_news(news_id)
                results["details"].append({
                    "news_id": news_id,
                    "result": result
                })
                
                if result["success"]:
                    results["success"] += 1
                else:
                    results["failed"] += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
                results["failed"] += 1
                results["details"].append({
                    "news_id": news_id,
                    "result": {"success": False, "error": str(e)}
                })
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
        return results
    
    # ==================== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –î–ê–ô–î–ñ–ï–°–¢–û–í ====================
    
    async def publish_daily_digest(self) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
            daily_news = await self._get_daily_news()
            if not daily_news:
                return {
                    "success": False,
                    "error": "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
                }
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_content = self.post_formatter.format_daily_digest(daily_news)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–Ω–∞–ª
            telegram_result = await self._send_to_telegram_channel(digest_content)
            if not telegram_result["success"]:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ Telegram: {telegram_result['error']}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {telegram_result['error']}"
                }
            
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
            logger.info(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {digest_content[:100]}...")
            
            return {
                "success": True,
                "type": "daily_digest",
                "news_count": len(daily_news),
                "message": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ",
                "content": digest_content
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def publish_weekly_digest(self) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_news = await self._get_weekly_news()
            if not weekly_news:
                return {
                    "success": False,
                    "error": "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"
                }
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_content = self.post_formatter.format_weekly_digest(weekly_news)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–Ω–∞–ª
            telegram_result = await self._send_to_telegram_channel(digest_content)
            if not telegram_result["success"]:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ Telegram: {telegram_result['error']}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {telegram_result['error']}"
                }
            
            logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
            
            return {
                "success": True,
                "type": "weekly_digest",
                "news_count": len(weekly_news),
                "message": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ",
                "content": digest_content
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    # ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ====================
    
    async def auto_publish_approved_news(self) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            approved_news = await self._get_news_ready_for_publication()
            if not approved_news:
                logger.info("üìù –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return {
                    "success": True,
                    "published": 0,
                    "message": "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                }
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Ä–∞–∑
            news_to_publish = approved_news[:self.max_posts_per_day]
            
            # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            results = await self.publish_news_batch([news.id for news in news_to_publish])
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def start_auto_publication(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç asyncio.create_task() —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
            
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ß–ï–†–ï–î–¨–Æ –ü–£–ë–õ–ò–ö–ê–¶–ò–ô ====================
    
    async def get_publication_queue(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π.
        
        Returns:
            List —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –≤ –æ—á–µ—Ä–µ–¥–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            ready_news = await self._get_news_ready_for_publication()
            
            queue = []
            for news in ready_news:
                queue.append({
                    "news_id": news.id,
                    "title": news.title,
                    "status": news.status,
                    "created_at": news.created_at,
                    "priority": self._calculate_publication_priority(news)
                })
            
            return queue
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
            return []
    
    async def schedule_publication(self, news_id: int, publish_at: datetime) -> bool:
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            publish_at: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –Ω–∞ {publish_at}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
            await self._update_news_publication_status(news_id, PublicationStatus.SCHEDULED)
            
            logger.info(f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {publish_at}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ô ====================
    
    async def get_publication_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π.
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_news = self.db.get_all_news()
            
            stats = {
                "total_news": len(total_news),
                "published_today": 0,
                "published_this_week": 0,
                "published_this_month": 0,
                "queue_size": 0,
                "auto_publication_enabled": self.auto_publish_enabled,
                "max_posts_per_day": self.max_posts_per_day,
                "publication_interval": f"{self.publication_interval} —á–∞—Å–∞"
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º
            from datetime import datetime, timedelta
            
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            all_news = self.db.get_all_news()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–∞–º
            for news in all_news:
                if hasattr(news, 'channel_published_at') and news.channel_published_at:
                    news_date = news.channel_published_at.date()
                    
                    if news_date == today:
                        stats["published_today"] += 1
                    if news_date >= week_ago:
                        stats["published_this_week"] += 1
                    if news_date >= month_ago:
                        stats["published_this_month"] += 1
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
            return {"error": str(e)}
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    async def _get_daily_news(self) -> List[News]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def _get_weekly_news(self) -> List[News]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def _get_news_ready_for_publication(self) -> List[News]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return []
    
    async def _update_news_publication_status(self, news_id: int, status: PublicationStatus) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session = self.db.get_session()
            if session:
                try:
                    from src.models.database import News
                    from datetime import datetime
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç—å
                    news = session.query(News).filter_by(id=news_id).first()
                    if news:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
                        if status == PublicationStatus.PUBLISHED:
                            news.channel_published_at = datetime.utcnow()
                        
                        session.commit()
                        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                        return False
                finally:
                    session.close()
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def _calculate_publication_priority(self, news: News) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            priority = 5  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            if hasattr(news, 'importance_score') and news.importance_score:
                if news.importance_score >= 8:
                    priority += 3
                elif news.importance_score >= 6:
                    priority += 2
                elif news.importance_score >= 4:
                    priority += 1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            if news.created_at:
                hours_old = (datetime.now() - news.created_at).total_seconds() / 3600
                if hours_old < 1:
                    priority += 2
                elif hours_old < 6:
                    priority += 1
            
            return min(priority, 10)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 10
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
            return 5
    
    async def _send_to_telegram_channel(self, message: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            if not self.bot_token or not self.channel_id:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            params = {
                "chat_id": self.channel_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            connector = aiohttp.TCPConnector(ssl=False)  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
                            return {
                                "success": True,
                                "message_id": result["result"]["message_id"]
                            }
                        else:
                            error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            logger.error(f"‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                            return {
                                "success": False,
                                "error": f"Telegram API: {error_msg}"
                            }
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}: {error_text}"
                        }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def publish_digest_with_photo(self, digest_text: str, photo_file_id: str) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç —Å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª.
        
        Args:
            digest_text: –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            photo_file_id: ID —Ñ–æ—Ç–æ —Ñ–∞–π–ª–∞ –≤ Telegram
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª")
            
            if not self.bot_token or not self.channel_id:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–ª–∏–º–∏—Ç Telegram: 1024 —Å–∏–º–≤–æ–ª–∞)
            max_caption_length = 1024
            if len(digest_text) > max_caption_length:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1020 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º "..."
                caption_text = digest_text[:max_caption_length - 3] + "..."
                logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –æ–±—Ä–µ–∑–∞–Ω —Å {len(digest_text)} –¥–æ {len(caption_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                caption_text = digest_text
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            params = {
                "chat_id": self.channel_id,
                "photo": photo_file_id,
                "caption": caption_text,
                "parse_mode": "Markdown"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            connector = aiohttp.TCPConnector(ssl=False)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
                            return {
                                "success": True,
                                "message_id": result["result"]["message_id"]
                            }
                        else:
                            error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            logger.error(f"‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                            return {
                                "success": False,
                                "error": f"Telegram API: {error_msg}"
                            }
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}: {error_text}"
                        }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ: {e}")
            return {
                "success": False,
                "error": str(e)
            }
