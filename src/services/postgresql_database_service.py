"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
–ó–∞–º–µ–Ω–∏—Ç mock DatabaseService –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã.
"""

from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from datetime import datetime
import logging

from src.models.database import Source, News, Curator, Expert

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class PostgreSQLDatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.engine = None
        self.SessionLocal = None
        self._initialize_connection()
    
    def _initialize_connection(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
        try:
            from sqlalchemy import create_engine
            from sqlalchemy.orm import sessionmaker
            from src.config.database_config import DatabaseConfig
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            connection_string = DatabaseConfig.get_connection_string()
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {connection_string}")
            
            self.engine = create_engine(connection_string)
            self.SessionLocal = sessionmaker(bind=self.engine)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.get_session() as session:
                from sqlalchemy import text
                session.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
            self.engine = None
            self.SessionLocal = None
    
    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é PostgreSQL."""
        if not self.SessionLocal:
            raise Exception("PostgreSQL –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.SessionLocal()
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            with self.get_session() as db:
                from sqlalchemy import text
                db.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    # ===== –†–ê–ë–û–¢–ê –° –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò (Sources) =====
    
    def add_source(self, name: str, telegram_id: str) -> Optional[Source]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            telegram_id: Telegram ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            Source: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        with self.get_session() as db:
            try:
                source = Source(name=name, telegram_id=telegram_id)
                db.add(source)
                db.commit()
                db.refresh(source)
                logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {source.id}")
                return source
            except IntegrityError:
                db.rollback()
                logger.error(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ —Å telegram_id '{telegram_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return None
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
                return None
    
    def get_all_sources(self) -> List[Source]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Returns:
            List[Source]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        with self.get_session() as db:
            try:
                sources = db.query(Source).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                return sources
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
                return []
    
    def get_source_by_telegram_id(self, telegram_id: str) -> Optional[Source]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ Telegram ID.
        
        Args:
            telegram_id: Telegram ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            Source: –ù–∞–π–¥–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ None
        """
        with self.get_session() as db:
            try:
                source = db.query(Source).filter_by(telegram_id=telegram_id).first()
                if source:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source.name}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ —Å telegram_id '{telegram_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return source
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
                return None
    
    # ===== –†–ê–ë–û–¢–ê –° –ù–û–í–û–°–¢–Ø–ú–ò (News) =====
    
    def get_all_news(self) -> List[News]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Returns:
            List[News]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        with self.get_session() as db:
            try:
                news_list = db.query(News).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                return news_list
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                return []
    
    def get_news_by_id(self, news_id: int) -> Optional[News]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            News: –ù–∞–π–¥–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ None
        """
        with self.get_session() as db:
            try:
                news = db.query(News).filter_by(id=news_id).first()
                return news
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID: {e}")
                return None
    
    def get_news_by_status(self, status: str) -> List[News]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏ ('new', 'processed', 'approved', 'rejected')
            
        Returns:
            List[News]: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        with self.get_session() as db:
            try:
                news_list = db.query(News).filter_by(status=status).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
                return news_list
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                return []
    
    def update_news_status(self, news_id: int, new_status: str, curator_id: str = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            curator_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        with self.get_session() as db:
            try:
                news = db.query(News).filter_by(id=news_id).first()
                if news:
                    news.status = new_status
                    if curator_id:
                        news.curator_id = curator_id
                        news.curated_at = datetime.utcnow()
                    db.commit()
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                return False
    
    # ===== –†–ê–ë–û–¢–ê –° –ö–£–†–ê–¢–û–†–ê–ú–ò (Curators) =====
    
    def get_all_curators(self) -> List[Curator]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.
        
        Returns:
            List[Curator]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        """
        with self.get_session() as db:
            try:
                curators = db.query(Curator).filter_by(is_active=True).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(curators)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
                return curators
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
                return []
    
    def get_curator_by_id(self, curator_id: int) -> Optional[Curator]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID.
        
        Args:
            curator_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            Curator: –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –∏–ª–∏ None
        """
        with self.get_session() as db:
            try:
                curator = db.query(Curator).filter_by(id=curator_id).first()
                return curator
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID: {e}")
                return None
    
    # ===== –†–ê–ë–û–¢–ê –° –≠–ö–°–ü–ï–†–¢–ê–ú–ò (Experts) =====
    
    def get_all_experts(self) -> List[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
        
        Returns:
            List[Expert]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        with self.get_session() as db:
            try:
                experts = db.query(Expert).filter_by(is_active=True).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(experts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
                return experts
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
                return []
    
    def get_expert_by_id(self, expert_id: int) -> Optional[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ ID.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            Expert: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∏–ª–∏ None
        """
        with self.get_session() as db:
            try:
                expert = db.query(Expert).filter_by(id=expert_id).first()
                return expert
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ ID: {e}")
                return None
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    
    def get_database_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            with self.get_session() as db:
                stats = {
                    'sources': db.query(Source).count(),
                    'news': db.query(News).count(),
                    'curators': db.query(Curator).filter_by(is_active=True).count(),
                    'experts': db.query(Expert).filter_by(is_active=True).count()
                }
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –Ω–æ–≤–æ—Å—Ç–µ–π
                status_stats = {}
                for status in ['new', 'processed', 'approved', 'rejected']:
                    status_stats[status] = db.query(News).filter_by(status=status).count()
                stats['news_by_status'] = status_stats
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    async def get_news_since(self, start_time: datetime) -> List[News]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            with self.get_session() as db:
                news_list = db.query(News).filter(News.published_at >= start_time).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å {start_time}")
                return news_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {start_time}: {e}")
            return []
