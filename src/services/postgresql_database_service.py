"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
–ó–∞–º–µ–Ω–∏—Ç mock DatabaseService –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã.
"""

from typing import List, Optional, Dict
from sqlalchemy.orm import Session
from datetime import datetime
import logging
import hashlib

from src.models.database import Source, News, Expert, Comment, NewsSource
from src.services.sqlite_cache_service import cache, get_cache_key

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class PostgreSQLDatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.engine = None
        self.SessionLocal = None
        self.selected_expert_id = None
        self._initialize_connection()
    
    def _initialize_connection(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
        try:
            from sqlalchemy import create_engine
            from sqlalchemy.orm import sessionmaker
            from src.config.database_config import DatabaseConfig
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            connection_string = DatabaseConfig.get_connection_string()
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {connection_string}")
            
            self.engine = create_engine(connection_string)
            self.SessionLocal = sessionmaker(bind=self.engine)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.get_session() as session:
                from sqlalchemy import text
                session.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
            self.engine = None
            self.SessionLocal = None
    
    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é PostgreSQL."""
        if not self.SessionLocal:
            raise Exception("PostgreSQL –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.SessionLocal()
    
    
    # ===== –†–ê–ë–û–¢–ê –° –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò (Sources) =====
    
    
    def get_all_sources(self) -> List[Source]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Returns:
            List[Source]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        with self.get_session() as db:
            try:
                sources = db.query(Source).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                return sources
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
                return []
    
    
    # ===== –†–ê–ë–û–¢–ê –° –ù–û–í–û–°–¢–Ø–ú–ò (News) =====
    
    def get_all_news(self) -> List[News]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Returns:
            List[News]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        with self.get_session() as db:
            try:
                news_list = db.query(News).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                return news_list
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                return []
    
    async def get_news_since(self, start_time: datetime) -> List[News]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            with self.get_session() as db:
                news_list = db.query(News).filter(News.published_at >= start_time).all()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å {start_time}")
                return news_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {start_time}: {e}")
            return []
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê =====
    
    def get_approved_news_for_digest(self, limit: int = 5) -> List[News]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            List[News]: –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = get_cache_key("db_approved_news", limit)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_news = cache.get(cache_key)
            if cached_news:
                logger.info(f"üéØ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫—ç—à–∞: {len(cached_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                return cached_news
            
            with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
                news_list = session.query(News).filter(
                    News.status == "approved"
                ).order_by(News.created_at.desc()).limit(limit).all()
                
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                news_dicts = []
                for news in news_list:
                    news_dict = {
                        'id': news.id,
                        'title': news.title,
                        'content': news.content,
                        'status': news.status,
                        'created_at': news.created_at.isoformat() if news.created_at else None,
                        'published_at': news.published_at.isoformat() if news.published_at else None
                    }
                    news_dicts.append(news_dict)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 —á–∞—Å
                cache.set(cache_key, news_dicts, expire_seconds=3600)
                logger.debug(f"üíæ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {cache_key}")
                
                return news_list
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    def get_expert_of_week(self) -> Optional[Expert]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏.
        
        Returns:
            Expert: –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ None
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = get_cache_key("db_expert_of_week", self.selected_expert_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_expert = cache.get(cache_key)
            if cached_expert:
                logger.info(f"üéØ –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞: {cached_expert.get('name', 'Unknown')}")
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç Expert
                expert = Expert()
                expert.id = cached_expert['id']
                expert.name = cached_expert['name']
                expert.specialization = cached_expert['specialization']
                expert.is_active = cached_expert['is_active']
                return expert
            
            with self.get_session() as session:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø–∞–º—è—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                if self.selected_expert_id:
                    expert = session.query(Expert).filter(Expert.id == self.selected_expert_id).first()
                    if expert:
                        logger.info(f"üë§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏: {expert.name}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 6 —á–∞—Å–æ–≤
                        expert_dict = {
                            'id': expert.id,
                            'name': expert.name,
                            'specialization': expert.specialization,
                            'is_active': expert.is_active
                        }
                        cache.set(cache_key, expert_dict, expire_seconds=21600)
                        logger.debug(f"üíæ –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")
                        
                        return expert
                
                # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
                expert = session.query(Expert).filter(
                    Expert.is_active == True
                ).first()
                
                if expert:
                    logger.info(f"üë§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞: {expert.name}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 6 —á–∞—Å–æ–≤
                    expert_dict = {
                        'id': expert.id,
                        'name': expert.name,
                        'specialization': expert.specialization,
                        'is_active': expert.is_active
                    }
                    cache.set(cache_key, expert_dict, expire_seconds=21600)
                    logger.debug(f"üíæ –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
                
                return expert
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏: {e}")
            return None
    
    def set_expert_of_week(self, expert_id: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Å–ø–µ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                expert = session.query(Expert).filter(Expert.id == expert_id).first()
                if expert:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
                    self.selected_expert_id = expert_id
                    
                    logger.info(f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏: {expert.name} (ID: {expert.id})")
                    return True
                else:
                    logger.error(f"‚ùå –≠–∫—Å–ø–µ—Ä—Ç —Å ID {expert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏: {e}")
            return False
    
    async def get_expert_comments_for_news(self, news_ids: List[int]) -> Dict[int, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∫ –Ω–æ–≤–æ—Å—Ç—è–º –∏–∑ bot_sessions.
        
        Args:
            news_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            Dict[int, Dict]: –°–ª–æ–≤–∞—Ä—å {news_id: comment_data}
        """
        try:
            from src.services.bot_session_service import bot_session_service
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ bot_sessions
            all_comments = await bot_session_service.get_active_sessions('expert_comment')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            comments_dict = {}
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ë–î: {len(all_comments)} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π: {news_ids}")
            
            for comment_session in all_comments:
                data = comment_session.get('data', {})
                news_id = data.get('news_id')
                
                if news_id in news_ids:
                    expert_id = data.get('expert_id')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
                    with self.get_session() as session:
                        expert = session.query(Expert).filter(Expert.telegram_id == str(expert_id)).first()
                        expert_name = expert.name if expert else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç"
                        expert_specialization = expert.specialization if expert else "AI"
                    
                    comments_dict[news_id] = {
                        "text": data.get('comment', ''),
                        "expert": {
                            "name": expert_name,
                            "specialization": expert_specialization
                        }
                    }
                    logger.debug(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {data.get('comment', '')[:50]}...")
            
            logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(comments_dict)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return comments_dict
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {}
    
    def get_news_sources(self, news_ids: List[int]) -> Dict[int, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            news_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            Dict[int, List[str]]: –°–ª–æ–≤–∞—Ä—å {news_id: [source_names]}
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            news_ids_str = "_".join(map(str, sorted(news_ids)))
            cache_key = get_cache_key("db_news_sources", news_ids_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_sources = cache.get(cache_key)
            if cached_sources:
                logger.info(f"üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫—ç—à–∞: {len(cached_sources)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                return cached_sources
            
            with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                news_list = session.query(News).filter(
                    News.id.in_(news_ids)
                ).all()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                sources_dict = {}
                
                for news in news_list:
                    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑—å NewsSource (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ news.source_url)
                    news_sources = session.query(NewsSource).filter(
                        NewsSource.news_id == news.id
                    ).all()
                    
                    logger.debug(f"üîç –ù–æ–≤–æ—Å—Ç—å {news.id}: –Ω–∞–π–¥–µ–Ω–æ {len(news_sources)} —Å–≤—è–∑–µ–π NewsSource")
                    
                    if news_sources:
                        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
                        unique_sources = set()
                        for ns in news_sources:
                            source = session.query(Source).filter(Source.id == ns.source_id).first()
                            if source:
                                unique_sources.add(source)
                        
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–∞–∫—Å–∏–º—É–º 3)
                        if unique_sources:
                            source_links = []
                            for source in list(unique_sources)[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3
                                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π NewsSource –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è source_url
                                ns = next((ns for ns in news_sources if ns.source_id == source.id), None)
                                
                                if ns and ns.source_url:
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    source_link = f'<a href="{ns.source_url}">{source.name}</a>'
                                elif source.telegram_id:
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ @channel_name —Å HTML-—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
                                    clean_telegram_id = source.telegram_id.lstrip('@')
                                    source_link = f'<a href="https://t.me/{clean_telegram_id}">{source.name}</a>'
                                else:
                                    source_link = source.name
                                source_links.append(source_link)
                            sources_dict[int(news.id)] = source_links  # –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                            logger.debug(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news.id}: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ {', '.join(source_links)}")
                        else:
                            sources_dict[int(news.id)] = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"]
                            logger.warning(f"‚ùå –ù–æ–≤–æ—Å—Ç—å {news.id}: –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                    else:
                        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º news.source_url –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–µ–π NewsSource
                        if news.source_url and news.source_channel_username:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Å—Å—ã–ª–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è @channel
                            channel_name = news.source_channel_username.lstrip('@')
                            source_link = f'<a href="{news.source_url}">@{channel_name}</a>'
                            sources_dict[int(news.id)] = [source_link]
                            logger.debug(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news.id}: fallback HTML-—Å—Å—ã–ª–∫–∞ @{channel_name}")
                        else:
                            # Fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                            all_sources = session.query(Source).all()
                            if all_sources:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                                source_index = news.id % len(all_sources)
                                source = all_sources[source_index]
                                if source.telegram_id:
                                    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª
                                    if source.telegram_id.startswith('@'):
                                        source_link = f"[{source.name}](https://t.me/{source.telegram_id[1:]})"
                                    else:
                                        source_link = f"[{source.name}](https://t.me/{source.telegram_id})"
                                else:
                                    source_link = source.name
                                sources_dict[int(news.id)] = [source_link]  # –û–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
                                logger.debug(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å {news.id}: fallback –∏—Å—Ç–æ—á–Ω–∏–∫ {source_link}")
                            else:
                                sources_dict[int(news.id)] = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"]
                                logger.warning(f"‚ùå –ù–æ–≤–æ—Å—Ç—å {news.id}: –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è {len(sources_dict)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 2 —á–∞—Å–∞
                cache.set(cache_key, sources_dict, expire_seconds=7200)
                logger.debug(f"üíæ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {cache_key}")
                
                return sources_dict
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return {}
