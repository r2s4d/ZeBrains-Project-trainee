# -*- coding: utf-8 -*-
"""
PostFormatterService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –≤ —Å—Ç–∏–ª–µ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
- –¶–∏—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ Telegram
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —ç–º–æ–¥–∑–∏
- –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
from src.models.database import News, Summary, Comment, Expert


class PostFormatterService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞".
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ç–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.digital_employee_name = "–ê–ª–µ–∫—Å"
        self.digital_employee_role = "—Ü–∏—Ñ—Ä–æ–≤–æ–π SMM-–º–µ–Ω–µ–¥–∂–µ—Ä ZeBrains"
        
    def format_post_title(self, title: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏.
        
        Args:
            title: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        emoji = self._get_title_emoji(title)
        return f"{emoji} {title}"
    
    def _get_title_emoji(self, title: str) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –≠–º–æ–¥–∑–∏
        """
        title_lower = title.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
        words = title_lower.split()
        
        if any(word in ['–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ø–µ—Ä–≤—ã–π'] for word in words):
            return "üöÄ"
        elif any(word in ['ai', '–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', 'gpt', 'openai'] for word in words):
            return "ü§ñ"
        elif any(word in ['google', 'microsoft', 'meta', 'apple'] for word in words):
            return "üíº"
        elif any(word in ['—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ'] for word in words):
            return "üí∞"
        elif any(word in ['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–Ω–∞—É–∫–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'] for word in words):
            return "üî¨"
        elif any(word in ['–Ω–æ–≤—ã–π'] for word in words):
            return "üöÄ"
        else:
            return "üì∞"
    
    def format_introduction(self, expert_name: Optional[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –æ—Ç "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞".
        
        Args:
            expert_name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            
        Returns:
            –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è
        """
        if expert_name:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            expert_name_correct = self._get_expert_name_in_correct_case(expert_name)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥
            preposition = self._get_correct_preposition(expert_name)
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}. –≠—Ç—É –Ω–µ–¥–µ–ª—é —Ä–∞–∑–±–∏—Ä–∞–µ–º –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ò–ò {preposition} {expert_name_correct}! –ß–µ—Å—Ç–Ω–æ —Å–∫–∞–∂—É - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∑–∞—Å—Ç–∞–≤–∏–ª–∏ –¥–∞–∂–µ –º–æ–∏—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤ –ø–æ–≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è!"
        else:
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}. –≠—Ç—É –Ω–µ–¥–µ–ª—é —Ä–∞–∑–±–∏—Ä–∞–µ–º –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ò–ò! –ß–µ—Å—Ç–Ω–æ —Å–∫–∞–∂—É - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∑–∞—Å—Ç–∞–≤–∏–ª–∏ –¥–∞–∂–µ –º–æ–∏—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤ –ø–æ–≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è!"
    
    def format_news_item(self, news: News, summary: Summary, comment: Optional[Comment] = None, index: int = 1) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å —Å —Å–∞–º–º–∞—Ä–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Args:
            news: –û–±—ä–µ–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏
            summary: –°–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            index: –ù–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
        """
        # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
        news_text = f"{index}. {news.title}\n{summary.text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if comment and comment.expert:
            expert_quote = self._format_expert_quote(comment)
            news_text += f"\n{expert_quote}\n"
        
        return news_text
    
    def _format_expert_quote(self, comment: Comment) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ —Å—Ç–∏–ª–µ Telegram.
        
        Args:
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        """
        expert = comment.expert
        expert_title = self._get_expert_title(expert.specialization)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–∏—Ç–∞—Ç—ã Telegram —Å —Å–∏–º–≤–æ–ª–æ–º >
        return f'> {comment.text}\n> - {expert.name}, {expert_title}'
    
    def _get_expert_title(self, specialization: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        
        Args:
            specialization: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –î–æ–ª–∂–Ω–æ—Å—Ç—å
        """
        titles = {
            'AI': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ò–ò',
            'ML': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
            'NLP': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
            'CV': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è',
            'Data Science': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ Data Science',
            'Research': '–Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            'Engineering': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'
        }
        
        return titles.get(specialization, '—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò')
    
    def _get_expert_name_in_correct_case(self, name: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
        
        Args:
            name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –ò–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        parts = name.split()
        if len(parts) < 2:
            return name
        
        first_name = parts[0]
        last_name = parts[1]
        
        # –°–∫–ª–æ–Ω—è–µ–º –∏–º—è (—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
        if first_name.endswith('–Ω'):
            first_name = first_name + '–æ–º'
        elif first_name.endswith('–π'):
            first_name = first_name[:-1] + '–µ–º'
        elif first_name.endswith('–∞'):
            first_name = first_name[:-1] + '–æ–π'
        elif first_name.endswith('—è'):
            first_name = first_name[:-1] + '–µ–π'
        else:
            first_name = first_name + '–æ–º'
        
        # –°–∫–ª–æ–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é (—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
        if last_name.endswith('–æ–≤'):
            last_name = last_name[:-2] + '–æ–≤—ã–º'
        elif last_name.endswith('–µ–≤'):
            last_name = last_name[:-2] + '–µ–≤—ã–º'
        elif last_name.endswith('–∏–Ω'):
            last_name = last_name[:-2] + '–∏–Ω—ã–º'
        elif last_name.endswith('–æ–≤–∞'):
            last_name = last_name[:-3] + '–æ–≤–æ–π'
        elif last_name.endswith('–µ–≤–∞'):
            last_name = last_name[:-3] + '–µ–≤–æ–π'
        elif last_name.endswith('–∏–Ω–∞'):
            last_name = last_name[:-3] + '–∏–Ω–æ–π'
        elif last_name.endswith('—Å–∫–∏–π'):
            last_name = last_name[:-4] + '—Å–∫–∏–º'
        elif last_name.endswith('—Ü–∫–∏–π'):
            last_name = last_name[:-4] + '—Ü–∫–∏–º'
        elif last_name.endswith('—Å–∫–∞—è'):
            last_name = last_name[:-4] + '–æ–π'
        elif last_name.endswith('—Ü–∫–∞—è'):
            last_name = last_name[:-4] + '–æ–π'
        elif last_name.endswith('–æ–π'):
            last_name = last_name[:-2] + '—ã–º'
        elif last_name.endswith('–∏–π'):
            last_name = last_name[:-2] + '–∏–º'
        elif last_name.endswith('–∞—è'):
            last_name = last_name[:-2] + '–æ–π'
        
        return f"{first_name} {last_name}"
    
    def _get_correct_preposition(self, name: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥ –¥–ª—è –∏–º–µ–Ω–∏ –≤ —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.
        
        Args:
            name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        parts = name.split()
        if len(parts) < 2:
            return "–≤–º–µ—Å—Ç–µ —Å"
        
        first_name = parts[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –∏–º–µ–Ω–∏
        if first_name.lower().startswith(('–∞', '–µ', '—ë', '–∏', '–æ', '—É', '—ã', '—ç', '—é', '—è')):
            return "–≤–º–µ—Å—Ç–µ —Å"
        else:
            return "–≤–º–µ—Å—Ç–µ —Å–æ"
    
    def format_sources(self, sources: List[str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        
        Args:
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        """
        if not sources:
            return ""
        
        if len(sources) == 1:
            sources_text = "–ò—Å—Ç–æ—á–Ω–∏–∫"
        else:
            sources_text = "–ò—Å—Ç–æ—á–Ω–∏–∫–∏"
        
        sources_text += ": " + ", ".join([f"@{source}" for source in sources])
        
        return f"‚û°Ô∏è {sources_text}"
    
    def format_conclusion(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.
        
        Returns:
            –¢–µ–∫—Å—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è
        """
        return """–ù–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å—ë! –ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å —É–¥–∏–≤–∏–ª–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?
–î–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç - –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–∏—Ä–∞ –ò–ò!"""
    
    def create_full_post(self, news_items: List[Dict[str, Any]], title: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–º–º–∞—Ä–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ü–æ–ª–Ω—ã–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        """
        if not news_items:
            return "üìù –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            post_title = self.format_post_title(title)
        else:
            post_title = self.format_post_title("–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –º–µ–Ω—è—é—Ç –º–∏—Ä: –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏")
        
        # –í–≤–µ–¥–µ–Ω–∏–µ
        expert_name = None
        if news_items and 'comment' in news_items[0] and news_items[0]['comment']:
            expert_name = news_items[0]['comment'].expert.name
        
        introduction = self.format_introduction(expert_name)
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_section = ""
        for i, item in enumerate(news_items, 1):
            news_text = self.format_news_item(
                news=item['news'],
                summary=item['summary'],
                comment=item.get('comment'),
                index=i
            )
            news_section += news_text + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if 'sources' in item and item['sources']:
                sources_text = self.format_sources(item['sources'])
                news_section += f"{sources_text}\n"
            
            news_section += "\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        conclusion = self.format_conclusion()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç
        full_post = f"{post_title}\n\n{introduction}\n\n{news_section}{conclusion}"
        
        return full_post
    
    def create_single_news_post(self, news: News, summary: Summary, comment: Optional[Comment] = None, sources: List[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            news: –ù–æ–≤–æ—Å—Ç—å
            summary: –°–∞–º–º–∞—Ä–∏
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        post_title = self.format_post_title(news.title)
        
        # –í–≤–µ–¥–µ–Ω–∏–µ
        expert_name = comment.expert.name if comment and comment.expert else None
        introduction = self.format_introduction(expert_name)
        
        # –ù–æ–≤–æ—Å—Ç—å
        news_text = self.format_news_item(news, summary, comment, 1)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        sources_text = ""
        if sources:
            sources_text = self.format_sources(sources) + "\n\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        conclusion = self.format_conclusion()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç
        full_post = f"{post_title}\n\n{introduction}\n\n{news_text}{sources_text}{conclusion}"
        
        return full_post
    
    def create_daily_digest(self, news_items: List[Dict[str, Any]]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        if not news_items:
            return "üìù –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        today = datetime.now().strftime("%d.%m.%Y")
        post_title = self.format_post_title(f"–î–∞–π–¥–∂–µ—Å—Ç –ò–ò-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {today}")
        
        # –í–≤–µ–¥–µ–Ω–∏–µ
        introduction = f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}. –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –º–∏—Ä–µ –ò–ò –∑–∞ —Å–µ–≥–æ–¥–Ω—è!"
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_section = ""
        for i, item in enumerate(news_items, 1):
            news_text = self.format_news_item(
                news=item['news'],
                summary=item['summary'],
                comment=item.get('comment'),
                index=i
            )
            news_section += news_text + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if 'sources' in item and item['sources']:
                sources_text = self.format_sources(item['sources'])
                news_section += f"{sources_text}\n"
            
            news_section += "\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        conclusion = f"–ù–∞ —ç—Ç–æ–º –≤—Å—ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_items)}\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç! üöÄ"
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        full_digest = f"{post_title}\n\n{introduction}\n\n{news_section}{conclusion}"
        
        return full_digest
    
    def format_daily_digest(self, news_list: List[News]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        if not news_list:
            return "üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest = f"""
üî• **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç AI News**

üëã –ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}, –∏ —Å–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å {len(news_list)} –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –º–∏—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        for i, news in enumerate(news_list, 1):
            digest += f"""
{i}. **{news.title}**

{news.content[:200]}...

"""
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        digest += f"""
üí° **–ß—Ç–æ –¥—É–º–∞—é—Ç —ç–∫—Å–ø–µ—Ä—Ç—ã:**
–ü–æ–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –Ω–æ–≤–æ—Å—Ç–∏, –Ω–æ —Å–∫–æ—Ä–æ —É –Ω–∞—Å –±—É–¥—É—Ç –∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!

‚û°Ô∏è **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** @ai_news, @tech_crunch, @venture_beat

üöÄ **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª** –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –º–∏—Ä–µ –ò–ò!

#AI #MachineLearning #TechNews #ZeBrains
        """
        
        return digest.strip()
    
    def format_weekly_digest(self, news_list: List[News]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        if not news_list:
            return "üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest = f"""
üî• **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç AI News**

üëã –ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}, –∏ —Å–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å {len(news_list)} –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –º–∏—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        for i, news in enumerate(news_list, 1):
            digest += f"""
{i}. **{news.title}**

{news.content[:200]}...

"""
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        digest += f"""
üí° **–ß—Ç–æ –¥—É–º–∞—é—Ç —ç–∫—Å–ø–µ—Ä—Ç—ã:**
–ü–æ–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –Ω–æ–≤–æ—Å—Ç–∏, –Ω–æ —Å–∫–æ—Ä–æ —É –Ω–∞—Å –±—É–¥—É—Ç –∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!

‚û°Ô∏è **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** @ai_news, @tech_crunch, @venture_beat

üöÄ **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª** –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –º–∏—Ä–µ –ò–ò!

#AI #MachineLearning #TechNews #ZeBrains
        """
        
        return digest.strip()
    
    def format_single_news(self, news: News) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
        
        Args:
            news: –ù–æ–≤–æ—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_emojis = {
            "openai": "ü§ñ",
            "gpt": "üß†", 
            "google": "üîç",
            "microsoft": "üíª",
            "ai": "ü§ñ",
            "ml": "üìä",
            "startup": "üöÄ",
            "investment": "üí∞",
            "research": "üî¨",
            "course": "üìö"
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_lower = news.title.lower()
        emoji = "üì∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        for keyword, emoji_icon in title_emojis.items():
            if keyword in title_lower:
                emoji = emoji_icon
                break
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
        formatted_news = f"""
{emoji} **{news.title}**

{news.content[:300]}...

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if hasattr(news, 'importance_score') and news.importance_score:
            formatted_news += f"‚≠ê **–í–∞–∂–Ω–æ—Å—Ç—å:** {news.importance_score}/10\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if hasattr(news, 'source_id') and news.source_id:
            formatted_news += f"üì° **–ò—Å—Ç–æ—á–Ω–∏–∫:** ID {news.source_id}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        if hasattr(news, 'created_at') and news.created_at:
            formatted_news += f"üìÖ **–î–∞—Ç–∞:** {news.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        formatted_news += """
#AI #MachineLearning #TechNews #ZeBrains

üöÄ **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ–± –ò–ò!
        """
        
        return formatted_news.strip() 