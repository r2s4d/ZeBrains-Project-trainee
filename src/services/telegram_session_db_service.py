#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram User API —Å–µ—Å—Å–∏—è–º–∏ –≤ –ë–î
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É bot_sessions —Å —É—Ä–æ–≤–Ω–µ–º –∑–∞—â–∏—Ç—ã 1+2

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç bot_sessions —Ç–∞–±–ª–∏—Ü—É (–Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é)
- session_type = 'telegram_user_session' 
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON –ø–æ–ª–µ data (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TelegramSecurityService
"""

import json
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from src.models.database import BotSession
from src.services.database_singleton import get_database_service
from src.services.telegram_security_service import TelegramSecurityService

logger = logging.getLogger(__name__)

class TelegramSessionDBService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram User API —Å–µ—Å—Å–∏—è–º–∏ –≤ –ë–î
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É bot_sessions:
    - session_type = 'telegram_user_session'
    - user_id = —Ö—ç—à –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞  
    - data = –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.db = get_database_service()
        self.security = TelegramSecurityService()
        self.session_type = 'telegram_user_session'
        logger.info("üóÑÔ∏è –°–µ—Ä–≤–∏—Å –ë–î —Å–µ—Å—Å–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def save_session(
        self, 
        session_name: str, 
        phone: str, 
        session_data: bytes,
        expires_in_days: int = 30
    ) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é Telegram User API —Å–µ—Å—Å–∏—é –≤ –ë–î
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AI_News_Curator")
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+79161234567")
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç Telethon (bytes)
            expires_in_days: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –≤ –¥–Ω—è—Ö
            
        Returns:
            int: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {session_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            data_json = self.security.create_session_data_json(phone, session_data)
            data_json_str = json.dumps(data_json, ensure_ascii=False)
            
            # –•—ç—à–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è user_id (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
            phone_hash = self.security.hash_phone_number(phone)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expires_at = datetime.utcnow() + timedelta(days=expires_in_days)
            
            with self.db.get_session() as db_session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –ñ–ï –ò–ú–ï–ù–ï–ú
                existing_session = db_session.query(BotSession).filter_by(
                    session_type=self.session_type,
                    chat_id=session_name  # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏, –ù–ï –ø–æ –Ω–æ–º–µ—Ä—É!
                ).first()
                
                if existing_session:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
                    existing_session.user_id = phone_hash  # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç—à –Ω–æ–º–µ—Ä–∞
                    existing_session.data = data_json_str
                    existing_session.status = 'active'
                    existing_session.expires_at = expires_at
                    existing_session.updated_at = datetime.utcnow()
                    
                    session_id = existing_session.id
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º '{session_name}' (ID: {session_id})")
                    
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    new_session = BotSession(
                        session_type=self.session_type,
                        user_id=phone_hash,  # –•—ç—à –Ω–æ–º–µ—Ä–∞, –ù–ï —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!
                        chat_id=session_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
                        data=data_json_str,
                        status='active',
                        expires_at=expires_at
                    )
                    
                    db_session.add(new_session)
                    db_session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                    
                    session_id = new_session.id
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_name} (ID: {session_id})")
                
                db_session.commit()
                return session_id
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ '{session_name}': {e}")
            raise
    
    async def load_session_by_name(self, session_name: str) -> Optional[bytes]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AI_News_Curator")
            
        Returns:
            bytes: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            with self.db.get_session() as db_session:
                session_record = db_session.query(BotSession).filter_by(
                    session_type=self.session_type,
                    chat_id=session_name,  # –ò–º—è —Å–µ—Å—Å–∏–∏ –≤ chat_id
                    status='active'
                ).first()
                
                if not session_record:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_name}")
                    return None
                
                return await self._extract_session_data(session_record, db_session)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ '{session_name}': {e}")
            return None
    
    async def load_session_by_phone(self, phone: str) -> Optional[bytes]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+79161234567")
            
        Returns:
            bytes: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            # –•—ç—à–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
            phone_hash = self.security.hash_phone_number(phone)
            
            with self.db.get_session() as db_session:
                session_record = db_session.query(BotSession).filter_by(
                    session_type=self.session_type,
                    user_id=phone_hash,
                    status='active'
                ).first()
                
                if not session_record:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone[:4]}******")
                    return None
                
                return await self._extract_session_data(session_record, db_session)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É: {e}")
            return None
    
    async def _extract_session_data(self, session_record: BotSession, db_session: Session) -> Optional[bytes]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∑–∞–ø–∏—Å–∏ –ë–î
        
        Args:
            session_record: –ó–∞–ø–∏—Å—å –∏–∑ –ë–î
            db_session: –°–µ—Å—Å–∏—è –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            
        Returns:
            bytes: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if session_record.expires_at and session_record.expires_at < datetime.utcnow():
                logger.warning(f"‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: {session_record.chat_id}")
                session_record.status = 'expired'
                db_session.commit()
                return None
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            data_json = json.loads(session_record.data)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if not self.security.validate_session_data(data_json):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_record.chat_id}")
                session_record.status = 'invalid'
                db_session.commit()
                return None
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = self.security.extract_session_data_from_json(data_json)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
            session_record.updated_at = datetime.utcnow()
            session_record.data = json.dumps(data_json, ensure_ascii=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db_session.commit()
            
            logger.info(f"üîì –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {session_record.chat_id}")
            return session_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
            try:
                data_json = json.loads(session_record.data)
                data_json["last_error"] = str(e)
                session_record.data = json.dumps(data_json, ensure_ascii=False)
                session_record.status = 'error'
                db_session.commit()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
            
            return None
    
    async def deactivate_session(self, session_name: str, reason: str = "manual") -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–ª–∏ –æ—à–∏–±–∫–µ)
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
            reason: –ü—Ä–∏—á–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        """
        try:
            with self.db.get_session() as db_session:
                session_record = db_session.query(BotSession).filter_by(
                    session_type=self.session_type,
                    chat_id=session_name
                ).first()
                
                if session_record:
                    session_record.status = 'deactivated'
                    session_record.updated_at = datetime.utcnow()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –¥–∞–Ω–Ω—ã–µ
                    try:
                        data_json = json.loads(session_record.data)
                        data_json["deactivation_reason"] = reason
                        data_json["deactivated_at"] = datetime.utcnow().isoformat()
                        session_record.data = json.dumps(data_json, ensure_ascii=False)
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å JSON
                    
                    db_session.commit()
                    logger.info(f"üîí –°–µ—Å—Å–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {session_name} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_name}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ '{session_name}': {e}")
            return False
    
    async def list_active_sessions(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram User API —Å–µ—Å—Å–∏–π
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–ë–ï–ó —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        """
        try:
            with self.db.get_session() as db_session:
                sessions = db_session.query(BotSession).filter_by(
                    session_type=self.session_type,
                    status='active'
                ).all()
                
                result = []
                for session in sessions:
                    try:
                        data_json = json.loads(session.data)
                        
                        session_info = {
                            "id": session.id,
                            "name": session.chat_id,
                            "phone_hash": data_json.get("phone_hash", "unknown")[:8] + "...",  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
                            "usage_count": data_json.get("usage_count", 0),
                            "created_at": session.created_at.isoformat() if session.created_at else None,
                            "last_used_at": session.updated_at.isoformat() if session.updated_at else None,
                            "expires_at": session.expires_at.isoformat() if session.expires_at else None,
                            "last_error": data_json.get("last_error")
                        }
                        result.append(session_info)
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session.id}: {e}")
                        continue
                
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(result)}")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
            return []
    
    async def cleanup_expired_sessions(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            with self.db.get_session() as db_session:
                # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                expired_sessions = db_session.query(BotSession).filter(
                    BotSession.session_type == self.session_type,
                    BotSession.expires_at < datetime.utcnow(),
                    BotSession.status == 'active'
                ).all()
                
                count = 0
                for session in expired_sessions:
                    session.status = 'expired'
                    session.updated_at = datetime.utcnow()
                    count += 1
                
                db_session.commit()
                
                if count > 0:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {count}")
                
                return count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {e}")
            return 0
    
    async def get_session_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º Telegram User API —Å–µ—Å—Å–∏—è–º
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        """
        try:
            with self.db.get_session() as db_session:
                # –°—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                stats = {
                    "active": 0,
                    "expired": 0,
                    "deactivated": 0,
                    "error": 0,
                    "total": 0
                }
                
                sessions = db_session.query(BotSession).filter_by(
                    session_type=self.session_type
                ).all()
                
                total_usage = 0
                for session in sessions:
                    stats["total"] += 1
                    stats[session.status] = stats.get(session.status, 0) + 1
                    
                    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    try:
                        data_json = json.loads(session.data)
                        total_usage += data_json.get("usage_count", 0)
                    except:
                        pass
                
                stats["total_usage"] = total_usage
                stats["average_usage"] = total_usage / max(stats["total"], 1)
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π: {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {stats['total']} –æ–±—â–∏—Ö")
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
