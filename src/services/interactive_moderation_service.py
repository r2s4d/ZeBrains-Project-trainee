#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interactive Moderation Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏ Telegram.
"""

import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
from src.services.bot_session_service import bot_session_service

logger = logging.getLogger(__name__)

@dataclass
class ModerationSession:
    """–°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id: int
    chat_id: int
    message_id: int
    news_items: List[Dict[str, Any]]
    removed_news_ids: List[int]
    created_at: datetime
    is_completed: bool = False

class InteractiveModerationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BotSessionService –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        self.session_service = bot_session_service
        logger.info("‚úÖ InteractiveModerationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _save_moderation_session(self, session: ModerationSession) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î.
        
        Args:
            session: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            session_data = {
                'user_id': session.user_id,
                'chat_id': session.chat_id,
                'message_id': session.message_id,
                'news_items': session.news_items,
                'removed_news': session.removed_news_ids,
                'is_completed': session.is_completed,
                'created_at': session.created_at.isoformat() if session.created_at else datetime.now().isoformat()
            }
            
            return await self.session_service.save_session(
                session_type='moderation_session',
                user_id=str(session.user_id),
                data=session_data,
                expires_at=datetime.now() + timedelta(hours=4)  # 4 —á–∞—Å–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {session.user_id}: {e}")
            return False
    
    async def _get_moderation_session(self, user_id: int) -> Optional[ModerationSession]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            ModerationSession –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            session_data = await self.session_service.get_session_data(
                session_type='moderation_session',
                user_id=str(user_id)
            )
            
            if not session_data:
                return None
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç ModerationSession –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î
            session = ModerationSession(
                user_id=session_data['user_id'],
                chat_id=session_data['chat_id'],
                message_id=session_data['message_id'],
                news_items=session_data['news_items'],
                removed_news_ids=session_data['removed_news'],
                is_completed=session_data['is_completed'],
                created_at=datetime.fromisoformat(session_data['created_at']) if session_data.get('created_at') else datetime.now()
            )
            
            return session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {user_id}: {e}")
            return None
    
    async def _delete_moderation_session(self, user_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            return await self.session_service.delete_session(
                session_type='moderation_session',
                user_id=str(user_id)
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {user_id}: {e}")
            return False
    
    async def create_moderation_session(self, user_id: int, chat_id: int, message_id: int, news_items: List[Dict[str, Any]]) -> ModerationSession:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∫—É—Ä–∞—Ç–æ—Ä–∞
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–º
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            ModerationSession: –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        session = ModerationSession(
            user_id=user_id,
            chat_id=chat_id,
            message_id=message_id,
            news_items=news_items,
            removed_news_ids=[],
            created_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î –≤–º–µ—Å—Ç–æ –ø–∞–º—è—Ç–∏
        await self._save_moderation_session(session)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return session
    
    async def remove_news_from_session(self, user_id: int, news_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        session = await self._get_moderation_session(user_id)
        if not session:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω–∞
        if news_id in session.removed_news_ids:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
        session.removed_news_ids.append(news_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        await self._save_moderation_session(session)
        logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True
    
    async def get_remaining_news(self, user_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–µ—Å—Å–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        session = await self._get_moderation_session(user_id)
        if not session:
            return []
        
        remaining_news = [
            news for news in session.news_items 
            if news['id'] not in session.removed_news_ids
        ]
        
        return remaining_news
    
    async def complete_moderation(self, user_id: int) -> Optional[List[Dict[str, Any]]]:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[List]: –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        session = await self._get_moderation_session(user_id)
        if not session:
            return None
        
        session.is_completed = True
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        approved_news = await self.get_remaining_news(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        await self._save_moderation_session(session)
        
        # –ù–ï —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
        # –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É
        
        logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ–¥–æ–±—Ä–µ–Ω–æ {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return approved_news
    
    async def cleanup_moderation_session(self, user_id: int):
        """
        –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        success = await self._delete_moderation_session(user_id)
        if success:
            logger.info(f"üßπ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç—É")
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

