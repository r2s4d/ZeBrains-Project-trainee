#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interactive Moderation Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏ Telegram.
"""

import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class ModerationSession:
    """–°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id: int
    chat_id: int
    message_id: int
    news_items: List[Dict[str, Any]]
    removed_news_ids: List[int]
    created_at: datetime
    is_completed: bool = False

class InteractiveModerationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.active_sessions: Dict[int, ModerationSession] = {}
        logger.info("‚úÖ InteractiveModerationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_moderation_session(self, user_id: int, chat_id: int, message_id: int, news_items: List[Dict[str, Any]]) -> ModerationSession:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∫—É—Ä–∞—Ç–æ—Ä–∞
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–º
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            ModerationSession: –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        session = ModerationSession(
            user_id=user_id,
            chat_id=chat_id,
            message_id=message_id,
            news_items=news_items,
            removed_news_ids=[],
            created_at=datetime.now()
        )
        
        self.active_sessions[user_id] = session
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return session
    
    def remove_news_from_session(self, user_id: int, news_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if user_id not in self.active_sessions:
            return False
        
        session = self.active_sessions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω–∞
        if news_id in session.removed_news_ids:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
        session.removed_news_ids.append(news_id)
        logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True
    
    def get_remaining_news(self, user_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–µ—Å—Å–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if user_id not in self.active_sessions:
            return []
        
        session = self.active_sessions[user_id]
        remaining_news = [
            news for news in session.news_items 
            if news['id'] not in session.removed_news_ids
        ]
        
        return remaining_news
    
    def complete_moderation(self, user_id: int) -> Optional[List[Dict[str, Any]]]:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[List]: –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ None
        """
        if user_id not in self.active_sessions:
            return None
        
        session = self.active_sessions[user_id]
        session.is_completed = True
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        approved_news = self.get_remaining_news(user_id)
        
        # –ù–ï —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
        # –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É
        
        logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ–¥–æ–±—Ä–µ–Ω–æ {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return approved_news
    
    def get_session_status(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[Dict]: –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
        """
        if user_id not in self.active_sessions:
            return None
        
        session = self.active_sessions[user_id]
        
        return {
            "total_news": len(session.news_items),
            "removed_news": len(session.removed_news_ids),
            "remaining_news": len(self.get_remaining_news(user_id)),
            "is_completed": session.is_completed,
            "created_at": session.created_at
        }
    
    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö
        """
        current_time = datetime.now()
        sessions_to_remove = []
        
        for user_id, session in self.active_sessions.items():
            age = current_time - session.created_at
            if age.total_seconds() > max_age_hours * 3600:
                sessions_to_remove.append(user_id)
        
        for user_id in sessions_to_remove:
            del self.active_sessions[user_id]
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if sessions_to_remove:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(sessions_to_remove)} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    def cleanup_moderation_session(self, user_id: int):
        """
        –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.active_sessions:
            del self.active_sessions[user_id]
            logger.info(f"üßπ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç—É")
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

    async def remove_news_and_cleanup_digest(self, user_id: int, news_id: int, chat_id: str, morning_digest_service) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞
            morning_digest_service: –°–µ—Ä–≤–∏—Å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
            success = self.remove_news_from_session(user_id, news_id)
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å {news_id} –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if morning_digest_service:
                cleanup_success = await morning_digest_service.delete_digest_messages(chat_id)
                if cleanup_success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏
            remaining_news = self.get_remaining_news(user_id)
            logger.info(f"üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(remaining_news)}")
            
            return remaining_news
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return []
