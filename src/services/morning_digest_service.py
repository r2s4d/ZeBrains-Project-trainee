#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Morning Digest Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞–º.
"""

import logging
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import asyncio
from telegram import InlineKeyboardButton
from src.config import config
from src.models import DigestSession, engine
from src.utils.message_splitter import MessageSplitter
from sqlalchemy.orm import Session as DBSession

logger = logging.getLogger(__name__)

@dataclass
class DigestNews:
    """–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    id: int
    title: str
    summary: str
    source_links: str
    published_at: datetime
    curator_id: Optional[str] = None

@dataclass
class MorningDigest:
    """–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç."""
    date: datetime
    news_count: int
    news_items: List[DigestNews]
    curator_id: Optional[str] = None

class MorningDigestService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –§–¢.
    """
    
    def __init__(self, 
                 database_service,
                 ai_analysis_service,
                 curators_chat_id: str = None,
                 expert_selection_service=None,
                 bot=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            database_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            ai_analysis_service: –°–µ—Ä–≤–∏—Å AI –∞–Ω–∞–ª–∏–∑–∞
            curator_service: –°–µ—Ä–≤–∏—Å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            expert_selection_service: –°–µ—Ä–≤–∏—Å –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            bot: Telegram bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            curators_chat_id: ID —á–∞—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        """
        self.db = database_service
        self.database_service = database_service  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.ai_service = ai_analysis_service

        self.expert_selection_service = expert_selection_service
        self.bot = bot
        self.curators_chat_id = curators_chat_id or config.telegram.curator_chat_id
        
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # self.digest_sessions = {}  # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏
        self.db_engine = engine  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å DigestSession
        
        logger.info(f"‚úÖ MorningDigestService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {curators_chat_id})")
    
    # ============================================================================
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ë–î (PostgreSQL DigestSession)
    # ============================================================================
    
    def _save_digest_session(self, chat_id: str, message_ids: List[int], news_count: int):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ PostgreSQL.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_ids: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞
            news_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
        """
        try:
            logger.info(f"üíæ [–ë–î] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id} (—Ç–∏–ø: {type(chat_id)})")
            logger.info(f"üíæ [–ë–î] ID —Å–æ–æ–±—â–µ–Ω–∏–π: {message_ids}")
            
            with DBSession(bind=self.db_engine) as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                existing_session = session.query(DigestSession).filter(
                    DigestSession.chat_id == str(chat_id),
                    DigestSession.is_active == True
                ).first()
                
                if existing_session:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                    existing_session.message_ids = json.dumps(message_ids)
                    existing_session.news_count = news_count
                    existing_session.updated_at = datetime.now()
                    logger.info(f"üîÑ [–ë–î] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è ID={existing_session.id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    new_session = DigestSession(
                        chat_id=str(chat_id),
                        message_ids=json.dumps(message_ids),
                        news_count=news_count,
                        is_active=True
                    )
                    session.add(new_session)
                    logger.info(f"‚ûï [–ë–î] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
                
                session.commit()
                logger.info(f"‚úÖ [–ë–î] –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π, {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå [–ë–î] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            raise e
    
    def get_digest_session(self, chat_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ PostgreSQL.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
        """
        try:
            logger.info(f"üîç [–ë–î] –ò—â–µ–º —Å–µ—Å—Å–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id}")
            
            with DBSession(bind=self.db_engine) as session:
                digest_session = session.query(DigestSession).filter(
                    DigestSession.chat_id == str(chat_id),
                    DigestSession.is_active == True
                ).first()
                
                if digest_session:
                    session_data = {
                        'chat_id': digest_session.chat_id,
                        'message_ids': json.loads(digest_session.message_ids),
                        'news_count': digest_session.news_count,
                        'created_at': digest_session.created_at,
                        'is_active': digest_session.is_active
                    }
                    logger.info(f"‚úÖ [–ë–î] –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {len(session_data['message_ids'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    return session_data
                else:
                    logger.warning(f"‚ö†Ô∏è [–ë–î] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå [–ë–î] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return None
    
    def clear_digest_session(self, chat_id: str):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ PostgreSQL.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        try:
            logger.info(f"üóëÔ∏è [–ë–î] –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id}")
            
            with DBSession(bind=self.db_engine) as session:
                digest_session = session.query(DigestSession).filter(
                    DigestSession.chat_id == str(chat_id),
                    DigestSession.is_active == True
                ).first()
                
                if digest_session:
                    digest_session.is_active = False
                    digest_session.updated_at = datetime.now()
                    session.commit()
                    logger.info(f"‚úÖ [–ë–î] –°–µ—Å—Å–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è [–ë–î] –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    
        except Exception as e:
            logger.error(f"‚ùå [–ë–î] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    
    async def create_morning_digest(self, curator_id: Optional[str] = None) -> MorningDigest:
        """
        –°–æ–∑–¥–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
        
        Args:
            curator_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ None - –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤)
            
        Returns:
            MorningDigest: –ì–æ—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        try:
            logger.info("üåÖ –°–æ–∑–¥–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            news_items = await self._get_recent_news(hours=config.timeout.news_parsing_interval * 24)
            
            if not news_items:
                logger.info("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return self._create_empty_digest()
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            digest_news = []
            
            for news in news_items:
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º AI –∏–ª–∏ fallback)
                summary = await self._create_news_summary(news)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î
                await self._save_summary_to_db(news.id, summary)

                source_links = news.source_url or "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"
                logger.info(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: '{news.source_url}' -> '{source_links}'")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
                digest_item = DigestNews(
                    id=news.id,
                    title=news.title,
                    summary=summary,
                    source_links=source_links,
                    published_at=news.published_at or news.created_at,
                    curator_id=news.curator_id
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                logger.info(f"üì∞ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞: ID={news.id}, Title='{news.title[:50]}...'")
                    
                digest_news.append(digest_item)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest = MorningDigest(
                date=datetime.now(),
                news_count=len(digest_news),
                news_items=digest_news,
                curator_id=curator_id
            )
            
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {digest.news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            return digest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return self._create_empty_digest()
    
    async def _get_recent_news(self, hours: int = None) -> List[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤ —Å AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            
        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if hours is None:
                hours = config.timeout.news_parsing_interval * 24
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            start_time = datetime.now() - timedelta(hours=hours)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.db:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
                    recent_news = await self.db.get_news_since(start_time)
                    
                    if recent_news:
                        logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(recent_news)} —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                        filtered_news = await self._filter_news_by_relevance(recent_news)
                        
                        logger.info(f"üîç –ü–æ—Å–ª–µ AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_news)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
                        return filtered_news
                    else:
                        logger.info(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return []
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î: {e}")
                    logger.info("üì∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
                    return []
            else:
                logger.warning("‚ö†Ô∏è Database service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def _filter_news_by_relevance(self, news_list: List[Any]) -> List[Any]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ò–ò-–¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            List: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            if not news_list:
                return []
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            filtered_news = []
            total_news = len(news_list)
            
            for i, news in enumerate(news_list, 1):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                    title = getattr(news, 'title', '') or getattr(news, 'raw_content', '')[:100]
                    content = getattr(news, 'content', '') or getattr(news, 'raw_content', '')
                    
                    if not title and not content:
                        logger.warning(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å {i}/{total_news}: –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ AI
                    if self.ai_service:
                        try:
                            relevance_score = await self.ai_service.analyze_news_relevance(title, content)
                            
                            if relevance_score is not None and relevance_score >= 6:
                                filtered_news.append(news)
                                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {i}/{total_news}: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {relevance_score}/10 - –í–ö–õ–Æ–ß–ï–ù–ê")
                            else:
                                logger.info(f"‚ùå –ù–æ–≤–æ—Å—Ç—å {i}/{total_news}: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {relevance_score}/10 - –ò–°–ö–õ–Æ–ß–ï–ù–ê")
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏ {i}/{total_news}: {e}")
                            # –ü—Ä–∏ –æ—à–∏–±–∫–µ AI –≤–∫–ª—é—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å (fallback)
                            filtered_news.append(news)
                            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {i}/{total_news}: –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ fallback (–æ—à–∏–±–∫–∞ AI)")
                    else:
                        # –ï—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                        logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                        filtered_news = news_list
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {i}/{total_news}: {e}")
                    continue
            
            logger.info(f"üîç AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(filtered_news)}/{total_news} –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä")
            return filtered_news
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            logger.warning("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return news_list
    
    async def _create_news_summary(self, news: Any) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
        
        Args:
            news: –û–±—ä–µ–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (50-100 —Å–ª–æ–≤)
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            if self.ai_service:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é AI
                    summary = await self.ai_service.generate_summary_only(
                        title=news.title,
                        content=news.content
                    )
                    
                    if summary and summary.strip():
                        logger.info(f"‚úÖ AI —Å–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
                        return summary.strip()
                    else:
                        logger.warning("‚ö†Ô∏è AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            else:
                logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏
            return self._create_fallback_summary(news)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
            return self._create_fallback_summary(news)
    
    async def _save_summary_to_db(self, news_id: int, summary: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            summary: –°–∞–º–º–∞—Ä–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            if self.database_service:
                with self.database_service.get_session() as session:
                    from src.models.database import News
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
                    news = session.query(News).filter(News.id == news_id).first()
                    if news:
                        news.ai_summary = summary
                        session.commit()
                        logger.info(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î: {e}")
    
    def _create_fallback_summary(self, news: Any) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ AI.
        
        Args:
            news: –û–±—ä–µ–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ü—Ä–æ—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏
        """
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = f"{news.title}. {news.content}"
            sentences = content.split('.')[:3]
            
            # –û—á–∏—â–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            summary = '. '.join([s.strip() for s in sentences if s.strip()]) + '.'
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(summary) > 100:
                summary = summary[:97] + '...'
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback —Å–∞–º–º–∞—Ä–∏: {e}")
            return f"–ù–æ–≤–æ—Å—Ç—å: {news.title[:50]}..."
    
    def format_digest_for_telegram(self, digest: MorningDigest) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è Telegram —Å–æ–≥–ª–∞—Å–Ω–æ –§–¢.
        
        Args:
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        try:
            if digest.news_count == 0:
                return "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            formatted_digest = f"""
üåÖ <b>–£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ò–ò –ù–û–í–û–°–¢–ï–ô</b>
üìÖ {digest.date.strftime('%d.%m.%Y %H:%M')}
üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {digest.news_count}

"""
            
            # –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ –§–¢ - —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–∞–º–º–∞—Ä–∏, –∏—Å—Ç–æ—á–Ω–∏–∫)
            for i, news in enumerate(digest.news_items, 1):
                logger.info(f"üîç –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}: source_links='{news.source_links}'")
                formatted_digest += f"""
<b>{i}. {news.title}</b>
üìù {news.summary}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news.source_links if news.source_links else '–ù–µ —É–∫–∞–∑–∞–Ω'}

"""
            
            # –§—É—Ç–µ—Ä —Å –≤–æ–ø—Ä–æ—Å–æ–º –∫—É—Ä–∞—Ç–æ—Ä–∞–º (–ø–æ –§–¢)
            formatted_digest += """
<b>–í–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º:</b> –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º?

ü§ñ <i>–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π PR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ZeBrains</i>
"""
            
            return formatted_digest.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
    
    async def send_digest_to_curators_chat(self, digest: MorningDigest, chat_id: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –§–¢.
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram.
        
        Args:
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {chat_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
            message_text, buttons = self.create_interactive_digest_message(digest)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = config.message.max_digest_length - 100  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è HTML —Ç–µ–≥–æ–≤
            
            if len(message_text) <= max_length:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                await self._send_single_message(chat_id, message_text, buttons)
                logger.info(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
                await self._send_split_messages(chat_id, digest)
                logger.info(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º)")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False

    async def _send_single_message(self, chat_id: str, message_text: str, buttons: list) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            from telegram import InlineKeyboardMarkup
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            cleaned_text = self._clean_html_text(message_text)
            
            if self.bot:
                message = await self.bot.send_message(
                    chat_id=chat_id,
                    text=cleaned_text,
                    reply_markup=reply_markup
                )
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ bot")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if message and message.message_id:
                    self._save_digest_session(chat_id, [message.message_id], 0)
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
            else:
                logger.error("‚ùå Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def _send_split_messages(self, chat_id: str, digest: MorningDigest) -> bool:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
            parts = self._split_message_by_news(digest)
            
            if not parts:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏")
                return False
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ {len(parts)} —á–∞—Å—Ç—è—Ö")
            
            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞
            message_ids = []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            for i, part in enumerate(parts):
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                part_buttons = []
                
                for news_idx in part['buttons']:
                    news = digest.news_items[news_idx]
                    if hasattr(news, 'id') and news.id is not None:
                        button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {news_idx + 1}"
                        callback_data = f"remove_news_{news.id}"
                        from telegram import InlineKeyboardButton
                        part_buttons.append([
                            InlineKeyboardButton(button_text, callback_data=callback_data)
                        ])
                        logger.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É –¥–ª—è —á–∞—Å—Ç–∏ {i+1}: {button_text} -> {callback_data}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è" —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(parts) - 1:
                    from telegram import InlineKeyboardButton
                    approve_button = InlineKeyboardButton(
                        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
                        callback_data="approve_remaining"
                    )
                    part_buttons.append([approve_button])
                    logger.info(f"üîò –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if part_buttons:
                    if self.bot:
                        from telegram import InlineKeyboardMarkup
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
                        cleaned_text = self._clean_html_text(part['text'])
                        message = await self.bot.send_message(
                            chat_id=chat_id,
                            text=cleaned_text,
                            reply_markup=InlineKeyboardMarkup(part_buttons)
                        )
                        message_ids.append(message.message_id)
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i+1} –∏–∑ {len(parts)} —Å {len(part_buttons)} –∫–Ω–æ–ø–∫–∞–º–∏")
                    else:
                        await self._send_single_message(chat_id, part['text'], part_buttons)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                    if self.bot:
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
                        cleaned_text = self._clean_html_text(part['text'])
                        message = await self.bot.send_message(
                            chat_id=chat_id,
                            text=cleaned_text
                        )
                        message_ids.append(message.message_id)
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i+1} –∏–∑ {len(parts)} –±–µ–∑ –∫–Ω–æ–ø–æ–∫")
                    else:
                        logger.error("‚ùå Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —á–∞—Å—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
            if message_ids:
                self._save_digest_session(chat_id, message_ids, digest.news_count)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ù–ï –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∑–¥–µ—Å—å - –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–±–∏—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False

    def _clean_html_text(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö HTML —Ç–µ–≥–æ–≤, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫, –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ–≥–∏.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ HTML —Ç–µ–≥–∞–º–∏
        """
        import re
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Ç–∏–ø–∞ <2>, <3>, <2,> –∏ —Ç.–¥.
        text = re.sub(r'<\d+[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã < –∏ > –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
        text = re.sub(r'[<>]', '', text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        # –ü–æ—Å–ª–µ —Ç–æ—á–µ–∫, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        text = re.sub(r'([.!?])\s+', r'\1\n\n', text)
        
        # –ü–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏–π
        text = re.sub(r':\s+', ':\n', text)
        
        # –ü–æ—Å–ª–µ —Ç–∏—Ä–µ
        text = re.sub(r'‚Äî\s+', '‚Äî\n', text)
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n{3,}', '\n\n', text)
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'[ \t]+', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        lines = text.split('\n')
        lines = [line.strip() for line in lines]
        text = '\n'.join(lines)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        
        return text

    def _split_message_by_news(self, digest: MorningDigest, max_length: int = None) -> list:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ.
        
        Args:
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        """
        if not digest.news_items:
            return []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        header = f"""
üåÖ –£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô
üìÖ –î–∞—Ç–∞: {digest.date.strftime('%d.%m.%Y')}
üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {digest.news_count}

üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:
"""
        
        # –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        def format_news(i: int, news: DigestNews) -> str:
            return f"""
{i+1}. {news.summary}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news.source_links if news.source_links else '–ù–µ —É–∫–∞–∑–∞–Ω'}

"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
        parts = MessageSplitter.split_by_items(
            items=digest.news_items,
            header=header,
            item_formatter=format_news,
            max_length=max_length,
            include_metadata=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
        if parts:
            footer = """
üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
            parts[-1]['text'] += footer
        
        return parts
    
    async def send_digest_to_curators_chat_auto(self, digest: MorningDigest) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤ —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ –§–¢).
        
        Args:
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        return await self.send_digest_to_curators_chat(digest, self.curators_chat_id)
    
    async def send_digest_to_specific_curator(self, digest: MorningDigest, curator_id: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É.
        
        Args:
            digest: –û–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            curator_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∫—É—Ä–∞—Ç–æ—Ä—É {curator_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
            with self.database_service.get_session() as session:
                from src.models.database import Curator
                curator = session.query(Curator).filter(Curator.id == curator_id).first()
            
            if not curator:
                logger.error(f"‚ùå –ö—É—Ä–∞—Ç–æ—Ä {curator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
            message_text, buttons = self.create_interactive_digest_message(digest)
            
            # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup
            from telegram import InlineKeyboardMarkup
            reply_markup = InlineKeyboardMarkup(buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ bot –∏–ª–∏ notification service
            if self.bot:
                await self.bot.send_message(
                    chat_id=curator.telegram_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É {curator.name} —á–µ—Ä–µ–∑ bot")
            else:
                logger.error("‚ùå Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–π–¥–∂–µ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä—É {curator_id}: {e}")
            return False
    
    def _create_empty_digest(self) -> MorningDigest:
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –¥–∞–π–¥–∂–µ—Å—Ç."""
        return MorningDigest(
            date=datetime.now(),
            news_count=0,
            news_items=[],
            curator_id=None
        )
    
    async def get_digest_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            last_24h = await self._get_recent_news(hours=config.timeout.news_parsing_interval * 24)
            last_7d = await self._get_recent_news(hours=config.timeout.news_parsing_interval * 24 * 7)
            last_30d = await self._get_recent_news(hours=config.timeout.news_parsing_interval * 24 * 30)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                "last_24h": {
                    "count": len(last_24h)
                },
                "last_7d": {
                    "count": len(last_7d)
                },
                "last_30d": {
                    "count": len(last_30d)
                }
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def create_interactive_digest_message(self, digest: MorningDigest) -> tuple[str, list]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–º –∏ inline –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            digest: –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            tuple: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ø–∏—Å–æ–∫ inline –∫–Ω–æ–ø–æ–∫)
        """
        if not digest.news_items:
            return "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        header = f"""
üåÖ –£–¢–†–ï–ù–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô
üìÖ –î–∞—Ç–∞: {digest.date.strftime('%d.%m.%Y')}
üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {digest.news_count}

üìã –ù–û–í–û–°–¢–ò –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò:
"""
        
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_list = ""
        for i, news in enumerate(digest.news_items, 1):
            logger.info(f"üîç –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}: source_links='{news.source_links}'")
            news_list += f"""
{i}. {news.summary}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {news.source_links if news.source_links else '–ù–µ —É–∫–∞–∑–∞–Ω'}

"""
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        footer = """
üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–Ω—É–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è"
"""
        
        message_text = header + news_list + footer
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        buttons = []
        logger.info(f"üîò –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è {len(digest.news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        for i, news in enumerate(digest.news_items):
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å {i+1}: ID={getattr(news, 'id', 'None')}, Title='{getattr(news, 'title', 'None')[:30]}...'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å—Ç—å ID
            if not hasattr(news, 'id') or news.id is None:
                logger.warning(f"‚ö†Ô∏è –£ –Ω–æ–≤–æ—Å—Ç–∏ {i+1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É")
                continue
                
            button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}"
            callback_data = f"remove_news_{news.id}"
            logger.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: {button_text} -> {callback_data}")
            buttons.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=callback_data
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
        approve_button = InlineKeyboardButton(
            "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", 
            callback_data="approve_remaining"
        )
        logger.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è: approve_remaining")
        buttons.append([approve_button])
        
        logger.info(f"üîò –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")
        return message_text, buttons

    
    
    
    async def delete_digest_messages(self, chat_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ü–†–û–°–¢–£–Æ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞: {chat_id}")
            
            if not self.bot:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return False
            
            # –ü–†–û–°–¢–û–ï —Ä–µ—à–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            total_deleted = await self._delete_all_digest_messages_in_chat(chat_id)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ë–î)
            self.clear_digest_session(chat_id)
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            logger.info(f"‚úÖ –ü–†–û–°–¢–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ {total_deleted} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return total_deleted > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False
    

    async def _delete_all_digest_messages_in_chat(self, chat_id: str) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —á–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ü–†–û–°–¢–û–ô –ø–æ–¥—Ö–æ–¥.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            if not self.bot:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return 0
            
            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ü–†–û–°–¢–£–Æ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (best-effort)
            try:
                chat_info = await self.bot.get_chat(chat_id)
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: {chat_info.title if hasattr(chat_info, 'title') else chat_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {e}")
            
            deleted_count = 0
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
            session = self.get_digest_session(chat_id)
            if session and session.get('message_ids'):
                logger.info(f"üîç –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: {session['message_ids']}")
                for msg_id in session['message_ids']:
                    try:
                        await self.bot.delete_message(
                            chat_id=int(chat_id), 
                            message_id=int(msg_id)
                        )
                        deleted_count += 1
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {msg_id}")
                        await asyncio.sleep(0.1)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {msg_id}: {e}")
                        continue
            
            if deleted_count == 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            logger.info(f"‚úÖ –ü–†–û–°–¢–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            return 0



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üåÖ Morning Digest Service - –¢–µ—Å—Ç")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º mock —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from unittest.mock import Mock
    
    mock_db = Mock()
    mock_ai = Mock()
    mock_bot = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = MorningDigestService(
        database_service=mock_db,
        ai_analysis_service=mock_ai,
        bot=mock_bot
    )
    
    print("‚úÖ MorningDigestService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üìã –§—É–Ω–∫—Ü–∏–∏:")
    print("   - create_morning_digest()")
    print("   - format_digest_for_telegram()")
    print("   - send_digest_to_curators()")
    print("   - send_digest_to_specific_curator()")
    print("   - get_digest_statistics()")
