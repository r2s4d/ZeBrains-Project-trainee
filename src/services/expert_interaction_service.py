#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Expert Interaction Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
"""

import logging
import asyncio
from typing import List, Dict, Any, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

@dataclass
class ExpertComment:
    """–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫ –Ω–æ–≤–æ—Å—Ç–∏."""
    news_id: int
    comment: str
    timestamp: datetime
    expert_id: int

@dataclass
class ExpertSession:
    """–°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    expert_id: int
    news_ids: Set[int]  # ID –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    commented_news: Set[int]  # ID –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    start_time: datetime
    last_reminder: datetime
    reminder_count: int = 0
    news_items: List[Dict] = None  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    selected_news_id: int = None # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_ids: List[int] = None  # ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

class ExpertInteractionService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏.
    """
    
    def __init__(self, bot: Bot, curator_approval_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
            curator_approval_service: –°–µ—Ä–≤–∏—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏
        """
        self.bot = bot
        self.curator_approval_service = curator_approval_service
        self.active_sessions: Dict[int, ExpertSession] = {}  # expert_id -> session
        self.comments: List[ExpertComment] = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.REMINDER_INTERVAL = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.CURATOR_ALERT_THRESHOLD = 14400  # 4 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info("‚úÖ ExpertInteractionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if curator_approval_service:
            logger.info("‚úÖ CuratorApprovalService –ø–µ—Ä–µ–¥–∞–Ω –≤ ExpertInteractionService")
    
    def _clean_html_text(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–ª–µ–∑–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTML —Ç–µ–≥–∏ –¥–ª—è Telegram (HTML parse_mode)
        allowed_tags = ['b', 'i', 'u', 's', 'code', 'pre', 'a', 'br', 'p']
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        # –≠—Ç–æ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —á–µ–º –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–≥
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ —Ç–µ–≥–∏
        for tag in allowed_tags:
            text = re.sub(f'<{tag}[^>]*>', f'<{tag}>', text)
            text = re.sub(f'</{tag}[^>]*>', f'</{tag}>', text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ allowed_tags
        text = re.sub(r'<(?!/?(?:' + '|'.join(allowed_tags) + '))[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "500m.")
        text = re.sub(r'<[^>]*[0-9]+[a-zA-Z]*[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        text = re.sub(r'<[^>]*[^a-zA-Z0-9\s/<>][^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
        text = re.sub(r'<[^>]*></[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        text = re.sub(r'<[^>]*$', '', text)
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        
        return text
    
    async def send_news_to_expert(self, expert_id: int, news_items: List[Dict], expert_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            expert_name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            news_ids = {news['id'] for news in news_items}
            session = ExpertSession(
                expert_id=expert_id,
                news_ids=news_ids,
                commented_news=set(),
                start_time=datetime.now(),
                last_reminder=datetime.now(),
                message_ids=[]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            session.news_items = news_items
            
            self.active_sessions[expert_id] = session
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = self._create_welcome_message(expert_name)
            await self.bot.send_message(
                chat_id=expert_id,
                text=welcome_text,
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏)
            news_parts = self._split_news_list_for_expert(news_items)
            
            if len(news_parts) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                news_text = news_parts[0]['text']
                keyboard = self._create_comment_buttons_for_part(news_parts[0]['news_indices'], news_items)
                
                message = await self.bot.send_message(
                    chat_id=expert_id,
                    text=news_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
                session.message_ids.append(message.message_id)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –æ—Ç–¥–µ–ª—å–Ω–æ
                for i, part in enumerate(news_parts):
                    keyboard = self._create_comment_buttons_for_part(part['news_indices'], news_items)
                    
                    message = await self.bot.send_message(
                        chat_id=expert_id,
                        text=part['text'],
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
                    session.message_ids.append(message.message_id)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            asyncio.create_task(self._start_reminder_system(expert_id))
            
            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç—É {expert_name} (ID: {expert_id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {e}")
            return False
    
    def _create_welcome_message(self, expert_name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¢–ó."""
        return f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {expert_name}!</b>

–í–∞—Å –≤—ã–±—Ä–∞–ª–∏ <b>—ç–∫—Å–ø–µ—Ä—Ç–æ–º –¥–Ω—è</b> –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å—Ñ–µ—Ä–µ –ò–ò.

üìã <b>–¢–ó –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b>

‚Ä¢ <b>–û–±—ä–µ–º:</b> 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-80 —Å–ª–æ–≤)
‚Ä¢ <b>–°—Ç–∏–ª—å:</b> –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
‚Ä¢ <b>–ë–µ–∑ –∂–∞—Ä–≥–æ–Ω–æ–≤</b>

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</b>
‚úÖ –û—Ü–µ–Ω–∫—É –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò –≤ –∏–≥—Ä–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≠—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä")
‚ùå –ù–∏–∫–∞–∫–∏—Ö –ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏–ª–∏ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π –æ—Ç —Ç–µ–º—ã

–ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É? üöÄ
"""
    
    def _create_news_list(self, news_items: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        news_text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        
        for i, news in enumerate(news_items, 1):
            title = news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            summary = news.get('summary', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            source = news.get('source_links', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            # –ü–û–õ–ù–´–ô –§–û–†–ú–ê–¢ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª–∏–Ω—ã
            news_text += f"""
<b>{i}. {title}</b>
üìù {summary}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {source}

"""
        
        return news_text
    
    def _split_news_list_for_expert(self, news_items: List[Dict], max_length: int = 3500) -> List[Dict]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        """
        if not news_items:
            return []
        
        parts = []
        current_part = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        current_news = []
        current_buttons = []
        
        for i, news in enumerate(news_items, 1):
            title = self._clean_html_text(news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
            summary = self._clean_html_text(news.get('summary', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'))
            source = self._clean_html_text(news.get('source_links', '–ù–µ —É–∫–∞–∑–∞–Ω'))
            
            news_text = f"""
<b>{i}. {title}</b>
üìù {summary}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {source}

"""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ª–∏–º–∏—Ç
            if len(current_part + news_text) > max_length and current_part != "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                parts.append({
                    'text': current_part,
                    'news_indices': current_news,
                    'buttons': current_buttons
                })
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                current_part = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n" + news_text
                current_news = [i-1]
                current_buttons = [i-1]
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                current_part += news_text
                current_news.append(i-1)
                current_buttons.append(i-1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part and current_part != "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n":
            parts.append({
                'text': current_part,
                'news_indices': current_news,
                'buttons': current_buttons
            })
        
        return parts
    
    def _create_comment_buttons(self, news_items: List[Dict]) -> List[List[InlineKeyboardButton]]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏."""
        buttons = []
        
        for i, news in enumerate(news_items, 1):
            button = InlineKeyboardButton(
                f"üí¨ –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å {i}",
                callback_data=f"comment_news_{news['id']}"
            )
            buttons.append([button])
        
        return buttons
    
    def _create_comment_buttons_for_part(self, news_indices: List[int], all_news_items: List[Dict]) -> List[List[InlineKeyboardButton]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏.
        
        Args:
            news_indices: –ò–Ω–¥–µ–∫—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
            all_news_items: –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            List[List[InlineKeyboardButton]]: –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å—Ç–∏
        """
        buttons = []
        
        for news_idx in news_indices:
            if 0 <= news_idx < len(all_news_items):
                news = all_news_items[news_idx]
                # –ù–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
                news_number = news_idx + 1
                button = InlineKeyboardButton(
                    f"üí¨ –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å {news_number}",
                    callback_data=f"comment_news_{news['id']}"
                )
                buttons.append([button])
        
        return buttons
    
    async def handle_comment_request(self, expert_id: int, news_id: int) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
        """
        session = self.active_sessions.get(expert_id)
        if not session:
            return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä–∞–º."
        
        if news_id not in session.news_ids:
            return "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        
        if news_id in session.commented_news:
            return "‚úÖ –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
        session.selected_news_id = news_id
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
        selected_news = None
        for news in session.news_items:
            if news['id'] == news_id:
                selected_news = news
                break
        
        if not selected_news:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
        await self._delete_news_messages(expert_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é –∏ –¢–ó
        message = f"""
üí¨ <b>–ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –ù–û–í–û–°–¢–¨:</b>

<b>üì∞ {selected_news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</b>
üìù {selected_news.get('summary', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}
‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {selected_news.get('source_links', '–ù–µ —É–∫–∞–∑–∞–Ω')}

<b>üìã –¢–ó –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø:</b>
‚Ä¢ 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-80 —Å–ª–æ–≤)
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–∏–ª—å
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ + –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è
‚Ä¢ –ë–µ–∑ –ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π

<b>üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:</b>
"""
        
        return message
    
    async def _delete_news_messages(self, expert_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            session = self.active_sessions.get(expert_id)
            if not session or not hasattr(session, 'message_ids'):
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
            for message_id in session.message_ids:
                try:
                    await self.bot.delete_message(
                        chat_id=expert_id,
                        message_id=message_id
                    )
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: {message_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π
            session.message_ids = []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: {e}")
    
    async def save_comment(self, expert_id: int, news_id: int, comment_text: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏
            comment_text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        """
        try:
            session = self.active_sessions.get(expert_id)
            if not session:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ø–∞–º—è—Ç–∏
            comment = ExpertComment(
                news_id=news_id,
                comment=comment_text,
                timestamp=datetime.now(),
                expert_id=expert_id
            )
            self.comments.append(comment)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from models.database import Comment, Expert
                from services.postgresql_database_service import PostgreSQLDatabaseService
                
                db_service = PostgreSQLDatabaseService()
                with db_service.get_session() as db_session:
                    # –ù–∞—Ö–æ–¥–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ Telegram ID (expert_id —ç—Ç–æ telegram_id –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
                    expert = db_session.query(Expert).filter(Expert.telegram_id == str(expert_id)).first()
                    if not expert:
                        logger.error(f"‚ùå –≠–∫—Å–ø–µ—Ä—Ç —Å Telegram ID {expert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        return False
                    
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç –≤ –ë–î: {expert.name} (ID: {expert.id}, Telegram ID: {expert.telegram_id})")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
                    db_comment = Comment(
                        text=comment_text,
                        news_id=news_id,
                        expert_id=expert.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º expert.id –∏–∑ –ë–î, –∞ –Ω–µ telegram_id
                        created_at=datetime.now()
                    )
                    
                    db_session.add(db_comment)
                    db_session.commit()
                    logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: —ç–∫—Å–ø–µ—Ä—Ç {expert_id}, –Ω–æ–≤–æ—Å—Ç—å {news_id}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –ë–î: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            
            # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
            session.commented_news.add(news_id)
            
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: —ç–∫—Å–ø–µ—Ä—Ç {expert_id}, –Ω–æ–≤–æ—Å—Ç—å {news_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
            if self._is_expert_work_completed(expert_id):
                await self._notify_expert_completion(expert_id)
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
                await self._notify_curators_completion(expert_id)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return False
    
    def _is_expert_work_completed(self, expert_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç —Ä–∞–±–æ—Ç—É."""
        session = self.active_sessions.get(expert_id)
        if not session:
            return False
        
        return len(session.commented_news) == len(session.news_ids)
    
    async def _notify_expert_completion(self, expert_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
        try:
            completion_text = """
üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–í—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑!

üìä –í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞.

–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã
"""
            
            await self.bot.send_message(
                chat_id=expert_id,
                text=completion_text,
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            await self._notify_curators_completion(expert_id)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            if expert_id in self.active_sessions:
                del self.active_sessions[expert_id]
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç {expert_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
    
    async def _notify_curators_completion(self, expert_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç."""
        try:
            # ID —á–∞—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            curators_chat_id = "-1002983482030"
            
            session = self.active_sessions.get(expert_id)
            if not session:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            expert_name = f"–≠–∫—Å–ø–µ—Ä—Ç {expert_id}"
            
            notification_text = f"""
‚úÖ <b>–≠–∫—Å–ø–µ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!</b>

üë®‚Äçüíª <b>{expert_name}</b> –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏:
üìä –ù–æ–≤–æ—Å—Ç–µ–π: {len(session.news_ids)}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(session.commented_news)}

üé® <b>–°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...</b>
"""
            
            await self.bot.send_message(
                chat_id=curators_chat_id,
                text=notification_text,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            await self._create_final_digest_automatically(expert_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    async def _create_final_digest_automatically(self, expert_id: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        try:
            logger.info(f"üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            from src.services.final_digest_formatter_service import FinalDigestFormatterService
            from src.services.curator_approval_service import CuratorApprovalService
            from src.services.bot_database_service import BotDatabaseService
            from src.services.ai_analysis_service import AIAnalysisService
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            ai_service = AIAnalysisService()  # ProxyAPI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
            formatter_service = FinalDigestFormatterService(ai_service)
            database_service = BotDatabaseService()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞
            session = self.active_sessions.get(expert_id)
            if not session:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —ç–∫—Å–ø–µ—Ä—Ç
            from models.database import News
            approved_news = []
            with database_service.db_service.get_session() as db_session:
                for news_id in session.news_ids:
                    news = db_session.query(News).filter(News.id == news_id).first()
                    if news:
                        approved_news.append(news)
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            expert_of_week = database_service.get_expert_of_week()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è —ç—Ç–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            news_ids = [news.id for news in approved_news]
            expert_comments = database_service.get_expert_comments_for_news(news_ids)
            news_sources = database_service.get_news_sources(news_ids)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, —ç–∫—Å–ø–µ—Ä—Ç: {expert_of_week.name if expert_of_week else 'None'}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            formatted_digest = formatter_service.create_final_digest(
                approved_news=approved_news,
                expert_of_week=expert_of_week,
                expert_comments=expert_comments,
                news_sources=news_sources
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞–º
            curator_chat_id = "-1002983482030"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π CuratorApprovalService –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if self.curator_approval_service:
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π CuratorApprovalService")
                approval_service = self.curator_approval_service
            else:
                logger.warning("‚ö†Ô∏è CuratorApprovalService –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                bot_instance = None
                try:
                    import sys
                    from src.bot.bot import AINewsBot
                    
                    # –ò—â–µ–º –≤ –º–æ–¥—É–ª–µ bot.bot
                    bot_module = sys.modules.get('src.bot.bot') or sys.modules.get('bot.bot')
                    if bot_module and hasattr(bot_module, 'bot_instance'):
                        bot_instance = bot_module.bot_instance
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω bot_instance –¥–ª—è CuratorApprovalService")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å bot_instance: {e}")
                
                approval_service = CuratorApprovalService(
                    bot_token="8195833718:AAGbqnbZz7NrbOWN5ic5k7oxGMUTntgHE6s",
                    curator_chat_id=curator_chat_id,
                    formatter_service=formatter_service,
                    bot_instance=bot_instance
                )
            
            await approval_service.send_digest_for_approval(formatted_digest, curator_chat_id)
            
            logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    async def _start_reminder_system(self, expert_id: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        while expert_id in self.active_sessions:
            try:
                await asyncio.sleep(self.REMINDER_INTERVAL)
                
                session = self.active_sessions.get(expert_id)
                if not session:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ 4 —á–∞—Å–∞
                time_passed = (datetime.now() - session.start_time).total_seconds()
                
                if time_passed >= self.CURATOR_ALERT_THRESHOLD:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                    await self._alert_curators_about_unresponsive_expert(expert_id)
                    break
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É
                    await self._send_reminder_to_expert(expert_id)
                    session.reminder_count += 1
                    session.last_reminder = datetime.now()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
                break
    
    async def _send_reminder_to_expert(self, expert_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É."""
        try:
            session = self.active_sessions.get(expert_id)
            if not session:
                return
            
            remaining_news = len(session.news_ids) - len(session.commented_news)
            
            reminder_text = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>

–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å <b>{remaining_news}</b> –Ω–æ–≤–æ—Å—Ç–µ–π.

üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¢–ó:
‚Ä¢ 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ + –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É! üöÄ
"""
            
            await self.bot.send_message(
                chat_id=expert_id,
                text=reminder_text,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {e}")
    
    async def _alert_curators_about_unresponsive_expert(self, expert_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–æ—Ç–∑—ã–≤—á–∏–≤–æ–º —ç–∫—Å–ø–µ—Ä—Ç–µ."""
        try:
            curators_chat_id = "-1002983482030"
            
            session = self.active_sessions.get(expert_id)
            if not session:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            expert_name = f"–≠–∫—Å–ø–µ—Ä—Ç {expert_id}"
            
            alert_text = f"""
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï –ö–£–†–ê–¢–û–†–ê–ú!</b>

üë®‚Äçüíª <b>{expert_name}</b> –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —É–∂–µ <b>4+ —á–∞—Å–∞</b>

üì∞ –ù–æ–≤–æ—Å—Ç–∏ –æ–∂–∏–¥–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{self._format_remaining_news_list(expert_id)}

üîî <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ª–∏—á–Ω–æ:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É
‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
‚Ä¢ –£–∑–Ω–∞–π—Ç–µ, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–º–æ—â—å

‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {self._format_time_passed(session.start_time)}

üö® –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
"""
            
            await self.bot.send_message(
                chat_id=curators_chat_id,
                text=alert_text,
                parse_mode="HTML"
            )
            
            logger.warning(f"üö® –ö—É—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–µ–æ—Ç–∑—ã–≤—á–∏–≤–æ–º —ç–∫—Å–ø–µ—Ä—Ç–µ {expert_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–æ—Ç–∑—ã–≤—á–∏–≤–æ–º —ç–∫—Å–ø–µ—Ä—Ç–µ: {e}")
    
    def _format_remaining_news_list(self, expert_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
        session = self.active_sessions.get(expert_id)
        if not session:
            return "–°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        remaining = session.news_ids - session.commented_news
        if not remaining:
            return "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        
        return f"–û—Å—Ç–∞–ª–æ—Å—å: {len(remaining)} –Ω–æ–≤–æ—Å—Ç–µ–π"
    
    def _format_time_passed(self, start_time: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è."""
        time_passed = datetime.now() - start_time
        hours = int(time_passed.total_seconds() // 3600)
        minutes = int((time_passed.total_seconds() % 3600) // 60)
        
        if hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    
    def get_expert_comments(self, expert_id: int) -> List[ExpertComment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        return [comment for comment in self.comments if comment.expert_id == expert_id]
    
    def get_news_comments(self, news_id: int) -> List[ExpertComment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏."""
        return [comment for comment in self.comments if comment.news_id == news_id]
    
    def cleanup_session(self, expert_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        if expert_id in self.active_sessions:
            del self.active_sessions[expert_id]
            logger.info(f"üßπ –°–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id} –æ—á–∏—â–µ–Ω–∞")

