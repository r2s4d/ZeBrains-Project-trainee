#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Expert Selection Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–î–ù–û–ì–û —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –≤–µ—Å—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.
–≠–∫—Å–ø–µ—Ä—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ä–∞–∑—É.
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class ExpertStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."""
    AVAILABLE = "available"           # –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã
    BUSY = "busy"                     # –ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
    UNAVAILABLE = "unavailable"       # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω

@dataclass
class Expert:
    """–≠–∫—Å–ø–µ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    id: int
    name: str
    specialization: str
    status: ExpertStatus
    current_workload: int
    max_workload: int
    rating: float
    response_time_hours: float
    telegram_id: Optional[str] = None

@dataclass
class ExpertAssignment:
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç."""
    assignment_id: str
    expert_id: int
    expert_name: str
    digest_id: str
    news_count: int
    assignment_date: datetime
    deadline: datetime
    status: str = "assigned"  # assigned, in_progress, completed

class ExpertSelectionService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–î–ù–û–ì–û —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –≤–µ—Å—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.
    """
    
    def __init__(self, database_service, notification_service):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            database_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            notification_service: –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.db = database_service
        self.notification = notification_service
        
        logger.info("‚úÖ ExpertSelectionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_available_experts(self) -> List[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
        
        Returns:
            List[Expert]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            experts = [
                Expert(
                    id=1,
                    name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    specialization="AI/ML, –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                    status=ExpertStatus.AVAILABLE,
                    current_workload=2,
                    max_workload=5,
                    rating=4.8,
                    response_time_hours=3.5,
                    telegram_id="@ivan_petrov"
                ),
                Expert(
                    id=2,
                    name="–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                    specialization="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –°—Ç–∞—Ä—Ç–∞–ø—ã",
                    status=ExpertStatus.AVAILABLE,
                    current_workload=1,
                    max_workload=5,
                    rating=4.6,
                    response_time_hours=5.0,
                    telegram_id="@maria_sidorova"
                ),
                Expert(
                    id=3,
                    name="–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤",
                    specialization="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, Microsoft, Google",
                    status=ExpertStatus.AVAILABLE,
                    current_workload=3,
                    max_workload=5,
                    rating=4.7,
                    response_time_hours=4.0,
                    telegram_id="@alex_kozlov"
                )
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            available_experts = [
                expert for expert in experts
                if expert.status == ExpertStatus.AVAILABLE and expert.current_workload < expert.max_workload
            ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∑–∞–≥—Ä—É–∑–∫–µ
            available_experts.sort(key=lambda x: (x.rating, -x.current_workload), reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_experts)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
            return available_experts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    async def suggest_experts_for_digest(self, news_count: int) -> List[Expert]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Args:
            news_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            
        Returns:
            List[Expert]: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        try:
            available_experts = await self.get_available_experts()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∑—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
            suitable_experts = []
            for expert in available_experts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç –≤–∑—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
                if expert.current_workload + news_count <= expert.max_workload:
                    suitable_experts.append(expert)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Ä–µ–π—Ç–∏–Ω–≥, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞, –∑–∞–≥—Ä—É–∑–∫–∞)
            suitable_experts.sort(key=lambda x: (
                x.rating,
                x.response_time_hours,
                x.current_workload
            ), reverse=True)
            
            logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ {len(suitable_experts)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            return suitable_experts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    async def assign_expert_to_digest(self, expert_id: int, digest_id: str, news_count: int) -> Optional[ExpertAssignment]:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            digest_id: ID –¥–∞–π–¥–∂–µ—Å—Ç–∞
            news_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            Optional[ExpertAssignment]: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
            available_experts = await self.get_available_experts()
            expert = next((e for e in available_experts if e.id == expert_id), None)
            
            if not expert:
                logger.error(f"‚ùå –≠–∫—Å–ø–µ—Ä—Ç {expert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ
            if expert.current_workload + news_count > expert.max_workload:
                logger.error(f"‚ùå –≠–∫—Å–ø–µ—Ä—Ç {expert.name} –Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥—Ä—É–∑–∫–∞: {expert.current_workload}/{expert.max_workload})")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            assignment = ExpertAssignment(
                assignment_id=f"assign_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                expert_id=expert.id,
                expert_name=expert.name,
                digest_id=digest_id,
                news_count=news_count,
                assignment_date=datetime.now(),
                deadline=datetime.now().replace(hour=18, minute=0, second=0, microsecond=0)  # –î–µ–¥–ª–∞–π–Ω 18:00
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–∫—Å–ø–µ—Ä—Ç–∞
            expert.current_workload += news_count
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç {expert.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç {digest_id} ({news_count} –Ω–æ–≤–æ—Å—Ç–µ–π)")
            return assignment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
            return None
    
    async def notify_expert(self, assignment: ExpertAssignment) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏.
        
        Args:
            assignment: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            message = f"""
üîî –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï –î–õ–Ø –≠–ö–°–ü–ï–†–¢–ê

üì∞ –î–∞–π–¥–∂–µ—Å—Ç: {assignment.digest_id}
üìä –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {assignment.news_count}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {assignment.deadline.strftime('%d.%m.%Y %H:%M')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ.
            """.strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç—É {assignment.expert_name}: {message[:100]}...")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            return False
    
    def get_assignment_status(self, assignment: ExpertAssignment) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Args:
            assignment: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        """
        try:
            return {
                "assignment_id": assignment.assignment_id,
                "expert_name": assignment.expert_name,
                "digest_id": assignment.digest_id,
                "news_count": assignment.news_count,
                "assignment_date": assignment.assignment_date,
                "deadline": assignment.deadline,
                "status": assignment.status,
                "time_remaining": (assignment.deadline - datetime.now()).total_seconds() / 3600 if assignment.deadline > datetime.now() else 0
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
