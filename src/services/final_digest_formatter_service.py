# -*- coding: utf-8 -*-
"""
FinalDigestFormatterService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ –¢–ó

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- AI-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Telegram
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
- –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¢–ó –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å—Ç–∏–ª—é
"""

import logging
from typing import List, Dict, Optional, Any
from datetime import datetime

from src.models.database import News, Comment, Expert
from src.config import config
from src.services.ai_analysis_service import AIAnalysisService
from src.utils.message_splitter import MessageSplitter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class FinalDigestFormatterService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ –¢–ó.
    
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ AI-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π.
    """
    
    def __init__(self, ai_service: AIAnalysisService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            ai_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
        """
        self.ai_service = ai_service
        self.digital_employee_name = "–ê–ª–µ–∫—Å"
        self.digital_employee_role = "—Ü–∏—Ñ—Ä–æ–≤–æ–π SMM-–º–µ–Ω–µ–¥–∂–µ—Ä ZeBrains"
        
        logger.info("FinalDigestFormatterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_final_digest(
        self,
        approved_news: List,
        expert_comments: Dict[int, Dict],
        expert_of_week,
        news_sources: Dict[int, List[str]] = None
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –¢–ó.
        
        Args:
            approved_news: –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            expert_comments: –°–ª–æ–≤–∞—Ä—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (news_id -> comment)
            expert_of_week: –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        """
        try:
            logger.info(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è {len(approved_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = self._create_title(approved_news)
            
            # 2. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
            introduction = await self._generate_introduction(expert_of_week, len(approved_news))
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            self._current_sources = news_sources or {}
            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ FinalDigestFormatterService: {self._current_sources}")
            
            # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            news_section = await self._format_news_section(approved_news, expert_comments)
            
            # 5. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
            conclusion = await self._generate_conclusion(len(approved_news))
            
            # 6. –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            full_digest = f"{title}\n\n{introduction}\n\n{news_section}\n{conclusion}"
            
            logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return full_digest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
    
    def _create_title(self, news_items: List[News]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ –¢–ó.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –§–æ—Ä–º–∞—Ç: –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
        - –ü–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å—Ç–∞–≤–∏—Ç—Å—è —ç–º–æ–¥–∑–∏
        - –î–ª–∏–Ω–∞: –¥–æ 10 —Å–ª–æ–≤
        - –Å–º–∫–∏–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º –Ω–æ–≤–æ—Å—Ç–µ–π
        emoji = self._get_title_emoji(news_items)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ò–ò –º–µ–Ω—è–µ—Ç –º–∏—Ä: –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ –¢–ó (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ Telegram)
        return f"<b>{emoji} {title}</b>"
    
    def _get_title_emoji(self, news_items: List[News]) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ –¢–ó.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - üî•, üöÄ –∏–ª–∏ üì∞ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        - –ù–µ –±–æ–ª–µ–µ 1 —ç–º–æ–¥–∑–∏ –Ω–∞ –±–ª–æ–∫
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –≠–º–æ–¥–∑–∏
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π
        ai_keywords = ['ai', '–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', 'gpt', 'openai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        breakthrough_keywords = ['–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ø–µ—Ä–≤—ã–π', '–Ω–æ–≤—ã–π']
        
        all_titles = " ".join([news.title.lower() for news in news_items])
        
        if any(keyword in all_titles for keyword in breakthrough_keywords):
            return "üöÄ"  # –ü—Ä–æ—Ä—ã–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        elif any(keyword in all_titles for keyword in ai_keywords):
            return "ü§ñ"  # AI –Ω–æ–≤–æ—Å—Ç–∏
        else:
            return "üì∞"  # –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    
    async def _generate_introduction(self, expert: Expert, news_count: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
        - –î–ª–∏–Ω–∞: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ 30 —Å–ª–æ–≤)
        - –û—Ç –∏–º–µ–Ω–∏ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
        - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
        - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫
        - –õ–µ–≥–∫–∏–µ —à—É—Ç–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è —É–º–µ—Å—Ç–Ω—ã
        
        Args:
            expert: –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏
            news_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
        """
        try:
            expert_title = self._get_expert_title(expert.specialization if hasattr(expert, 'specialization') else 'AI')
            
            prompt = f"""
            –°–æ–∑–¥–∞–π –≤–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ò–ò –æ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ SMM-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–ª–µ–∫—Å–∞.
            
            –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–µ–ª–∏: {expert.name if hasattr(expert, 'name') else '–≠–∫—Å–ø–µ—Ä—Ç'}, {expert_title}
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_count}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º)
            - –î–ª–∏–Ω–∞: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ 30 —Å–ª–æ–≤)
            - –û—Ç –∏–º–µ–Ω–∏ "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
            - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
            - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫
            - –õ–µ–≥–∫–∏–µ —à—É—Ç–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è —É–º–µ—Å—Ç–Ω—ã
            - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–¥–∞—á–µ –Ω–æ–≤–æ—Å—Ç–µ–π
            - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –∫–æ–º–ø–∞–Ω–∏—é ZeBrains
            
            –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è: "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å, —Ü–∏—Ñ—Ä–æ–≤–æ–π SMM-–º–µ–Ω–µ–¥–∂–µ—Ä ZeBrains. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ò–ò –≤–º–µ—Å—Ç–µ —Å–æ –°—Ç–µ–ø–∞–Ω–æ–º –ò–≥–æ–Ω–∏–Ω—ã–º, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞ –ò–ò."
            
            –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ.
            """
            
            introduction = await self.ai_service.analyze_text(prompt)
            logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI")
            return introduction
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∏—è: {e}")
            # Fallback –≤–≤–µ–¥–µ–Ω–∏–µ
            expert_title = self._get_expert_title(expert.get('specialization', 'AI'))
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.digital_employee_name}, {self.digital_employee_role}. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ò–ò –≤–º–µ—Å—Ç–µ —Å {expert.get('name', '–≠–∫—Å–ø–µ—Ä—Ç')}, {expert_title}."
    
    async def _format_news_section(self, news_items: List[Dict], expert_comments: Dict[int, Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω—É–º–µ—Ä—É–µ—Ç—Å—è (1., 2., 3.)
        - –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        - –î–ª–∏–Ω–∞: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-100 —Å–ª–æ–≤)
        - –¶–∏—Ç–∞—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏
        - –í—ã–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏
        - –ü–æ—Å–ª–µ –∫–∞–≤—ã—á–µ–∫ –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —ç–º–æ–¥–∑–∏ ‚û°Ô∏è
        - –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
        
        Args:
            news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            expert_comments: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        news_section = ""
        
        for i, news in enumerate(news_items, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞
            news_id = news.get('id') if isinstance(news, dict) else news.id
            comment = expert_comments.get(news_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üîç –ù–æ–≤–æ—Å—Ç—å {i}: ID={news_id}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={comment is not None}")
            if comment:
                logger.info(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment.get('text', '')[:100]}...")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news_text = await self._format_single_news(news, comment, i)
            news_section += news_text + "\n\n"
        
        return news_section.strip()
    
    async def _format_single_news(self, news: Dict, comment: Optional[Dict], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Args:
            news: –ù–æ–≤–æ—Å—Ç—å
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            index: –ù–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏–∑ –ë–î (ai_summary)
        if hasattr(news, 'ai_summary') and news.ai_summary:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏–∑ –ë–î
            summary = news.ai_summary
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏–∑ –ë–î –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
        elif hasattr(news, 'summary') and news.summary:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–∞–º–º–∞—Ä–∏
            summary = news.summary
            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
        else:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —Å–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é AI
            summary = await self._create_ai_summary(news)
            logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–∞–º–º–∞—Ä–∏ –æ—Ç –∑–≤–µ–∑–¥–æ—á–µ–∫
        clean_summary = self._clean_markdown_artifacts(summary)
        
        news_text = f"{index}. {clean_summary}"
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if comment:
            integrated_text = self._integrate_expert_comment(news_text, comment)
            news_text = integrated_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        if hasattr(self, '_current_sources') and self._current_sources:
            news_id = news.get('id') if isinstance(news, dict) else news.id
            sources_for_news = self._current_sources.get(news_id)
            logger.info(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {sources_for_news}")
            sources_text = self._format_sources(news, sources_for_news)
            if sources_text:
                news_text += f"\n\n{sources_text}"
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {sources_text}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
        
        return news_text
    
    async def _create_ai_summary(self, news: Dict, existing_summary: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI (–º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤).
        
        Args:
            news: –ù–æ–≤–æ—Å—Ç—å
            existing_summary: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–∞–º–º–∞—Ä–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
        """
        try:
            content = news.content if hasattr(news, 'content') else str(news)
            
            if existing_summary:
                prompt = f"""
                –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤).
                
                –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news.title}
                –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–∞–º–º–∞—Ä–∏: {existing_summary}
                –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}
                
                –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                - –ú–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤
                - –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
                - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
                - –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è
                - –û—Ä–≥–∞–Ω–∏—á–Ω–æ —É–º–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏–º–∏—Ç —Å–ª–æ–≤
                
                –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
                """
            else:
                prompt = f"""
                –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤).
                
                –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news.title}
                –ö–æ–Ω—Ç–µ–Ω—Ç: {content}
                
                –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                - –ú–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤
                - –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
                - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
                - –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è
                - –û—Ä–≥–∞–Ω–∏—á–Ω–æ —É–º–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏–º–∏—Ç —Å–ª–æ–≤
                
                –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
                """
            
            summary = await self.ai_service.analyze_text(prompt)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∞–º–º–∞—Ä–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100 —Å–ª–æ–≤
            words = summary.split()
            if len(words) > 100:
                summary = ' '.join(words[:100]) + "..."
            
            logger.info(f"‚úÖ AI —Å–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ: {len(words)} —Å–ª–æ–≤")
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI —Å–∞–º–º–∞—Ä–∏: {e}")
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = news.content if hasattr(news, 'content') else str(news)
            words = content.split()
            if len(words) > 100:
                return ' '.join(words[:100]) + "..."
            return content
    
    def _integrate_expert_comment(self, news_text: str, comment: Dict) -> str:
        """
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å—Ç–∏–ª–µ Telegram.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
        - –ó–µ–ª–µ–Ω—ã–π –±–ª–æ–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ (–∫–∞–∫ –≤ Telegram)
        - –ü–æ—Å–ª–µ –∫–∞–≤—ã—á–µ–∫ –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            news_text: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –¢–µ–∫—Å—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        """
        try:
            expert_title = self._get_expert_title(comment.get('expert', {}).get('specialization', 'AI'))
            expert_name = comment.get('expert', {}).get('name', '–≠–∫—Å–ø–µ—Ä—Ç')
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ Telegram
            comment_text = comment.get('text', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –≤ Telegram (–∑–µ–ª–µ–Ω—ã–π –±–ª–æ–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏)
            formatted_comment = f"""
<blockquote>"{comment_text}"

‚Äî {expert_name}, {expert_title}</blockquote>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç–∏
            news_with_comment = f"{news_text}\n\n{formatted_comment}"
            
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∏–ª–µ Telegram")
            return news_with_comment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            # Fallback –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            expert_title = self._get_expert_title(comment.get('expert', {}).get('specialization', 'AI'))
            expert_name = comment.get('expert', {}).get('name', '–≠–∫—Å–ø–µ—Ä—Ç')
            return f"{news_text}\n\n<blockquote>\"{comment.get('text', '')}\"\n\n‚Äî {expert_name}, {expert_title}</blockquote>"
    
    def _format_sources(self, news: Dict, sources: List[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¢–ó.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram-–ø–æ—Å—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        - –ü–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π —Å—Ç–∞–≤–∏—Ç—Å—è —ç–º–æ–¥–∑–∏ ‚û°Ô∏è
        - –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ–Ω–∏ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
        
        Args:
            news: –ù–æ–≤–æ—Å—Ç—å
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        """
        if sources:
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ get_news_sources
            formatted_sources = []
            for source in sources[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if source.startswith('<a href=') and '</a>' in source:
                    # –ï—Å–ª–∏ —ç—Ç–æ HTML —Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ)
                    formatted_sources.append(source)
                elif source.startswith('[') and '](' in source:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤–∞—è Markdown —Å—Å—ã–ª–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    import re
                    match = re.search(r'\[([^\]]+)\]\(([^)]+)\)', source)
                    if match:
                        text, url = match.groups()
                        formatted_sources.append(f'<a href="{url}">{text}</a>')
                    else:
                        formatted_sources.append(source)
                elif source.startswith('http'):
                    # –ï—Å–ª–∏ —ç—Ç–æ URL, —Å–æ–∑–¥–∞–µ–º HTML —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é
                    formatted_sources.append(f'<a href="{source}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>')
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    formatted_sources.append(source)
            
            sources_text = ", ".join(formatted_sources)
            return f"‚û°Ô∏è {sources_text}"
        
        return ""
    
    def _clean_markdown_artifacts(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö markdown –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML —Ç–µ–≥–∞–º–∏
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ ** –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ HTML —Ç–µ–≥–∏
            import re
            
            # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
            text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
            
            # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ *
            text = re.sub(r'\*([^*]+)\*', r'<i>\1</i>', text)
            
            # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–≤–µ–∑–¥–æ—á–∫–∏
            text = text.replace('*', '')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            text = re.sub(r'\s+', ' ', text).strip()
            
            logger.debug(f"üßπ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –æ—Ç markdown –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text
    
    async def _generate_conclusion(self, news_count: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¢–ó:
        - –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        - –î–ª–∏–Ω–∞: 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 15 —Å–ª–æ–≤)
        - –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        - –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å —ç–º–æ–¥–∑–∏ (üöÄ, üì¢)
        - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫
        
        Args:
            news_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        """
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ò–ò –æ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ SMM-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–ª–µ–∫—Å–∞.
            
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_count}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            - –î–ª–∏–Ω–∞: 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 15 —Å–ª–æ–≤)
            - –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            - –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å —ç–º–æ–¥–∑–∏ (üöÄ, üì¢)
            - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫
            - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            
            –ü—Ä–∏–º–µ—Ä –ø–æ –¢–ó: "–ù–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å—ë! –ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤–∞—Å —É–¥–∏–≤–∏–ª–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –î–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üî•"
            
            –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ.
            """
            
            conclusion = await self.ai_service.analyze_text(prompt)
            logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI")
            return conclusion
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è: {e}")
            # Fallback –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
            return f"–ù–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å—ë! –ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤–∞—Å —É–¥–∏–≤–∏–ª–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –î–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üî•"
    
    def _get_expert_title(self, specialization: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        
        Args:
            specialization: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            –î–æ–ª–∂–Ω–æ—Å—Ç—å
        """
        titles = {
            'AI': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ò–ò',
            'ML': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
            'NLP': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
            'CV': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è',
            'Data Science': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ Data Science',
            'Research': '–Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            'Engineering': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
            'CEO': 'CEO –∏ —Å–æ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ZeBrains',
            'CTO': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
            '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '—Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç'
        }
        
        return titles.get(specialization, '—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò')
    
    def check_grammar_and_punctuation(self, text: str) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            prompt = f"""
            –ü—Ä–æ–≤–µ—Ä—å –∏ –∏—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–µ.
            –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å, –Ω–æ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏.
            
            –¢–µ–∫—Å—Ç: {text}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            - –ò—Å–ø—Ä–∞–≤—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
            - –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω
            - –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª
            - –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            """
            
            corrected_text = self.ai_service.analyze_text(prompt)
            
            # –ï—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª fallback-—Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            if corrected_text in ["–¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."]:
                logger.info("‚ö†Ô∏è AI –≤–µ—Ä–Ω—É–ª fallback-—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return text
            
            logger.info("‚úÖ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é AI")
            return corrected_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {e}")
            return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def split_digest_message(self, digest: str, max_length: int = None) -> List[str]:
        """
        –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        –ü—Ä–∏–Ω—Ü–∏–ø –∫–∞–∫ –≤ MorningDigestService - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏.
        
        Args:
            digest: –ü–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–∞
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ –±–ª–æ–∫–∞–º
        return MessageSplitter.split_by_blocks(
            text=digest,
            max_length=max_length,
            block_separator='\n\n',
            sentence_separator='. '
        )
