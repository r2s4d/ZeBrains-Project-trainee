#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞.
"""

import logging
import os
from datetime import datetime
from typing import Optional
from dataclasses import dataclass
from openai import OpenAI

logger = logging.getLogger(__name__)

@dataclass
class NewsAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏."""
    title: str
    content: str
    summary: str
    importance_score: int
    category: str
    is_duplicate: bool
    source_links: str = ""
    tags: list = None
    analyzed_at: datetime = None
    
    def __post_init__(self):
        if self.tags is None:
            self.tags = ["–ò–ò", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]

class AIAnalysisService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ProxyAPI
        self.proxy_url = os.getenv('PROXY_API_URL')
        self.proxy_api_key = os.getenv('PROXY_API_KEY')
        
        if self.proxy_url and self.proxy_api_key:
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
            self.use_proxy = True
        else:
            logger.warning("‚ö†Ô∏è ProxyAPI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.use_proxy = False
        
        # OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ ProxyAPI
        self.client = None
        if self.use_proxy:
            try:
                from openai import OpenAI
                self.client = OpenAI(
                    api_key=self.proxy_api_key,
                    base_url=self.proxy_url
                )
                logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ ProxyAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                try:
                    models_response = self.client.models.list()
                    available_models = [model.id for model in models_response.data]
                    logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models}")
                    
                    preferred_model = "openai/gpt-5-mini-2025-08-07"
                    if preferred_model in available_models:
                        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {preferred_model} –¥–æ—Å—Ç—É–ø–Ω–∞")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {preferred_model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {available_models}")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {e}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.client = None
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
        self.unified_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –º–∏—Ä–∞ –ò–ò –¥–ª—è ZeBrains –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:

        –ó–ê–ì–û–õ–û–í–û–ö: {title}
        –°–û–î–ï–†–ñ–ê–ù–ò–ï: {content}

        –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

        –°–ê–ú–ú–ê–†–ò:
        - –û–±—ä–µ–º: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-100 —Å–ª–æ–≤)
        - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        - –§–æ–∫—É—Å: –ù–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞—Å–ø–µ–∫—Ç–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏

        –ê–ù–ê–õ–ò–ó:
        - –î—É–±–ª–∏–∫–∞—Ç: –î–∞/–ù–µ—Ç (—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º)
        - –°—Å—ã–ª–∫–∏: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã (–Ω–µ –∫–∞–Ω–∞–ª—ã!)

        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
        –°–ê–ú–ú–ê–†–ò: [–∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, 50-100 —Å–ª–æ–≤]
        –î–£–ë–õ–ò–ö–ê–¢: [–î–∞/–ù–µ—Ç]
        –°–°–´–õ–ö–ò: [—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã]

        –ü–†–ò–ú–ï–† –•–û–†–û–®–ï–ì–û –°–ê–ú–ú–ê–†–ò:
        OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ GPT-4 Turbo —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –ò–ò-—Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
        """
        
        logger.info("‚úÖ AIAnalysisService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def analyze_news(self, title: str, content: str, source_links: str = "") -> NewsAnalysis:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Å–∞–º–º–∞—Ä–∏.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            source_links: –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            
        Returns:
            NewsAnalysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å: {title[:50]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if self.use_proxy and self.client:
                logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prompt = self.unified_prompt.format(
                    title=title,
                    content=content[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è API
                )
                
                # –í—ã–∑—ã–≤–∞–µ–º OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
                    models_to_try = ["openai/gpt-5-mini-2025-08-07", "gpt-4", "gpt-3.5-turbo"]
                    response = None
                    
                    for model in models_to_try:
                        try:
                            logger.info(f"ü§ñ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                            response = self.client.chat.completions.create(
                                model=model,
                                messages=[{"role": "user", "content": prompt}]
                            )
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
                            break
                        except Exception as model_error:
                            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {model_error}")
                            continue
                    
                    if not response:
                        raise Exception("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                    analysis = self._parse_unified_response(response.choices[0].message.content, title, content, source_links)
                    
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –¥—É–±–ª–∏–∫–∞—Ç {analysis.is_duplicate}")
                    return analysis
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ ProxyAPI: {e}")
                    logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏: {str(e)}")
                    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –∞–Ω–∞–ª–∏–∑—É")
            
            # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            logger.warning("‚ö†Ô∏è ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._create_fallback_analysis(title, content, source_links)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._create_fallback_analysis(title, content, source_links)
    

    
    def _parse_unified_response(self, response: str, title: str, content: str, source_links: str) -> NewsAnalysis:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."""
        try:
            lines = response.split('\n')
            analysis = NewsAnalysis(
                title=title,
                content=content,
                summary="",
                importance_score=5,  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                category="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",  # –ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                is_duplicate=False,
                source_links=source_links,
                tags=["–ò–ò", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
                analyzed_at=datetime.now()
            )
            
            for line in lines:
                line = line.strip()
                if line.startswith("–°–ê–ú–ú–ê–†–ò:"):
                    analysis.summary = line.replace("–°–ê–ú–ú–ê–†–ò:", "").strip()
                elif line.startswith("–î–£–ë–õ–ò–ö–ê–¢:"):
                    analysis.is_duplicate = line.split(":")[1].strip().lower() == "–¥–∞"
                elif line.startswith("–°–°–´–õ–ö–ò:"):
                    analysis.source_links = line.split(":")[1].strip()
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._create_fallback_analysis(title, content, source_links)
    
    def _create_fallback_analysis(self, title: str, content: str, source_links: str) -> NewsAnalysis:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
        return NewsAnalysis(
            title=title,
            content=content,
            summary=f"–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏: {title}",
            importance_score=5,  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            category="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",  # –ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            is_duplicate=False,
            source_links=source_links,
            tags=["–ò–ò", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            analyzed_at=datetime.now()
        )
    
    async def generate_summary_only(self, title: str, content: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            if self.use_proxy and self.client:
                logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏
                summary_prompt = f"""
                –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –ò–ò —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ZeBrains:

                –ó–ê–ì–û–õ–û–í–û–ö: {title}
                –°–û–î–ï–†–ñ–ê–ù–ò–ï: {content}

                –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–ê–ú–ú–ê–†–ò:
                - –û–±—ä–µ–º: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-100 —Å–ª–æ–≤)
                - –§–æ—Ä–º–∞—Ç: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
                - –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã

                –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
                –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (50-100 —Å–ª–æ–≤) –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
                """
                
                # –í—ã–∑—ã–≤–∞–µ–º OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                try:
                    response = self.client.chat.completions.create(
                        model="openai/gpt-5-mini-2025-08-07",
                        messages=[{"role": "user", "content": summary_prompt}]
                    )
                    
                    summary = response.choices[0].message.content.strip()
                    logger.info(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return summary
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ ProxyAPI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
                    logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏: {str(e)}")
                    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–∞–∑–æ–≤–æ–º—É —Å–∞–º–º–∞—Ä–∏")
                    return f"–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏: {title}"
            else:
                logger.warning("‚ö†Ô∏è ProxyAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏")
                return f"–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏: {title}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return f"–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏: {title}"
    
    def analyze_text(self, prompt: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProxyAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
            if hasattr(self, 'use_proxy') and self.use_proxy and self.client:
                try:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∫ ProxyAPI
                    response = self.client.chat.completions.create(
                        model="openai/gpt-5-mini-2025-08-07",
                        messages=[
                            {"role": "system", "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM-–º–µ–Ω–µ–¥–∂–µ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –æ–± –ò–ò."},
                            {"role": "user", "content": prompt}
                        ]
                    )
                    
                    result = response.choices[0].message.content.strip()
                    logger.info("‚úÖ AI —Ç–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    return result
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    return self._generate_fallback_text(prompt)
            
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            logger.warning("‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
            return self._generate_fallback_text(prompt)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return self._generate_fallback_text(prompt)
    
    def _generate_fallback_text(self, prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback —Ç–µ–∫—Å—Ç –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        
        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Fallback —Ç–µ–∫—Å—Ç
        """
        if "–≤–≤–µ–¥–µ–Ω–∏–µ" in prompt.lower():
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å, —Ü–∏—Ñ—Ä–æ–≤–æ–π SMM-–º–µ–Ω–µ–¥–∂–µ—Ä ZeBrains. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ò–ò –≤–º–µ—Å—Ç–µ —Å–æ –°—Ç–µ–ø–∞–Ω–æ–º –ò–≥–æ–Ω–∏–Ω—ã–º, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞ –ò–ò."
        elif "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ" in prompt.lower():
            return "–ù–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å—ë! –ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤–∞—Å —É–¥–∏–≤–∏–ª–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –î–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üî•"
        elif "–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" in prompt.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            if "–°—Ç–µ–ø–∞–Ω –ò–≥–æ–Ω–∏–Ω" in prompt:
                return "–≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –º–æ–∂–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            else:
                return "–≠—Ç–æ –≤–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ—Ç—Ä–∞—Å–ª–∏."
        else:
            return "–¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ."

    def get_proxy_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ProxyAPI —Å–µ—Ä–≤–∏—Å–∞."""
        return {
            "service": "AIAnalysisService",
            "proxy_available": self.use_proxy,
            "proxy_url": self.proxy_url,
            "proxy_api_key_set": bool(self.proxy_api_key),
            "client_initialized": self.client is not None,
            "message": "ProxyAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å" if self.use_proxy else "ProxyAPI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ PROXY_API_URL –∏ PROXY_API_KEY –≤ .env"
        }

    async def analyze_news_relevance(self, title: str, content: str) -> Optional[int]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ò–ò-–¥–∞–π–¥–∂–µ—Å—Ç–∞..
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            int: –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 10, –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.client or not self.use_proxy:
            logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
            return self._fallback_relevance_check(title, content)
        
        try:
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevance_prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –¥–ª—è –ò–ò-–¥–∞–π–¥–∂–µ—Å—Ç–∞.

            –ó–ê–ì–û–õ–û–í–û–ö: {title}
            –°–û–î–ï–†–ñ–ê–ù–ò–ï: {content}

            –ö–†–ò–¢–ï–†–ò–ò –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò:
            1. –ü—Ä—è–º–æ —Å–≤—è–∑–∞–Ω–∞ —Å –ò–ò/ML/NLP/—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–æ–π
            2. –ö–∞—Å–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –≤ –ò–ò
            3. –í–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ò–ò-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏
            4. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –ò–ò

            –û–¶–ï–ù–ò –ü–û –®–ö–ê–õ–ï 0-10, –≥–¥–µ:
            - 0-3: –ù–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (–Ω–æ–≤–æ—Å—Ç–∏ –æ –ø–æ–ª–∏—Ç–∏–∫–µ, —Å–ø–æ—Ä—Ç–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è—Ö)
            - 4-6: –°–ª–∞–±–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (–æ–±—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ò–ò –≤—Å–∫–æ–ª—å–∑—å)
            - 7-10: –í—ã—Å–æ–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (–ø—Ä—è–º–æ –ø—Ä–æ –ò–ò, ML, AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)

            –í–ï–†–ù–ò –¢–û–õ–¨–ö–û –ß–ò–°–õ–û –û–¢ 0 –î–û 10.
            """

            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {title[:50]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É AI –∑–∞–ø—Ä–æ—Å–æ–≤
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
                models_to_try = ["openai/gpt-5-mini-2025-08-07", "gpt-4", "gpt-3.5-turbo"]
                response = None
                
                for model in models_to_try:
                    try:
                        logger.info(f"ü§ñ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å {model} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
                        response = self.client.chat.completions.create(
                            model=model,
                            messages=[{"role": "user", "content": relevance_prompt}]
                        )
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
                        break
                    except Exception as model_error:
                        logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {model_error}")
                        continue
                
                if not response:
                    raise Exception("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                ai_response = response.choices[0].message.content.strip()
                
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    relevance_score = int(ai_response)
                    if 0 <= relevance_score <= 10:
                        logger.info(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {relevance_score}/10")
                        return relevance_score
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {relevance_score}")
                        return self._fallback_relevance_check(title, content)
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI: {ai_response}")
                    return self._fallback_relevance_check(title, content)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return self._fallback_relevance_check(title, content)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return self._fallback_relevance_check(title, content)
    
    def _fallback_relevance_check(self, title: str, content: str) -> int:
        """
        Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            int: –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 10
        """
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ò–ò-–Ω–æ–≤–æ—Å—Ç–µ–π
        ai_keywords = [
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'AI', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'ML', 
            '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', 'GPT', 'ChatGPT', 'OpenAI', 'Google AI', 'Microsoft AI',
            '—Ä–æ–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Å', 'big data',
            'deep learning', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', 'NLP', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞',
            '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'AI –º–æ–¥–µ–ª—å', 'AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', 'AI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'AI —Å–µ—Ä–≤–∏—Å'
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        full_text = f"{title} {content}".lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        found_keywords = sum(1 for keyword in ai_keywords if keyword.lower() in full_text)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if found_keywords >= 3:
            relevance_score = 8  # –í—ã—Å–æ–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        elif found_keywords >= 2:
            relevance_score = 6  # –°—Ä–µ–¥–Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        elif found_keywords >= 1:
            relevance_score = 4  # –°–ª–∞–±–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        else:
            relevance_score = 2  # –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        
        logger.info(f"üîç Fallback –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {relevance_score}/10 (–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {found_keywords})")
        return relevance_score
