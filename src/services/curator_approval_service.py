# -*- coding: utf-8 -*-
"""
CuratorApprovalService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∞–≤–∫–∏).

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

from src.config import config

import asyncio
import logging
import aiohttp
from typing import List, Dict, Optional, Any
from datetime import datetime

from src.services.final_digest_formatter_service import FinalDigestFormatterService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CuratorApprovalService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    –æ—Ç–≤–µ—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫).
    """
    
    def __init__(self, bot_token: str, curator_chat_id: str, formatter_service: FinalDigestFormatterService, bot_instance=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            curator_chat_id: ID –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞
            formatter_service: –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            bot_instance: –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        """
        self.bot_token = bot_token
        self.curator_chat_id = curator_chat_id
        self.formatter_service = formatter_service
        self.bot_instance = bot_instance
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_message_length = config.message.max_digest_length
        self.approval_timeout = config.timeout.approval_timeout
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.current_digest_text = None
        
        logger.info(f"CuratorApprovalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {curator_chat_id}")
    
    async def send_digest_for_approval(
        self, 
        formatted_digest: str,
        chat_id: str
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.
        
        Args:
            formatted_digest: –ì–æ—Ç–æ–≤—ã–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.current_digest_text = formatted_digest
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞: {len(formatted_digest)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # 1. –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            digest_parts = self.formatter_service.split_digest_message(formatted_digest)
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            sent_messages = []
            for i, part in enumerate(digest_parts):
                message_text = part
                if len(digest_parts) > 1:
                    message_text = f"**–ß–∞—Å—Ç—å {i+1} –∏–∑ {len(digest_parts)}**\n\n{part}"
                
                result = await self._send_message_to_curator(message_text, chat_id)
                if result["success"]:
                    sent_messages.append(result["message_id"])
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {result['error']}")
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {result['error']}"
                    }
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
            approval_result = await self._send_approval_buttons(chat_id)
            if not approval_result["success"]:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫: {approval_result['error']}")
                return approval_result
            
            logger.info("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É")
            return {
                "success": True,
                "message_ids": sent_messages,
                "approval_message_id": approval_result["message_id"],
                "digest": formatted_digest
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _send_message_to_curator(self, message: str, chat_id: str = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è curator_chat_id)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            target_chat_id = chat_id or self.curator_chat_id
            
            params = {
                "chat_id": target_chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            
            connector = aiohttp.TCPConnector(ssl=True)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return {
                                "success": True,
                                "message_id": result["result"]["message_id"]
                            }
                        else:
                            error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            return {
                                "success": False,
                                "error": f"Telegram API: {error_msg}"
                            }
                    else:
                        error_text = await response.text()
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}: {error_text}"
                        }
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _send_approval_buttons(self, chat_id: str = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è curator_chat_id)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            target_chat_id = chat_id or self.curator_chat_id
            
            message_text = """
**üìã –î–∞–π–¥–∂–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

‚úÖ **–û–¥–æ–±—Ä–∏—Ç—å** - –¥–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª
‚úèÔ∏è **–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏** - –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            """
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = {
                "inline_keyboard": [
                    [
                        {
                            "text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                            "callback_data": "approve_digest"
                        },
                        {
                            "text": "‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", 
                            "callback_data": "edit_digest"
                        }
                    ]
                ]
            }
            
            params = {
                "chat_id": target_chat_id,
                "text": message_text,
                "parse_mode": "Markdown",
                "reply_markup": keyboard
            }
            
            connector = aiohttp.TCPConnector(ssl=True)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return {
                                "success": True,
                                "message_id": result["result"]["message_id"]
                            }
                        else:
                            error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            return {
                                "success": False,
                                "error": f"Telegram API: {error_msg}"
                            }
                    else:
                        error_text = await response.text()
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}: {error_text}"
                        }
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def handle_approval(self, callback_data: str, user_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.
        
        Args:
            callback_data: –î–∞–Ω–Ω—ã–µ callback (approve_digest –∏–ª–∏ edit_digest)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîç handle_approval: callback_data={callback_data}, current_digest_text={self.current_digest_text is not None}")
            if callback_data == "approve_digest":
                return await self._handle_digest_approval(user_id)
            elif callback_data == "edit_digest":
                return await self._handle_digest_editing(user_id)
            elif callback_data == "approve_edited_digest":
                return await self._handle_edited_digest_approval(user_id)
            else:
                return {
                    "success": False,
                    "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _handle_digest_approval(self, user_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º.
        
        Args:
            user_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª –¥–∞–π–¥–∂–µ—Å—Ç")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–æ—Ç–µ
            logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: bot_instance={self.bot_instance is not None}, current_digest_text={self.current_digest_text is not None}")
            if self.current_digest_text:
                logger.info(f"üìù –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞: {self.current_digest_text[:100]}...")
            if self.bot_instance and self.current_digest_text:
                self.bot_instance.waiting_for_photo[int(user_id)] = self.current_digest_text
                logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ: bot_instance={self.bot_instance is not None}, current_digest_text={self.current_digest_text is not None}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_message = """
‚úÖ **–î–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!**

–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
            """
            
            result = await self._send_message_to_curator(confirmation_message, self.curator_chat_id)
            
            if result["success"]:
                return {
                    "success": True,
                    "action": "request_photo",
                    "message": "–î–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result['error']}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _handle_digest_editing(self, user_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Args:
            user_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"‚úèÔ∏è –ö—É—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_message = """
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞.

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ–≤–æ—Å—Ç–∏, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ)
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω
            """
            
            result = await self._send_message_to_curator(edit_message)
            
            if result["success"]:
                return {
                    "success": True,
                    "action": "wait_for_edit",
                    "message": "–û–∂–∏–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {result['error']}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _handle_edited_digest_approval(self, user_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
        
        Args:
            user_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä {user_id} –æ–¥–æ–±—Ä–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–æ—Ç–µ
            if self.bot_instance and self.current_digest_text:
                self.bot_instance.waiting_for_photo[int(user_id)] = self.current_digest_text
                logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            result = await self._send_message_to_curator(
                "üì∏ –û—Ç–ª–∏—á–Ω–æ! –î–∞–π–¥–∂–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.",
                self.curator_chat_id
            )
            
            if result["success"]:
                return {
                    "success": True,
                    "action": "photo_request",
                    "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–æ—Ç–æ: {result['error']}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def process_edited_digest(self, edited_text: str, user_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            edited_text: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            user_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            corrected_text = self.formatter_service.check_grammar_and_punctuation(edited_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.current_digest_text = corrected_text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            logger.info("üì§ –í—ã–∑—ã–≤–∞–µ–º _send_edited_digest_for_final_approval")
            result = await self._send_edited_digest_for_final_approval(corrected_text)
            logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {result}")
            
            if result["success"]:
                return {
                    "success": True,
                    "action": "final_approval",
                    "corrected_digest": corrected_text,
                    "message": f"‚úÖ –ü—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.\n\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{corrected_text}"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {result['error']}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _send_edited_digest_for_final_approval(self, corrected_digest: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.
        
        Args:
            corrected_digest: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç {self.curator_chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            result = await self._send_edited_digest_with_buttons(corrected_digest)
            
            return result
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _send_edited_digest_with_buttons(self, corrected_digest: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        Args:
            corrected_digest: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            import aiohttp
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º
            message_text = f"**üìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≥–æ—Ç–æ–≤!**\n\n{corrected_digest}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏–Ω–∞: {len(message_text)}): {message_text[:200]}...")
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = {
                "inline_keyboard": [
                    [
                        {
                            "text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                            "callback_data": "approve_edited_digest"
                        },
                        {
                            "text": "üîÑ –ï—â–µ —Ä–∞–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                            "callback_data": "edit_digest_again"
                        }
                    ]
                ]
            }
            
            params = {
                "chat_id": self.curator_chat_id,
                "text": message_text,
                "parse_mode": "Markdown",
                "reply_markup": keyboard
            }
            
            connector = aiohttp.TCPConnector(ssl=True)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"üì§ –û—Ç–≤–µ—Ç Telegram API: {result}")
                        if result.get("ok"):
                            logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            return {
                                "success": True,
                                "message_id": result["result"]["message_id"]
                            }
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {result}")
                            return {
                                "success": False,
                                "error": f"Telegram API error: {result}"
                            }
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return {
                            "success": False,
                            "error": f"HTTP error: {response.status}"
                        }
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
