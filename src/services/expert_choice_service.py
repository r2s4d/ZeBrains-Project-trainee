#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Expert Choice Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
"""

import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from telegram import InlineKeyboardButton
from src.config import config
from src.models import SessionLocal, Expert as ExpertModel

logger = logging.getLogger(__name__)

@dataclass
class Expert:
    """–≠–∫—Å–ø–µ—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    id: int
    name: str
    specialization: str
    telegram_id: Optional[str] = None

class ExpertChoiceService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.db = SessionLocal()
        logger.info("‚úÖ ExpertChoiceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_experts_for_choice(self) -> List[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –ë–î.
        
        Returns:
            List[Expert]: –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î
            experts_from_db = self.db.query(ExpertModel).filter(ExpertModel.is_active == True).all()
            
            experts = []
            for expert_db in experts_from_db:
                expert = Expert(
                    id=expert_db.id,
                    name=expert_db.name,
                    specialization=expert_db.specialization,
                    telegram_id=expert_db.telegram_id
                )
                experts.append(expert)
                
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(experts)} —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î")
            return experts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return []
    
    def create_expert_choice_buttons(self) -> List[List[InlineKeyboardButton]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î.
        
        Returns:
            List[List[InlineKeyboardButton]]: –ú–∞—Ç—Ä–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫
        """
        buttons = []
        experts = self.get_experts_for_choice()
        
        for expert in experts:
            # –í—Å–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            callback_data = f"select_expert_{expert.id}"
            button_text = f"üë®‚Äçüíª {expert.name}"
            
            buttons.append([
                InlineKeyboardButton(
                    button_text,
                    callback_data=callback_data
                )
            ])
        
        logger.info(f"üîò –°–æ–∑–¥–∞–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        return buttons
    
    def get_expert_by_id(self, expert_id: int) -> Optional[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ ID –∏–∑ –ë–î.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            Optional[Expert]: –≠–∫—Å–ø–µ—Ä—Ç –∏–ª–∏ None
        """
        try:
            expert_db = self.db.query(ExpertModel).filter(ExpertModel.id == expert_id).first()
            
            if expert_db:
                return Expert(
                    id=expert_db.id,
                    name=expert_db.name,
                    specialization=expert_db.specialization,
                    telegram_id=expert_db.telegram_id
                )
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")
            return None
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞."""
        try:
            if hasattr(self, 'db'):
                self.db.close()
        except:
            pass
    
