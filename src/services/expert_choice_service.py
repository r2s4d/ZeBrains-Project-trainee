#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Expert Choice Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
"""

import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from telegram import InlineKeyboardButton

logger = logging.getLogger(__name__)

@dataclass
class Expert:
    """–≠–∫—Å–ø–µ—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    id: int
    name: str
    specialization: str
    telegram_id: Optional[str] = None
    is_test: bool = False

class ExpertChoiceService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        # –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        self.experts = [
            Expert(id=1, name="–†–∞–º–∏–ª—å –ó–∞–π–Ω–µ–µ–≤", specialization="AI/ML", is_test=False),
            Expert(id=2, name="–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ú–∞—Å–ª–æ–≤", specialization="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", is_test=False),
            Expert(id=3, name="–°—Ç–µ–ø–∞–Ω –ò–≥–æ–Ω–∏–Ω", specialization="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", is_test=False),
            Expert(id=4, name="–Ø (—Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç)", specialization="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", telegram_id="1326944316", is_test=True)
        ]
        
        logger.info("‚úÖ ExpertChoiceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_experts_for_choice(self) -> List[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.
        
        Returns:
            List[Expert]: –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        return self.experts
    
    def create_expert_choice_buttons(self) -> List[List[InlineKeyboardButton]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞.
        
        Returns:
            List[List[InlineKeyboardButton]]: –ú–∞—Ç—Ä–∏—Ü–∞ –∫–Ω–æ–ø–æ–∫
        """
        buttons = []
        
        for expert in self.experts:
            if expert.is_test:
                # –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç - —Ä–∞–±–æ—Ç–∞–µ—Ç
                callback_data = f"select_expert_{expert.id}"
            else:
                # –†–µ–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã - –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                callback_data = f"expert_unavailable_{expert.id}"
            
            buttons.append([
                InlineKeyboardButton(
                    f"üë®‚Äçüíª {expert.name}",
                    callback_data=callback_data
                )
            ])
        
        return buttons
    
    def get_expert_by_id(self, expert_id: int) -> Optional[Expert]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ ID.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            Optional[Expert]: –≠–∫—Å–ø–µ—Ä—Ç –∏–ª–∏ None
        """
        for expert in self.experts:
            if expert.id == expert_id:
                return expert
        return None
    
    def is_test_expert(self, expert_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç —Ç–µ—Å—Ç–æ–≤—ã–º.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç
        """
        expert = self.get_expert_by_id(expert_id)
        return expert.is_test if expert else False
