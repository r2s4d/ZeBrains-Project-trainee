"""
NewsParserService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤.

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å:
1. –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å (–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã) –∏ 4 —á–∞—Å–∞ (–Ω–æ—á–Ω—ã–µ)
2. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ # –ø—Ä–∏–¥—É–º–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ—É–º–Ω–µ–µ
3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π

"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass

from src.services.postgresql_database_service import PostgreSQLDatabaseService
from src.services.telegram_channel_parser import TelegramChannelParser
from src.services.ai_analysis_service import AIAnalysisService
from src.models.database import Source, News, NewsSource

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ParsedNews:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏."""
    title: str
    content: str
    url: Optional[str]
    published_at: datetime
    source_id: int
    ai_summary: str  # –ö—Ä–∞—Ç–∫–æ–µ AI-–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏

class NewsParserService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
    1. –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å (–¥–Ω–µ–º) –∏ 4 —á–∞—Å–∞ (–Ω–æ—á—å—é)
    2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
    3. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ # –≥–ª—É–±–∂–µ –ø—Ä–æ–¥—É–º–∞—Ç—å –ª–æ–≥–∏–∫—É.
    4. –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    5. –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram API
    """
    
    def __init__(
        self, 
        database_service: PostgreSQLDatabaseService,
        ai_analysis_service: AIAnalysisService = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            database_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
            ai_analysis_service: –°–µ—Ä–≤–∏—Å –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
        """
        self.db = database_service
        self.ai_analysis = ai_analysis_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø–∞—Ä—Å–µ—Ä
        self.telegram_parser = None
        logger.info("üì± TelegramChannelParser –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
        self.parse_interval_active = 1  # —á–∞—Å–∞ (–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã 9:00-21:00)
        self.parse_interval_night = 4   # —á–∞—Å–∞ (–Ω–æ—á–Ω—ã–µ —á–∞—Å—ã 21:00-9:00)
        self.max_news_per_source = 50  # –º–∞–∫—Å–∏–º—É–º –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Ä–∞–∑
        self.max_total_news = 200      # –º–∞–∫—Å–∏–º—É–º –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–¥–∏–Ω –ø–∞—Ä—Å–∏–Ω–≥
        self.importance_threshold = 5.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –≤–∞–∂–Ω–æ—Å—Ç–∏
        
        logger.info("NewsParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º Telegram")
    
    async def _ensure_telegram_parser(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –ø–∞—Ä—Å–µ—Ä–∞."""
        if self.telegram_parser is None:
            try:
                self.telegram_parser = TelegramChannelParser()
                await self.telegram_parser.connect()
                logger.info("‚úÖ TelegramChannelParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramChannelParser: {e}")
                self.telegram_parser = None
    
    async def start_automatic_parsing(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.
        
        –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å.
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        
        while True:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
                current_hour = datetime.now().hour
                if 9 <= current_hour < 21:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                    interval = self.parse_interval_active
                    logger.info(f"üåû –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã: –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–∞")
                else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
                    interval = self.parse_interval_night
                    logger.info(f"üåô –ù–æ—á–Ω—ã–µ —á–∞—Å—ã: –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–∞")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                await self.parse_all_sources()
                logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ {interval} —á–∞—Å–∞")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                await asyncio.sleep(interval * 3600)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(300)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def parse_all_sources(self) -> Dict[str, int]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
        
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        logger.info("üì∞ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = self.db.get_all_sources()
        if not sources:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {}
        
        stats = {}
        total_news = 0
        
        for source in sources:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
                    if total_news >= self.max_total_news:
                        logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ({self.max_total_news}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                        break
                    
                    logger.info(f"üîç –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.name} ({source.telegram_id})")
                    
                    # –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫
                    news_count = await self.parse_channel(source)
                    stats[source.name] = news_count
                    total_news += news_count
                    
                    logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ {source.name}: –Ω–∞–π–¥–µ–Ω–æ {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
                    logger.info(f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}/{self.max_total_news}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.name}: {e}")
                    stats[source.name] = 0
        
        logger.info(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {stats}")
        return stats
    
    async def parse_channel(self, source: Source) -> int:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Telegram-–∫–∞–Ω–∞–ª.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª: {source.telegram_id}")
        
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –ø–∞—Ä—Å–µ—Ä–∞
            await self._ensure_telegram_parser()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
            if self.telegram_parser:
                # –£–±–∏—Ä–∞–µ–º @ –∏–∑ telegram_id –µ—Å–ª–∏ –µ—Å—Ç—å
                channel_username = source.telegram_id.replace('@', '')
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                news_data = await self.telegram_parser.parse_channel(
                    channel_username, 
                    limit=self.max_news_per_source
                )
                logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ @{channel_username}")
            else:
                logger.warning("‚ö†Ô∏è TelegramChannelParser –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                return 0
            
            processed_count = 0
            
            for news_data_item in news_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    duplicate_info = self._detect_duplicates(
                        news_data_item["title"], 
                        news_data_item["content"]
                    )
                    
                    if duplicate_info["is_duplicate"]:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç—å—é
                        await self._merge_duplicate_news(
                            duplicate_info["existing_news_id"],
                            source.id,
                            news_data_item.get("source_url")
                        )
                        logger.info(f"üîÑ –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç: {news_data_item['title']}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ–≤–æ—Å—Ç—å 
                        news = await self._create_simple_news_from_parsed(
                            news_data_item, 
                            source.id
                        )
                        
                        if news:
                            # –ù–ï –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ - –ø–æ –§–¢ –∫—É—Ä–∞—Ç–æ—Ä—ã —Å–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
                            processed_count += 1
                            
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news.title}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                    continue
            
            return processed_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {source.telegram_id}: {e}")
            return 0
    
    def _detect_duplicates(self, title: str, content: str) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã
            all_news = self.db.get_all_news()
            
            for news in all_news:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                if self._is_similar_title(title, news.title):
                    return {
                        "is_duplicate": True,
                        "existing_news_id": news.id,
                        "similarity_score": 0.9,
                        "reason": "–ü–æ—Ö–æ–∂–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                    }
            
            return {
                "is_duplicate": False,
                "existing_news_id": None,
                "similarity_score": 0.0,
                "reason": "–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return {
                "is_duplicate": False,
                "existing_news_id": None,
                "similarity_score": 0.0,
                "reason": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
            }
    
    def _is_similar_title(self, title1: str, title2: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∏ –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
        
        –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é AI.
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean_title1 = "".join(c.lower() for c in title1 if c.isalnum() or c.isspace())
        clean_title2 = "".join(c.lower() for c in title2 if c.isalnum() or c.isspace())
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words1 = set(clean_title1.split())
        words2 = set(clean_title2.split())
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ñ–∞–∫–∫–∞—Ä–∞
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        if union == 0:
            return False
        
        similarity = intersection / union
        return similarity > 0.7  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
    
    async def _merge_duplicate_news(
        self, 
        existing_news_id: int, 
        new_source_id: int, 
        new_url: Optional[str]
    ):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç—å—é.
        
        Args:
            existing_news_id: ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
            new_source_id: ID –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            new_url: URL –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç—å—é –∏ –Ω–æ–≤—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
            news_source = NewsSource(
                news_id=existing_news_id,
                source_id=new_source_id,
                source_url=new_url
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with self.db.get_session() as session:
                session.add(news_source)
                session.commit()
            
            logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç: –Ω–æ–≤–æ—Å—Ç—å {existing_news_id} + –∏—Å—Ç–æ—á–Ω–∏–∫ {new_source_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
    
    async def _create_simple_news_from_parsed(
        self, 
        news_data: Dict, 
        source_id: int
    ) -> Optional[News]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram.
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Telegram
            source_id: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            News: –°–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
            news = News(
                title=news_data["title"],
                content=news_data["content"],
                url=news_data.get("source_url"),  # URL –∏–∑ Telegram
                published_at=news_data["published_at"],
                status="new",  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç–∞—Ç—É—Å–∞ "new"
                created_at=datetime.utcnow(),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Telegram
                source_message_id=news_data.get("source_message_id"),
                source_channel_username=news_data.get("source_channel_username"),
                source_url=news_data.get("source_url"),
                raw_content=news_data.get("raw_content"),
                # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
                ai_summary=None
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with self.db.get_session() as session:
                session.add(news)
                session.commit()
                session.refresh(news)
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
            news_source = NewsSource(
                news_id=news.id,
                source_id=source_id,
                source_url=news_data.get("source_url")
            )
            
            with self.db.get_session() as session:
                session.add(news_source)
                session.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –∏–∑ Telegram: {news.title} (ID: {news.id})")
            return news
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Telegram: {e}")
            return None
    
    
    
