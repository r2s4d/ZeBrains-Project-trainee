#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NotificationService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞–º –∏ –∫—É—Ä–∞—Ç–æ—Ä–∞–º

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å:
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
2. –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
3. –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π
4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from enum import Enum

from src.services.database_service import DatabaseService
from src.models.database import News, Curator, Expert, Comment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    NEW_NEWS_FOR_CURATOR = "new_news_for_curator"
    NEWS_APPROVED_FOR_EXPERT = "news_approved_for_expert"
    EXPERT_COMMENT_RECEIVED = "expert_comment_received"
    NEWS_READY_FOR_PUBLICATION = "news_ready_for_publication"
    REMINDER_UNFINISHED_TASK = "reminder_unfinished_task"
    DAILY_DIGEST = "daily_digest"

class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞–º –∏ –∫—É—Ä–∞—Ç–æ—Ä–∞–º.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    """
    
    def __init__(self, database_service: DatabaseService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            database_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = database_service
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.reminder_interval = 4  # —á–∞—Å–∞
        self.max_retries = 3
        self.batch_size = 10
        
        logger.info("NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –î–õ–Ø –ö–£–†–ê–¢–û–†–û–í ====================
    
    async def notify_curator_new_news(self, curator_id: int, news: News) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        
        Args:
            curator_id: ID –∫—É—Ä–∞—Ç–æ—Ä–∞
            news: –ù–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            curator = self.db.get_curator_by_id(curator_id)
            if not curator:
                logger.warning(f"‚ö†Ô∏è –ö—É—Ä–∞—Ç–æ—Ä {curator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_curator_notification(news)
            
            # TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É {curator.name}: {news.title[:50]}...")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    async def notify_curators_batch(self, news_list: List[News]) -> Dict[str, int]:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –ø–∞–∫–µ—Ç–Ω–æ.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        logger.info(f"üì® –ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç—è—Ö")
        
        results = {"success": 0, "failed": 0, "total": len(news_list)}
        
        for news in news_list:
            try:
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                curator_id = await self._assign_curator_to_news(news.id)
                if curator_id:
                    success = await self.notify_curator_new_news(curator_id, news)
                    if success:
                        results["success"] += 1
                    else:
                        results["failed"] += 1
                else:
                    results["failed"] += 1
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: {e}")
                results["failed"] += 1
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {results}")
        return results
    
    # ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –î–õ–Ø –≠–ö–°–ü–ï–†–¢–û–í ====================
    
    async def notify_expert_new_assignment(self, expert_id: int, news: News) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏.
        
        Args:
            expert_id: ID —ç–∫—Å–ø–µ—Ä—Ç–∞
            news: –ù–æ–≤–æ—Å—Ç—å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            expert = self.db.get_expert_by_id(expert_id)
            if not expert:
                logger.warning(f"‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä—Ç {expert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_expert_assignment_notification(news)
            
            # TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É {expert.name}: {news.title[:50]}...")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            return False
    
    async def notify_experts_batch(self, news_list: List[News]) -> Dict[str, int]:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –ø–∞–∫–µ—Ç–Ω–æ.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        logger.info(f"üì® –ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ {len(news_list)} –∑–∞–¥–∞–Ω–∏—è—Ö")
        
        results = {"success": 0, "failed": 0, "total": len(news_list)}
        
        for news in news_list:
            try:
                # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
                expert_id = await self._assign_expert_to_news(news.id)
                if expert_id:
                    success = await self.notify_expert_new_assignment(expert_id, news)
                    if success:
                        results["success"] += 1
                    else:
                        results["failed"] += 1
                else:
                    results["failed"] += 1
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ {news.id}: {e}")
                results["failed"] += 1
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {results}")
        return results
    
    # ==================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –†–ï–ú–ò–ù–î–ï–†–´ ====================
    
    async def send_reminders_unfinished_tasks(self) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        logger.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")
        
        results = {"curators": 0, "experts": 0, "total": 0}
        
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞–º
            curator_reminders = await self._get_curator_reminders()
            for reminder in curator_reminders:
                await self._send_curator_reminder(reminder)
                results["curators"] += 1
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º
            expert_reminders = await self._get_expert_reminders()
            for reminder in expert_reminders:
                await self._send_expert_reminder(reminder)
                results["experts"] += 1
            
            results["total"] = results["curators"] + results["experts"]
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {results}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        return results
    
    async def send_daily_digest(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.
        
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            daily_stats = await self._get_daily_statistics()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_message = self._format_daily_digest(daily_stats)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞–º
            curators = self.db.get_all_curators()
            for curator in curators:
                await self._send_daily_digest_to_curator(curator, digest_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º
            experts = self.db.get_all_experts()
            for expert in experts:
                await self._send_daily_digest_to_expert(expert, digest_message)
            
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def _format_curator_notification(self, news: News) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞."""
        return f"""
üîç **–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**

üì∞ **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {news.title}
üìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {news.content[:200]}...
üìÖ **–î–∞—Ç–∞:** {news.created_at.strftime('%d.%m.%Y %H:%M')}
üÜî **ID –Ω–æ–≤–æ—Å—Ç–∏:** {news.id}

‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!**
        """.strip()
    
    def _format_expert_assignment_notification(self, news: News) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞."""
        return f"""
üéØ **–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã**

üì∞ **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {news.title}
üìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {news.content[:200]}...
üìÖ **–î–∞—Ç–∞:** {news.created_at.strftime('%d.%m.%Y %H:%M')}
‚≠ê **–í–∞–∂–Ω–æ—Å—Ç—å:** {getattr(news, 'importance_score', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}

üí° **–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!**
        """.strip()
    
    def _format_daily_digest(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç."""
        return f"""
üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç AI News Assistant**

üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}

üì∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:**
‚Ä¢ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {stats.get('new_news', 0)}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: {stats.get('curated_news', 0)}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats.get('expert_comments', 0)}
‚Ä¢ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {stats.get('ready_for_publication', 0)}

üöÄ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É!**
        """.strip()
    
    async def _assign_curator_to_news(self, news_id: int) -> Optional[int]:
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –∫ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
            curators = self.db.get_all_curators()
            if curators:
                return curators[0].id
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")
            return None
    
    async def _assign_expert_to_news(self, news_id: int) -> Optional[int]:
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫ –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç
            experts = self.db.get_all_experts()
            if experts:
                return experts[0].id
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            return None
    
    async def _get_curator_reminders(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []
    
    async def _get_expert_reminders(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    async def _get_daily_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return {
                "new_news": 0,
                "curated_news": 0,
                "expert_comments": 0,
                "ready_for_publication": 0
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def _send_curator_reminder(self, reminder: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        return True
    
    async def _send_expert_reminder(self, reminder: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        return True
    
    async def _send_daily_digest_to_curator(self, curator: Curator, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∫—É—Ä–∞—Ç–æ—Ä—É."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        return True
    
    async def _send_daily_digest_to_expert(self, expert: Expert, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —ç–∫—Å–ø–µ—Ä—Ç—É."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        return True
    
    async def send_telegram_message(self, chat_id: str, message: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ username
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # TODO: –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —á–∞—Ç {chat_id}: {message[:100]}...")
            
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
