"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon.
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from telethon import TelegramClient
from telethon.tl.types import Message, Channel
from telethon.errors import FloodWaitError, ChannelPrivateError, ChatAdminRequiredError

from src.config.telegram_config import TelegramConfig
from src.models.database import News, Source
from src.services.postgresql_database_service import PostgreSQLDatabaseService

logger = logging.getLogger(__name__)

class TelegramChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.client = None
        self.db_service = PostgreSQLDatabaseService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not TelegramConfig.validate_config():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram API")
        
        logger.info("‚úÖ TelegramChannelParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        await self.connect()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.disconnect()
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API."""
        try:
            self.client = TelegramClient(
                'ai_news_session',
                TelegramConfig.API_ID,
                TelegramConfig.API_HASH
            )
            
            await self.client.start()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram API."""
        if self.client:
            await self.client.disconnect()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram API")
    
    async def parse_channel(self, channel_username: str, limit: int = 50) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            limit: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        try:
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @{channel_username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await self.client.get_entity(f"@{channel_username}")
            if not channel:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(channel, limit=limit)
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @{channel_username}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            news_list = []
            for message in messages:
                if message and message.text:
                    news = await self._extract_news_from_message(message, channel_username)
                    if news:
                        news_list.append(news)
            
            logger.info(f"üì∞ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ @{channel_username}")
            return news_list
            
        except ChannelPrivateError:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
            return []
        except ChatAdminRequiredError:
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @{channel_username}")
            return []
        except FloodWaitError as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ @{channel_username}, –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
            return []
    
    async def _extract_news_from_message(self, message: Message, channel_username: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
            if not message.text or len(message.text.strip()) < 20:
                return None
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –í–†–ï–ú–Ø: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            message_time = message.date
            current_time = datetime.utcnow()
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ offset-naive –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if message_time.tzinfo is not None:
                message_time = message_time.replace(tzinfo=None)
            if current_time.tzinfo is not None:
                current_time = current_time.replace(tzinfo=None)
            
            time_difference = current_time - message_time
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if time_difference.total_seconds() > 24 * 60 * 60:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_time} (—Ä–∞–∑–Ω–∏—Ü–∞: {time_difference})")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            title = message.text[:100].strip()
            if title.endswith('...'):
                title = title[:-3]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            content = message.text.strip()
            
            # –°–æ–∑–¥–∞–µ–º URL –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            source_url = f"https://t.me/{channel_username}/{message.id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news_data = {
                'title': title,
                'content': content,
                'source_channel_username': channel_username,
                'source_message_id': message.id,
                'source_url': source_url,
                'raw_content': message.text,
                'published_at': message.date,
                'created_at': datetime.utcnow(),
                'status': 'new'
            }
            
            return news_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def parse_all_channels(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤")
            
            all_news = {}
            active_channels = TelegramConfig.get_active_channels()
            
            for channel in active_channels:
                username = channel['username']
                logger.info(f"üì± –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @{username}")
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
                channel_news = await self.parse_channel(username)
                all_news[username] = channel_news
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ (–∏–∑–±–µ–≥–∞–µ–º rate limiting)
                await asyncio.sleep(2)
            
            total_news = sum(len(news) for news in all_news.values())
            logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
            
            return all_news
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {}
    
    async def save_news_to_database(self, news_list: List[Dict[str, Any]]) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            if not news_list:
                return 0
            
            saved_count = 0
            session = self.db_service.get_session()
            
            if not session:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return 0
            
            try:
                for news_data in news_list:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç –ª–∏ —ç—Ç–æ
                    existing_news = session.query(News).filter_by(
                        source_message_id=news_data['source_message_id'],
                        source_channel_username=news_data['source_channel_username']
                    ).first()
                    
                    if existing_news:
                        logger.debug(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {news_data['title'][:50]}...")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
                    news = News(
                        title=news_data['title'],
                        content=news_data['content'],
                        source_channel_username=news_data['source_channel_username'],
                        source_message_id=news_data['source_message_id'],
                        source_url=news_data['source_url'],
                        raw_content=news_data['raw_content'],
                        published_at=news_data['published_at'],
                        created_at=news_data['created_at'],
                        status=news_data['status']
                    )
                    
                    session.add(news)
                    saved_count += 1
                
                session.commit()
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
            finally:
                session.close()
            
            return saved_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0
    
    async def get_parsing_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            session = self.db_service.get_session()
            if not session:
                return {}
            
            try:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                total_news = session.query(News).count()
                
                # –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                news_by_channel = {}
                for channel in TelegramConfig.get_active_channels():
                    username = channel['username']
                    count = session.query(News).filter_by(source_channel_username=username).count()
                    news_by_channel[username] = count
                
                # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                yesterday = datetime.utcnow() - timedelta(days=1)
                recent_news = session.query(News).filter(
                    News.created_at >= yesterday
                ).count()
                
                stats = {
                    'total_news': total_news,
                    'recent_news_24h': recent_news,
                    'news_by_channel': news_by_channel,
                    'last_update': datetime.utcnow().isoformat()
                }
                
                return stats
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
async def test_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ."""
    try:
        async with TelegramChannelParser() as parser:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–∞–Ω–∞–ª–µ ai_ins
            news = await parser.parse_channel('ai_ins', limit=5)
            print(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ @ai_ins")
            
            for i, item in enumerate(news[:3], 1):
                print(f"\n{i}. {item['title']}")
                print(f"   –ö–∞–Ω–∞–ª: @{item['source_channel_username']}")
                print(f"   URL: {item['source_url']}")
                print(f"   –î–ª–∏–Ω–∞: {len(item['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await parser.get_parsing_statistics()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_parser())
