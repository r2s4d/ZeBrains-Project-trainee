"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon.
"""

import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Optional, Any
from telethon import TelegramClient
from telethon.tl.types import Message
from telethon.errors import FloodWaitError, ChannelPrivateError, ChatAdminRequiredError

from src.config.telegram_config import TelegramConfig
from src.models.database import News, Source
from src.services.postgresql_database_service import PostgreSQLDatabaseService

logger = logging.getLogger(__name__)

class TelegramChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.client = None
        self.db_service = PostgreSQLDatabaseService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not TelegramConfig.validate_config():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram API")
        
        logger.info("‚úÖ TelegramChannelParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        await self.connect()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.disconnect()
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API."""
        try:
            self.client = TelegramClient(
                'ai_news_session',
                TelegramConfig.API_ID,
                TelegramConfig.API_HASH
            )
            
            await self.client.start()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram API."""
        if self.client:
            await self.client.disconnect()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram API")
    
    async def parse_channel(self, channel_username: str, limit: int = 50) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            limit: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        try:
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @{channel_username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await self.client.get_entity(f"@{channel_username}")
            if not channel:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(channel, limit=limit)
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @{channel_username}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            news_list = []
            for message in messages:
                if message and message.text:
                    news = await self._extract_news_from_message(message, channel_username)
                    if news:
                        news_list.append(news)
            
            logger.info(f"üì∞ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ @{channel_username}")
            return news_list
            
        except ChannelPrivateError:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
            return []
        except ChatAdminRequiredError:
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @{channel_username}")
            return []
        except FloodWaitError as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ @{channel_username}, –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
            return []
    
    async def _extract_news_from_message(self, message: Message, channel_username: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
            if not message.text or len(message.text.strip()) < 20:
                return None
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –í–†–ï–ú–Ø: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            message_time = message.date
            current_time = datetime.utcnow()
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ offset-naive –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if message_time.tzinfo is not None:
                message_time = message_time.replace(tzinfo=None)
            if current_time.tzinfo is not None:
                current_time = current_time.replace(tzinfo=None)
            
            time_difference = current_time - message_time
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if time_difference.total_seconds() > 24 * 60 * 60:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_time} (—Ä–∞–∑–Ω–∏—Ü–∞: {time_difference})")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            title = message.text[:100].strip()
            if title.endswith('...'):
                title = title[:-3]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            content = message.text.strip()
            
            # –°–æ–∑–¥–∞–µ–º URL –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            source_url = f"https://t.me/{channel_username}/{message.id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news_data = {
                'title': title,
                'content': content,
                'source_channel_username': channel_username,
                'source_message_id': message.id,
                'source_url': source_url,
                'raw_content': message.text,
                'published_at': message.date,
                'created_at': datetime.utcnow(),
                'status': 'new'
            }
            
            return news_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None